<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>无聊才读书 | 无聊才读书的个人网站</title>
  
  <subtitle>道虽迩，不行不至；事虽小，不为不成。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blogs.zhaozf.site/"/>
  <updated>2020-11-28T15:52:02.880Z</updated>
  <id>https://blogs.zhaozf.site/</id>
  
  <author>
    <name>无聊才读书</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【下载】莫言《晚熟的人》</title>
    <link href="https://blogs.zhaozf.site/89d74aee/"/>
    <id>https://blogs.zhaozf.site/89d74aee/</id>
    <published>2020-11-28T15:44:06.000Z</published>
    <updated>2020-11-28T15:52:02.880Z</updated>
    
    <content type="html"><![CDATA[<center><h1>《晚熟的人》</h1></center><p><img src="/assets/blogImg/晚熟的人.jpg" alt></p><p><a href="/assets/book/Wan Shu De Ren - Mo Yan.pdf" target="_blank">点击下载</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;center&gt;&lt;h1&gt;《晚熟的人》&lt;/h1&gt;&lt;/center&gt;



&lt;p&gt;&lt;img src=&quot;/assets/blogImg/晚熟的人.jpg&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/assets/book/Wan Shu De Ren - Mo Yan.pdf&quot; ta
      
    
    </summary>
    
      <category term="下载" scheme="https://blogs.zhaozf.site/categories/%E4%B8%8B%E8%BD%BD/"/>
    
    
      <category term="下载" scheme="https://blogs.zhaozf.site/tags/%E4%B8%8B%E8%BD%BD/"/>
    
      <category term="晚熟的人" scheme="https://blogs.zhaozf.site/tags/%E6%99%9A%E7%86%9F%E7%9A%84%E4%BA%BA/"/>
    
  </entry>
  
  <entry>
    <title>【下载】JavaScript高级程序设计(第4版)pdf版</title>
    <link href="https://blogs.zhaozf.site/349e44e5/"/>
    <id>https://blogs.zhaozf.site/349e44e5/</id>
    <published>2020-11-28T15:23:57.000Z</published>
    <updated>2020-11-28T15:49:00.838Z</updated>
    
    <content type="html"><![CDATA[<center><h1>《JavaScript高级程序设计(第4版)》pdf版</h1></center><p><img src="/assets/blogImg/JavaScript高级程序设计（第4版）_封一.jpg" alt></p><p><a href="/assets/book/JavaScript高级程序设计(第4版).pdf" target="_blank">点击下载</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;center&gt;&lt;h1&gt;《JavaScript高级程序设计(第4版)》pdf版&lt;/h1&gt;&lt;/center&gt;



&lt;p&gt;&lt;img src=&quot;/assets/blogImg/JavaScript高级程序设计（第4版）_封一.jpg&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/as
      
    
    </summary>
    
      <category term="下载" scheme="https://blogs.zhaozf.site/categories/%E4%B8%8B%E8%BD%BD/"/>
    
    
      <category term="下载" scheme="https://blogs.zhaozf.site/tags/%E4%B8%8B%E8%BD%BD/"/>
    
      <category term="JavaScript" scheme="https://blogs.zhaozf.site/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>搭建 ShowDoc 文档工具</title>
    <link href="https://blogs.zhaozf.site/d72be85e/"/>
    <id>https://blogs.zhaozf.site/d72be85e/</id>
    <published>2020-06-15T14:32:58.000Z</published>
    <updated>2020-06-17T02:16:31.455Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/blogImg/202006151712.jpg" alt></p><p><strong>摘要</strong></p><p>程序员都很希望别人能写文档，而自己却不愿意写文档。文档的编写和管理影响了团队沟通协作的效率，ShowDoc 是一个非常适合 IT 团队的在线文档分享工具，为提升团队之间的沟通协作效率而生。本实验带您在 centos 系统上搭建基于 Nginx + PHP 的 ShowDoc 文档工具。</p><p><strong>环境</strong></p><p>CentOS 7.2 64 位</p><p>个人搭建的showdoc免费开放使用，地址是<a href="http://zhaozf.site/showdoc/web/#/" target="_blank" rel="noopener">http://zhaozf.site/showdoc/web/#/</a><br><a id="more"></a></p><h2 id="1、准备-Nginx-PHP-环境"><a href="#1、准备-Nginx-PHP-环境" class="headerlink" title="1、准备 Nginx + PHP 环境"></a>1、准备 Nginx + PHP 环境</h2><p> <strong>安装 Nginx</strong></p><p>使用 <code>yum</code> 安装 Nginx：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum <span class="keyword">install</span> nginx</span><br></pre></td></tr></table></figure><p>修改 <em>/etc/nginx/nginx.conf</em> 文件为如下内容：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">user</span> nginx;</span><br><span class="line"><span class="attribute">worker_processes</span> auto;</span><br><span class="line"><span class="attribute">error_log</span> /var/log/nginx/error.log;</span><br><span class="line"><span class="attribute">pid</span> /run/nginx.pid;</span><br><span class="line"></span><br><span class="line"><span class="attribute">include</span> /usr/share/nginx/modules/<span class="regexp">*.conf</span>;</span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span> <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">log_format</span>  main  <span class="string">'<span class="variable">$remote_addr</span> - <span class="variable">$remote_user</span> [<span class="variable">$time_local</span>] "<span class="variable">$request</span>" '</span></span><br><span class="line">                      <span class="string">'<span class="variable">$status</span> <span class="variable">$body_bytes_sent</span> "<span class="variable">$http_referer</span>" '</span></span><br><span class="line">                      <span class="string">'"<span class="variable">$http_user_agent</span>" "<span class="variable">$http_x_forwarded_for</span>"'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">access_log</span>  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">sendfile</span>            <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">tcp_nopush</span>          <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">tcp_nodelay</span>         <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">keepalive_timeout</span>   <span class="number">65</span>;</span><br><span class="line">    <span class="attribute">types_hash_max_size</span> <span class="number">2048</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">include</span>             /etc/nginx/mime.types;</span><br><span class="line">    <span class="attribute">default_type</span>        application/octet-stream;</span><br><span class="line">    <span class="attribute">include</span> /etc/nginx/conf.d/<span class="regexp">*.conf</span>;</span><br><span class="line"></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span>  <span class="number">127.0.0.1</span>;</span><br><span class="line">        <span class="attribute">root</span>         /var/www/html;</span><br><span class="line">        <span class="attribute">index</span> index.php index.html</span><br><span class="line">        error_page  <span class="number">404</span>              /<span class="number">404</span>.html;</span><br><span class="line">        <span class="attribute">location</span> = /40x.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">        <span class="attribute">location</span> = /50x.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="attribute">location</span> <span class="regexp">~ .php$</span> &#123;</span><br><span class="line">            <span class="attribute">root</span>           /var/www/html;</span><br><span class="line">            <span class="attribute">fastcgi_pass</span>   <span class="number">127.0.0.1:9000</span>;</span><br><span class="line">            <span class="attribute">fastcgi_index</span>  index.php;</span><br><span class="line">            <span class="attribute">fastcgi_param</span>  SCRIPT_FILENAME  <span class="variable">$document_root</span><span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">            <span class="attribute">include</span>        fastcgi_params;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="attribute">location</span> <span class="regexp">~ /.ht</span> &#123;</span><br><span class="line">            <span class="attribute">deny</span>  all;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动 Nginx 并设置为开机启动：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start nginx</span><br><span class="line">systemctl <span class="builtin-name">enable</span> nginx.service</span><br></pre></td></tr></table></figure><p> <strong>安装 PHP</strong></p><p>使用 <code>yum</code> 安装 php-fpm：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum <span class="keyword">install</span> php php-gd php-fpm php-mcrypt php-mbstring php-mysql php-pdo</span><br></pre></td></tr></table></figure><p>启动 php-fpm 并设置为开机启动：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start php-fpm</span><br><span class="line">systemctl <span class="builtin-name">enable</span> php-fpm.service</span><br></pre></td></tr></table></figure><h2 id="2、创建项目"><a href="#2、创建项目" class="headerlink" title="2、创建项目"></a>2、创建项目</h2><p><strong>下载安装 Composer</strong></p><p>Composer 是 PHP 的一个依赖管理工具，推荐使用 Composer 创建 ShowDoc 项目。</p><p>执行如下命令[<a href="https://cloud.tencent.com/developer/labs/lab/10108#stage-2-step-1-install-composer" target="_blank" rel="noopener">安装 Composer</a>]：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -sS <span class="string">https:</span><span class="comment">//getcomposer.org/installer | php</span></span><br><span class="line">mv composer.phar <span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>composer</span><br></pre></td></tr></table></figure><blockquote><p>安装过程可能需要耗费几分钟</p></blockquote><p> <strong>设置 Composer 使用国内镜像</strong></p><p>执行命令[<a href="https://cloud.tencent.com/developer/labs/lab/10108#stage-2-step-2-mainland-composer" target="_blank" rel="noopener">设置 Composer 使用国内镜像</a>]：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer config -g repo<span class="selector-class">.packagist</span> composer https:<span class="comment">//packagist.phpcomposer.com</span></span><br></pre></td></tr></table></figure><blockquote><p>为了避免访问国外网络导致的延迟，推荐使用国内镜像源</p></blockquote><p> <strong>使用 Composer 创建项目</strong></p><p>执行命令创建项目：</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">cd </span>/<span class="string">var/</span><span class="string">www/</span><span class="string">html/</span> &amp;&amp; <span class="string">composer </span><span class="built_in">create-project</span>  <span class="string">showdoc/</span><span class="string">showdoc</span></span><br></pre></td></tr></table></figure><p> <strong>设置 showdoc 目录写权限</strong></p><p>执行命令赋予 showdoc 下部分目录的写权限</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">chmod a+w showdoc/install</span><br><span class="line">chmod a+w showdoc/Sqlite</span><br><span class="line">chmod a+w showdoc<span class="regexp">/Sqlite/</span>showdoc.db.php</span><br><span class="line">chmod a+w showdoc<span class="regexp">/Public/</span>Uploads/</span><br><span class="line">chmod a+w showdoc<span class="regexp">/server/</span>Application/Runtime</span><br><span class="line">chmod a+w showdoc<span class="regexp">/server/</span>Application<span class="regexp">/Common/</span>Conf/config.php</span><br><span class="line">chmod a+w showdoc<span class="regexp">/server/</span>Application<span class="regexp">/Home/</span>Conf/config.php</span><br></pre></td></tr></table></figure><p>创建完毕，您现在可以通过浏览器访问 http://&lt;您的 IP 地址&gt;/showdoc/install/ ，进行语言的选择以后即可通过 http://&lt;您的 IP 地址&gt;/showdoc 查看站点效果。</p><h2 id="3、准备域名和解析"><a href="#3、准备域名和解析" class="headerlink" title="3、准备域名和解析"></a>3、准备域名和解析</h2><p> <strong>域名注册</strong></p><p>注：如果您不需要通过域名访问您的站点，请通过<code>已完成，下一步</code>跳过<code>域名注册</code>环节</p><p><strong>域名解析</strong></p><p>注：如果您不需要通过域名访问您的站点，请通过<code>已完成，下一步</code>跳过<code>域名解析</code>环节</p><p>域名购买完成后, 需要将域名解析到实验云主机上。</p><p>域名设置解析后需要过一段时间才会生效，通过 <code>ping</code> 命令检查域名是否生效，如：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping www<span class="selector-class">.yourdomain</span><span class="selector-class">.com</span></span><br></pre></td></tr></table></figure><p>如果 ping 命令返回的信息中含有你设置的解析的 IP 地址，说明解析成功。</p><blockquote><p>注意替换下面命令中的 <code>www.yourmpdomain.com</code> 为您自己的注册的域名</p></blockquote><h3 id="大功告成！"><a href="#大功告成！" class="headerlink" title="大功告成！"></a>大功告成！</h3><p>恭喜，您的 ShowDoc 站点已经部署完成，您可以通过浏览器访问查看效果。</p><p>通过IP地址查看：<a href="http://xn--&lt; cvm ip &gt;-yp49ackh32qjw5g/showdoc" target="_blank" rel="noopener">http://&lt;您的 IP 地址&gt;/showdoc</a></p><p>通过域名查看：<a href="http://www.yourdomain.com/showdoc，其中替换" target="_blank" rel="noopener">http://www.yourdomain.com/showdoc，其中替换</a> <code>www.yourdomain.com</code> 为之前申请的域名。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/blogImg/202006151712.jpg&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;摘要&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;程序员都很希望别人能写文档，而自己却不愿意写文档。文档的编写和管理影响了团队沟通协作的效率，ShowDoc 是一个非常适合 IT 团队的在线文档分享工具，为提升团队之间的沟通协作效率而生。本实验带您在 centos 系统上搭建基于 Nginx + PHP 的 ShowDoc 文档工具。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;环境&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;CentOS 7.2 64 位&lt;/p&gt;
&lt;p&gt;个人搭建的showdoc免费开放使用，地址是&lt;a href=&quot;http://zhaozf.site/showdoc/web/#/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://zhaozf.site/showdoc/web/#/&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="CentOS" scheme="https://blogs.zhaozf.site/categories/CentOS/"/>
    
    
      <category term="ShowDoc" scheme="https://blogs.zhaozf.site/tags/ShowDoc/"/>
    
      <category term="CentOS" scheme="https://blogs.zhaozf.site/tags/CentOS/"/>
    
  </entry>
  
  <entry>
    <title>搭建 FTP 文件服务</title>
    <link href="https://blogs.zhaozf.site/27950b90/"/>
    <id>https://blogs.zhaozf.site/27950b90/</id>
    <published>2020-06-15T14:09:28.000Z</published>
    <updated>2020-06-15T14:42:30.810Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/blogImg/202006151712.jpg" alt></p><p><strong>摘要</strong></p><p>FTP 是一个很实用的文件传输协议，方便在客户端和服务器之间进行文件的传输。本文章带您使用 vsftpd 来搭建一个 FTP 服务，并且创建专有的 FTP 登录账户，保障服务器安全。</p><p><strong>环境</strong></p><p>CentOS 7.2 64 位</p><a id="more"></a><h2 id="1、安装并启动-FTP-服务"><a href="#1、安装并启动-FTP-服务" class="headerlink" title="1、安装并启动 FTP 服务"></a>1、安装并启动 FTP 服务</h2><p> <strong>安装 VSFTPD</strong></p><p>使用 <code>yum</code> 安装 [<a href="https://cloud.tencent.com/developer/labs/lab/10002#stage-1-step-1-vsftpd" target="_blank" rel="noopener">vsftpd</a>]：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum <span class="keyword">install</span> vsftpd -y</span><br></pre></td></tr></table></figure><blockquote><p><code>vsftpd</code> 是在 Linux 上被广泛使用的 FTP 服务器，根据其<a href="https://security.appspot.com/vsftpd.html" target="_blank" rel="noopener">官网介绍</a>，它可能是 UNIX-like 系统下最安全和快速的 FTP 服务器软件。</p></blockquote><p> <strong>启动 VSFTPD</strong></p><p>安装完成后，启动 FTP 服务：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service vsftpd <span class="literal">start</span></span><br></pre></td></tr></table></figure><p>启动后，可以看到系统已经[<a href="https://cloud.tencent.com/developer/labs/lab/10002#stage-1-step-2-21" target="_blank" rel="noopener">监听了 21 端口</a>]：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -nltp <span class="string">| grep 21</span></span><br></pre></td></tr></table></figure><p>此时，访问 <a href="ftp://xn--&lt; cvm ip -sd04ayi737nv69f/" target="_blank" rel="noopener">ftp://&lt;您的  IP 地址&gt;</a> 可浏览机器上的 <em>/var/ftp</em> 目录了。</p><blockquote><p>FTP 协议默认使用 21 端口作为服务端口</p></blockquote><h2 id="2、-配置-FTP-权限"><a href="#2、-配置-FTP-权限" class="headerlink" title="2、 配置 FTP 权限"></a>2、 配置 FTP 权限</h2><p>目前 FTP 服务登陆允许匿名登陆，也无法区分用户访问，我们需要配置 FTP 访问权限</p><p><strong>了解 VSFTP 配置</strong></p><p>vsftpd 的配置目录为 <em>/etc/vsftpd</em>，包含下列的配置文件：</p><ul><li><em>vsftpd.conf</em> 为主要配置文件</li><li><em>ftpusers</em> 配置禁止访问 FTP 服务器的用户列表</li><li><em>user_list</em> 配置用户访问控制</li></ul><p>阅读上述配置以了解更多信息。如果您准备好了，点击下一步开始修改配置来设置权限。</p><p> <strong>阻止匿名访问和切换根目录</strong></p><p>匿名访问和切换根目录都会给服务器带来[<a href="https://cloud.tencent.com/developer/labs/lab/10002#stage-2-step-2-safety" target="_blank" rel="noopener">安全风险</a>]，我们把这两个功能关闭。</p><p><em>编辑 /etc/vsftpd/vsftpd.conf</em>，[<a href="https://cloud.tencent.com/developer/labs/lab/10002#stage-2-step-2-find" target="_blank" rel="noopener">找到下面两处配置</a>]并修改：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 禁用匿名用户</span></span><br><span class="line"><span class="attr">anonymous_enable</span>=<span class="literal">NO</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 禁止切换根目录</span></span><br><span class="line"><span class="attr">chroot_local_user</span>=<span class="literal">YES</span></span><br></pre></td></tr></table></figure><p>编辑完成后，按 <code>Ctrl + S</code> 保存配置，重新启动 FTP 服务，如：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">service vsftpd restart</span></span><br></pre></td></tr></table></figure><blockquote><p>匿名访问让所有人都可以上传文件到服务器上而无需鉴权，而允许切换根目录则可能产生越权访问问题。</p></blockquote><blockquote><p>在代码编辑器中，用 <code>Ctrl + F</code> 进行搜索，Mac 用户用 <code>Cmd + F</code> 进行搜索</p></blockquote><p> <strong>创建 FTP 用户</strong></p><p>创建一个用户 <code>ftpuser</code>：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">useradd ftpuser</span></span><br></pre></td></tr></table></figure><p>为用户 <code>ftpuser</code> 设置密码：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">"Password"</span> | passwd ftpuser <span class="params">--stdin</span></span><br></pre></td></tr></table></figure><blockquote><p>为了方便后面的实验步骤，不建议使用其它的用户名</p></blockquote><blockquote><p>下面命令中的密码为实验室为您生成，为了方便后面的实验步骤，不建议使用其他密码</p></blockquote><p> <strong>限制该用户仅能通过 FTP 访问</strong></p><p>限制用户 <code>ftpuser</code> 只能通过 FTP 访问服务器，而不能直接登录服务器：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod -s <span class="regexp">/sbin/</span>nologin ftpuser</span><br></pre></td></tr></table></figure><p> <strong>为用户分配主目录</strong></p><p>为用户 <code>ftpuser</code> 创建[<a href="https://cloud.tencent.com/developer/labs/lab/10002#stage-2-step-5-ftp-home" target="_blank" rel="noopener">主目录</a>]并约定：</p><p><code>/data/ftp</code> 为主目录, 该目录不可上传文件</p><p><code>/data/ftp/pub</code> 文件只能上传到该目录下</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">mkdir</span> -p /<span class="class"><span class="keyword">data</span>/ftp/pub</span></span><br></pre></td></tr></table></figure><p>创建登录欢迎文件：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">echo</span> <span class="string">"Welcome to use FTP service."</span> &gt; /<span class="class"><span class="keyword">data</span>/ftp/welcome.txt</span></span><br></pre></td></tr></table></figure><p>设置访问权限：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">chmod</span> a-w /<span class="class"><span class="keyword">data</span>/ftp &amp;&amp; chmod 777 -<span class="type">R</span> /<span class="keyword">data</span>/ftp/pub</span></span><br></pre></td></tr></table></figure><p>设置为用户的主目录：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">usermod</span> -d /<span class="class"><span class="keyword">data</span>/ftp ftpuser</span></span><br></pre></td></tr></table></figure><blockquote><p>用户的主目录是用户通过 FTP 登录后看到的根目录</p></blockquote><blockquote><p>方便用户登录后可以看到欢迎信息，并且确定用户确实登录到了主目录上。</p></blockquote><h2 id="3、准备域名和证书"><a href="#3、准备域名和证书" class="headerlink" title="3、准备域名和证书"></a>3、准备域名和证书</h2><p>注：如果您不需要通过域名访问 FTP 服务器则可以直接点击“已完成，下一步”跳过域名和证书的准备环节</p><p> <strong>1）域名注册</strong></p><p>可以到域名服务商去注册域名，例如：阿里云或者腾讯云都可以。</p><p>  <strong>2) 域名解析</strong></p><p>域名购买完成后, 需要将域名解析到云主机的 IP上。</p><p>域名设置解析后需要过一段时间才会生效，通过 <code>ping</code> 命令检查域名是否生效，如：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ping</span> yourdomain.com</span><br></pre></td></tr></table></figure><p>如果 ping 命令返回的信息中含有你设置的解析的 IP 地址，说明解析成功。</p><p>（使用 <code>ctrl + c</code> 停止）</p><blockquote><p>注意替换下面命令中的 <code>yourdomain.com</code> 为您自己的注册的域名</p></blockquote><h2 id="4、访问-FTP-服务"><a href="#4、访问-FTP-服务" class="headerlink" title="4、访问 FTP 服务"></a>4、访问 FTP 服务</h2><p>FTP 服务已安装并配置完成，下面我们来使用该 FTP 服务</p><p><strong>访问 FTP 服务</strong></p><p>根据您个人的工作环境，选择一种方式来访问已经搭建的 FTP 服务</p><p><strong>通过 Windows 资源管理器访问</strong></p><p>Windows 用户可以复制下面的[<a href="https://cloud.tencent.com/developer/labs/lab/10002#stage-4-step-1-address" target="_blank" rel="noopener">链接</a>]到资源管理器的地址栏访问：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">ftp:</span><span class="comment">//ftpuser:Password@&lt;您的 IP 地址&gt;</span></span><br></pre></td></tr></table></figure><p> <strong>通过 FTP 客户端工具访问</strong></p><p>FTP 客户端工具众多，下面推荐两个常用的：</p><ul><li><em>WinSCP</em> - Windows 下的 FTP 和 SFTP 连接客户端</li><li><em>FileZilla</em> - 跨平台的 FTP 客户端，支持 Windows 和 Mac</li></ul><p>下载和安装 FTP 客户端后，使用下面的凭据进行连接即可：</p><p>[<a href="https://cloud.tencent.com/developer/labs/lab/10002#stage-4-step-1-host" target="_blank" rel="noopener">主机</a>]：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;您的<span class="built_in"> IP </span>地址&gt;</span><br></pre></td></tr></table></figure><p>用户：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ftpuser</span></span><br></pre></td></tr></table></figure><p>密码：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Password</span></span><br></pre></td></tr></table></figure><p>如果能够正常连接，那么大功告成，您可以开始使用属于您自己的 FTP 服务器了！</p><p>接下来，请上传任意一张图片到您的 FTP 服务器上的pub目录下，然后，就可以在 <em>/data/ftp/pub</em> 中看到了。</p><p>注意: <code>请不要直接上传文件到根目录下</code>，您应该选择上传到 <code>pub</code> 目录下</p><blockquote><p>如果您申请了域名，可以将链接中的 Ip 地址替换为对应的域名访问 FTP 服务</p></blockquote><blockquote><p>如果您申请了域名，可以将Ip 地址替换为对应的域名作为访问凭据</p></blockquote><h3 id="大功告成"><a href="#大功告成" class="headerlink" title="大功告成"></a>大功告成</h3><p>恭喜！您已经成功完成了搭建 FTP 服务器的任务。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/blogImg/202006151712.jpg&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;摘要&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;FTP 是一个很实用的文件传输协议，方便在客户端和服务器之间进行文件的传输。本文章带您使用 vsftpd 来搭建一个 FTP 服务，并且创建专有的 FTP 登录账户，保障服务器安全。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;环境&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;CentOS 7.2 64 位&lt;/p&gt;
    
    </summary>
    
      <category term="CentOS" scheme="https://blogs.zhaozf.site/categories/CentOS/"/>
    
    
      <category term="CentOS" scheme="https://blogs.zhaozf.site/tags/CentOS/"/>
    
      <category term="FTP" scheme="https://blogs.zhaozf.site/tags/FTP/"/>
    
  </entry>
  
  <entry>
    <title>搭建个人网盘</title>
    <link href="https://blogs.zhaozf.site/981336d9/"/>
    <id>https://blogs.zhaozf.site/981336d9/</id>
    <published>2020-06-15T08:42:03.000Z</published>
    <updated>2020-06-15T13:10:58.954Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/blogImg/202006151712.jpg" alt></p><p><strong>摘要</strong></p><p>在这个数据爆炸的时代，大部分人已经离不开个人云存储—网盘，但是遗憾的是大多数网盘陆续停止了服务。本文章带您一步步搭建基于 Seafile 的专属网盘，从此不再有网盘关停文件丢失的担忧。</p><p><strong>环境</strong></p><p>CentOS 7.2 64 位</p><a id="more"></a><h2 id="1、准备域名"><a href="#1、准备域名" class="headerlink" title="1、准备域名"></a>1、准备域名</h2><p> <strong>1）域名注册</strong></p><p>可以到域名服务商去注册域名，例如：阿里云或者腾讯云都可以。</p><p>  <strong>2) 域名解析</strong></p><p>域名购买完成后, 需要将域名解析到云主机的 IP上。</p><p>域名设置解析后需要过一段时间才会生效，通过 <code>ping</code> 命令检查域名是否生效，如：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ping</span> yourdomain.com</span><br></pre></td></tr></table></figure><p>如果 ping 命令返回的信息中含有你设置的解析的 IP 地址，说明解析成功。</p><p>（使用 <code>ctrl + c</code> 停止）</p><blockquote><p>注意替换下面命令中的 <code>yourdomain.com</code> 为您自己的注册的域名</p></blockquote><h2 id="2、安装-Seafile"><a href="#2、安装-Seafile" class="headerlink" title="2、安装 Seafile"></a>2、安装 Seafile</h2><p> <strong>1）安装依赖环境</strong></p><p>使用 <code>yum</code> 安装 Python 及 MySQL：</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install <span class="keyword">python</span> <span class="keyword">python</span>-setuptools <span class="keyword">python</span>-imaging <span class="keyword">python</span>-ldap <span class="keyword">python</span>-memcached MySQL-<span class="keyword">python</span> mariadb mariadb-server</span><br></pre></td></tr></table></figure><p>启动 MariaDB 服务：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">sudo</span> <span class="selector-tag">systemctl</span> <span class="selector-tag">start</span> <span class="selector-tag">mariadb</span><span class="selector-class">.service</span></span><br><span class="line"><span class="selector-tag">sudo</span> <span class="selector-tag">systemctl</span> <span class="selector-tag">enable</span> <span class="selector-tag">mariadb</span><span class="selector-class">.service</span></span><br></pre></td></tr></table></figure><p>配置 MySQL：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/usr/</span>bin<span class="regexp">/mysql_secure_installation</span></span><br></pre></td></tr></table></figure><p>配置过程输入参数如截图所示，其中 <code>New password</code> 和 <code>Re-enter new password</code> 字段都设置为 <code>Password</code>，其他字段一路回车使用默认值：</p><p><img src="/assets/blogImg/202006152106.png" alt></p><p> <strong>2）安装 Seafile</strong></p><p>下载 Seafile 安装包：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https:<span class="regexp">//m</span>c.qcloudimg.com<span class="regexp">/static/</span>archive<span class="regexp">/3d8addbe52be88df4f6139ec7e35b453/</span>seafile-server_5.<span class="number">1.4</span>_x86-<span class="number">64</span>.tar.gz</span><br></pre></td></tr></table></figure><p>解压 Seafile 安装包：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">tar</span> <span class="selector-tag">-zxvf</span> <span class="selector-tag">seafile-server_5</span><span class="selector-class">.1</span><span class="selector-class">.4_x86-64</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span></span><br></pre></td></tr></table></figure><p>安装 Seafile 安装包：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /opt/seafile/installed</span><br><span class="line">sudo mv seafile-server_5<span class="number">.1</span><span class="number">.4</span>_x86<span class="number">-64.</span>tar.gz /opt/seafile/installed</span><br><span class="line">sudo mv seafile-server<span class="number">-5.1</span><span class="number">.4</span>/ /opt/seafile</span><br><span class="line">cd /opt/seafile/seafile-server<span class="number">-5.1</span><span class="number">.4</span></span><br><span class="line">sudo ./setup-seafile-mysql.sh</span><br></pre></td></tr></table></figure><p>执行过程输入参数如截图所示，<code>[server name]</code> 字段输入 <code>Seafile</code>，<code>[ This server&#39;s ip or domain ]</code> 字段输入教程第一步申请的域名，<code>[ 1 or 2 ]</code> 字段选择 <code>1</code>，mysql 的 <code>[ root password ]</code> 字段输入 <code>Password</code>，其他字段一路回车使用默认值：</p><p><img src="/assets/blogImg/202006152107.png" alt></p><h2 id="3、启动-Seafile-及修改防火墙规则"><a href="#3、启动-Seafile-及修改防火墙规则" class="headerlink" title="3、启动 Seafile 及修改防火墙规则"></a>3、启动 Seafile 及修改防火墙规则</h2><p> <strong>启动 Seafile</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo ./seafile<span class="selector-class">.sh</span> start</span><br><span class="line">sudo ./seahub<span class="selector-class">.sh</span> start</span><br></pre></td></tr></table></figure><p>执行过程输入参数如截图所示，其中 <code>[ admin email ]</code> 设置为您登录网盘的帐号，如 <a href="mailto:`admin@qcloudlab.wang" target="_blank" rel="noopener">`admin@qcloudlab.wang</a><code>，</code>[ admin password ]<code>和</code>[ admin password again ]<code>设置为登录网盘的密码，如</code>admin_Password`：</p><p><img src="/assets/blogImg/202006152108.png" alt></p><p> <strong>修改防火墙规则</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo firewall-cmd <span class="attribute">--zone</span>=public --permanent <span class="attribute">--add-port</span>=8082/tcp</span><br><span class="line">sudo firewall-cmd <span class="attribute">--zone</span>=public --permanent <span class="attribute">--add-port</span>=8000/tcp</span><br><span class="line">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure><h2 id="4、大功告成！"><a href="#4、大功告成！" class="headerlink" title="4、大功告成！"></a>4、大功告成！</h2><p>恭喜，您的 Seafile 已经部署完成，您现在拥有专属的网盘了，登录的帐号密码为您启动 Seafile 步骤中设置的邮箱和密码。</p><ul><li>可以通过 Ip 访问网盘：<a href="http://xn--&lt;&gt;-5h6jl6wklv443c:8000/" target="_blank" rel="noopener">http://&lt;您的域名&gt;:8000</a></li><li>可以通过域名访问网盘：如 <a href="http://www.yourdomain.com:8000/" target="_blank" rel="noopener">http://www.yourdomain.com:8000</a> ，其中 <code>www.yourdomain.com</code> 替换为您注册的域名</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/blogImg/202006151712.jpg&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;摘要&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在这个数据爆炸的时代，大部分人已经离不开个人云存储—网盘，但是遗憾的是大多数网盘陆续停止了服务。本文章带您一步步搭建基于 Seafile 的专属网盘，从此不再有网盘关停文件丢失的担忧。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;环境&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;CentOS 7.2 64 位&lt;/p&gt;
    
    </summary>
    
      <category term="CentOS" scheme="https://blogs.zhaozf.site/categories/CentOS/"/>
    
    
      <category term="CentOS" scheme="https://blogs.zhaozf.site/tags/CentOS/"/>
    
      <category term="个人网盘" scheme="https://blogs.zhaozf.site/tags/%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%9B%98/"/>
    
  </entry>
  
  <entry>
    <title>搭建邮件服务</title>
    <link href="https://blogs.zhaozf.site/ecf2ac7f/"/>
    <id>https://blogs.zhaozf.site/ecf2ac7f/</id>
    <published>2020-06-15T07:50:49.000Z</published>
    <updated>2020-06-15T13:01:05.617Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/blogImg/202006151712.jpg" alt></p><p> <strong>摘要</strong></p><p>Postfix 是一个标准的 MTA「Mail Transfer Agent」服务器，它负责通过 SMTP 协议管理发送到本机的邮件以及由本机发向外界的邮件；Dovecot 是一个优秀的 IMAP/POP 服务器用以接收外界发送到本机的邮件。本实验带您一步步搭建 Postfix、Dovecot 邮件服务。</p><p> <strong>环境</strong></p><p>CentOS 7.2 64 位</p><a id="more"></a><h2 id="1、准备域名"><a href="#1、准备域名" class="headerlink" title="1、准备域名"></a>1、准备域名</h2><p><strong>1）域名注册</strong></p><p>可以到域名服务商去注册域名，例如：阿里云或者腾讯云都可以。</p><p> <strong>2) 域名解析</strong></p><p>域名购买完成后, 需要将域名解析到云主机的 IP上。</p><p>完成需要添加两条记录：</p><p> <strong>A 记录</strong></p><p>记录类型：A</p><p>主机记录：@</p><p>记录值：&lt;您的  IP 地址&gt;</p><p> <strong>MX 记录</strong></p><p>记录类型：MX</p><p>主机记录：@</p><p>记录值：<code>yourdomain.com</code>（替换为自己域名）</p><p> <strong>3)生效检查</strong></p><p>域名设置解析后需要过一段时间才会生效，通过 <code>ping</code> 命令检查域名是否生效，如：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ping</span> yourdomain.com</span><br></pre></td></tr></table></figure><p>如果 ping 命令返回的信息中含有你设置的解析的 IP 地址，说明解析成功。</p><p>（使用 <code>ctrl + c</code> 停止）</p><p><strong>4)检查 MX 记录</strong></p><p>替换下面命令中的 <code>yourdomain.com</code> 为您自己的注册的域名：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nslookup <span class="attribute">-q</span>=mx yourdomain.com</span><br></pre></td></tr></table></figure><p>如果 nslookup 命令返回的信息中含有你设置的域名的记录值，说明解析成功。</p><blockquote><p>注意替换下面命令中的 <code>yourdomain.com</code> 为您自己的注册的域名</p></blockquote><h2 id="2、搭建之前"><a href="#2、搭建之前" class="headerlink" title="2、搭建之前"></a>2、搭建之前</h2><p>配置一个功能完善的邮件服务器并不是一项容易的工作，本次只是搭建了一个简单的邮件服务器，一些更为强大的功能还需要你去探索。</p><p> <strong>1) Postfix、Dovecot 简介</strong></p><p><strong>Postfix</strong></p><p>Postfix 是一个标准的 MTA「Mail Transfer Agent」服务器，它负责通过 SMTP 协议管理发送到本机的邮件以及由本机发向外界的邮件。</p><p><strong>Dovecot</strong></p><p>Dovecot 是一个优秀的 IMAP/POP 服务器用以接收外界发送到本机的邮件。</p><p> <strong>2) Postfix、Dovecot 安装</strong></p><p>在 CentOS 7 上，我们可以直接使用 <code>yum</code> 进行下载安装：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y <span class="keyword">install</span> postfix dovecot</span><br></pre></td></tr></table></figure><h2 id="3、Postfix"><a href="#3、Postfix" class="headerlink" title="3、Postfix"></a>3、Postfix</h2><p> <strong>配置 Postfix</strong></p><p>有关教程中配置参数的具体含义，请参照 <a href="http://www.postfix.org/documentation.html" target="_blank" rel="noopener">Postfix 配置文档</a>。</p><p> <strong>1) 配置</strong></p><p>在终端中输入以下命令以修改 Postfix 相关配置：</p><p>注意：<strong>记得将 <code>yourdomain.com</code> 替换为你自己的域名</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">postconf</span> -e <span class="string">'myhostname = server.yourdomain.com'</span></span><br><span class="line">postconf -e <span class="string">'mydestination = localhost, localhost.localdomain'</span></span><br><span class="line">postconf -e <span class="string">'myorigin = <span class="variable">$mydomain</span>'</span></span><br><span class="line">postconf -e <span class="string">'mynetworks = 127.0.0.0/8'</span></span><br><span class="line">postconf -e <span class="string">'inet_interfaces = all'</span></span><br><span class="line">postconf -e <span class="string">'inet_protocols = all'</span></span><br><span class="line">postconf -e <span class="string">'mydestination = <span class="variable">$myhostname</span>, localhost.<span class="variable">$mydomain</span>, localhost, <span class="variable">$mydomain</span>'</span></span><br><span class="line">postconf -e <span class="string">'home_mailbox = Maildir/'</span></span><br><span class="line">postconf -e <span class="string">'smtpd_sasl_type = dovecot'</span></span><br><span class="line">postconf -e <span class="string">'smtpd_sasl_path = private/auth'</span></span><br><span class="line">postconf -e <span class="string">'smtpd_sasl_auth_enable = yes'</span></span><br><span class="line">postconf -e <span class="string">'broken_sasl_auth_clients = yes'</span></span><br><span class="line">postconf -e <span class="string">'smtpd_sasl_authenticated_header = yes'</span></span><br><span class="line">postconf -e <span class="string">'smtpd_recipient_restrictions = permit_mynetworks, permit_sasl_authenticated, reject_unauth_destination'</span></span><br><span class="line">postconf -e <span class="string">'smtpd_use_tls = yes'</span></span><br><span class="line">postconf -e <span class="string">'smtpd_tls_cert_file = /etc/pki/dovecot/certs/dovecot.pem'</span></span><br><span class="line">postconf -e <span class="string">'smtpd_tls_key_file = /etc/pki/dovecot/private/dovecot.pem'</span></span><br></pre></td></tr></table></figure><p>配置中 Postfix 使用 <strong>sasl</strong> 和 <strong>tls</strong> 来完成身份认证和传输信息加密。</p><p>试验中使用了 Dovecot 默认的 <strong>ssl</strong> 证书和私钥，如果你需要修改为自己的，请替换最后两行配置的路径。</p><p><strong>2) 配置 smtps</strong></p><p>部分邮件客户端依赖于使用 465 端口提供加密连接，所以我们修改配置，允许 Postfix 使用 465 端口发送邮件。</p><p>打开 <em>/etc/postfix/master.cf</em> 文件，将如下两行前的 <code>#</code> 去除：</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">smtps inet <span class="built_in">n</span> - <span class="built_in">n</span> - - smtpd</span><br><span class="line">-o smtpd_tls_wrappermode=yes</span><br></pre></td></tr></table></figure><p>（注意： <strong><code>-o</code> 前要保留空格</strong>）</p><p>然后 <code>ctrl + s</code> 保存文件。</p><p> <strong>3) 启动</strong></p><p>使用以下命令，将 Postfix 设为自动启动并首次启动该服务：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">systemctl</span> <span class="selector-tag">enable</span> <span class="selector-tag">postfix</span><span class="selector-class">.service</span></span><br><span class="line"><span class="selector-tag">systemctl</span> <span class="selector-tag">start</span>  <span class="selector-tag">postfix</span><span class="selector-class">.service</span></span><br></pre></td></tr></table></figure><p><strong>Postfix 日志</strong></p><p>Postfix 系统的日志文件在系统的这个目录下的 <em>/var/log/maillog</em> 文件，此文件记录了 Postfix 服务器的运行状态信息。</p><h2 id="4、Dovecot"><a href="#4、Dovecot" class="headerlink" title="4、Dovecot"></a>4、Dovecot</h2><p> <strong>配置 Dovecot</strong></p><p> <strong>修改 dovecot.conf</strong></p><p>打开 <em>/etc/dovecot/dovecot.conf</em> 文件，在最下方加入以下配置：</p><p><strong>示例代码：/etc/dovecot/dovecot.conf</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ssl_cert</span> = &lt;/etc/pki/dovecot/certs/dovecot.pem</span><br><span class="line"><span class="attr">ssl_key</span> = &lt;/etc/pki/dovecot/private/dovecot.pem</span><br><span class="line"></span><br><span class="line"><span class="attr">protocols</span> = imap pop3 lmtp</span><br><span class="line"><span class="attr">listen</span> = *</span><br><span class="line"><span class="attr">mail_location</span> = Maildir:~/Maildir</span><br><span class="line"><span class="attr">disable_plaintext_auth</span> = <span class="literal">no</span></span><br></pre></td></tr></table></figure><p>如果前面你修改为了自己的 ssl 证书和私钥，请替换开始两行配置的路径。</p><p>然后 <code>ctrl + s</code> 保存文件。</p><p> <strong>修改 10-master.conf</strong></p><p>打开 <em>/etc/dovecot/conf.d/10-master.conf</em> 文件，找到 <code>service auth</code> 部分，将以下行前面的 <code>#</code> 去除：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">unix_listener <span class="meta-keyword">/var/</span>spool<span class="meta-keyword">/postfix/</span>private/<span class="class">auth </span>&#123;  </span><br><span class="line">       mode = <span class="number">0666</span>  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后 <code>ctrl + s</code> 保存文件。</p><p><strong>启动 Dovecot</strong></p><p>使用以下命令，将 Dovecot 设为自动启动并首次启动该服务：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">systemctl</span> <span class="selector-tag">enable</span> <span class="selector-tag">dovecot</span><span class="selector-class">.service</span></span><br><span class="line"><span class="selector-tag">systemctl</span> <span class="selector-tag">start</span>  <span class="selector-tag">dovecot</span><span class="selector-class">.service</span></span><br></pre></td></tr></table></figure><p>查看 <em>/var/log/maillog</em> 文件，查看服务是否成功启动。</p><p>如成功启动，日志里应包含如下信息：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Jun 26 12:00:28 localhost postfix/postfix-script[28338]: starting the Postfix mail system</span><br><span class="line">Jun 26 12:00:29 localhost postfix/master[28340]: daemon started -- version 2.10.1, configuration /etc/postfix</span><br><span class="line">Jun 26 12:28:40 localhost dovecot: master: Dovecot v2.2.10 starting up <span class="keyword">for</span> imap, pop3, lmtp (core dumps disabled)</span><br></pre></td></tr></table></figure><h2 id="5、创建账户"><a href="#5、创建账户" class="headerlink" title="5、创建账户"></a>5、创建账户</h2><p>该配置下邮箱账户依赖于系统用户，所以通过添加系统用户的方式创建邮箱账户。</p><p><strong>添加用户</strong></p><p>在终端中使用 <code>useradd</code> 命令添加用户：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>使用 <code>passwd</code> 命令设置对应用户密码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd <span class="built_in">test</span></span><br></pre></td></tr></table></figure><h2 id="6、测试"><a href="#6、测试" class="headerlink" title="6、测试"></a>6、测试</h2><p>如测试中遇到异常，请查看 maillog 日志文件中的错误信息。</p><p><strong>服务器端发送测试</strong></p><p>使用 <code>su</code> 命令切换用户：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">su</span> <span class="keyword">test</span></span><br></pre></td></tr></table></figure><p>我们可以使用 <code>mail</code> 命令发送邮件，将 <a href="mailto:`xxxx@xxx.com" target="_blank" rel="noopener">`xxxx@xxx.com</a>` 替换为你的其他邮箱。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">echo</span> <span class="string">"Mail Content"</span> | mail -s <span class="string">"Mail Subject"</span> xxxx<span class="variable">@xxx</span>.com</span><br></pre></td></tr></table></figure><p>然后可以前往你的接收方邮箱查收。</p><p><strong>邮件客户端</strong></p><p>你可以将该邮箱账户添加至邮件客户端使用，推荐使用 <a href="http://www.foxmail.com/" target="_blank" rel="noopener">Foxmail</a> 客户端。</p><p>可以参考以下配置进行设置：</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">服务器类型：`POP3`</span><br><span class="line">邮箱账户：  `test@yourdomain.com`</span><br><span class="line"></span><br><span class="line">收件(POP3)服务器：  `yourdomain.com`</span><br><span class="line">端口：              `995`</span><br><span class="line">安全连接(SSL)：     `是`</span><br><span class="line">用户名：            `test`</span><br><span class="line">密码：              `test用户密码`</span><br><span class="line"></span><br><span class="line">发件(SMTP)服务器：  `yourdomain.com`</span><br><span class="line">端口：              `465`</span><br><span class="line">安全连接(SSL)：     `是`</span><br><span class="line">用户名：            `test`</span><br><span class="line">密码：              `test用户密码`</span><br></pre></td></tr></table></figure><p>然后就可以使用邮件客户端通过该账户收发邮件了。</p><p>（该配置在某些邮件客户端下可能因为使用了通用证书而出现使用异常）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/blogImg/202006151712.jpg&quot; alt&gt;&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;摘要&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Postfix 是一个标准的 MTA「Mail Transfer Agent」服务器，它负责通过 SMTP 协议管理发送到本机的邮件以及由本机发向外界的邮件；Dovecot 是一个优秀的 IMAP/POP 服务器用以接收外界发送到本机的邮件。本实验带您一步步搭建 Postfix、Dovecot 邮件服务。&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;环境&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;CentOS 7.2 64 位&lt;/p&gt;
    
    </summary>
    
      <category term="CentOS" scheme="https://blogs.zhaozf.site/categories/CentOS/"/>
    
    
      <category term="CentOS" scheme="https://blogs.zhaozf.site/tags/CentOS/"/>
    
      <category term="邮件服务" scheme="https://blogs.zhaozf.site/tags/%E9%82%AE%E4%BB%B6%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>网页在线工具汇总</title>
    <link href="https://blogs.zhaozf.site/7b7bdc95/"/>
    <id>https://blogs.zhaozf.site/7b7bdc95/</id>
    <published>2020-05-26T07:46:10.000Z</published>
    <updated>2020-06-15T09:17:33.381Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/blogImg/202005261611.jpg" alt></p><h2 id="在线小工具展开目录"><a href="#在线小工具展开目录" class="headerlink" title="在线小工具展开目录"></a>在线小工具展开目录</h2><a id="more"></a><table><thead><tr><th><a href="https://hao.su/531/" target="_blank" rel="noopener">影视网站</a></th><th>观看各大视频平台的电视剧、电影</th></tr></thead><tbody><tr><td><a href="https://hao.su/2217/" target="_blank" rel="noopener">音乐播放器</a></td><td>免费试听各大平台音乐</td></tr><tr><td><a href="https://www.xbeibeix.com/api/bilibili/?hao.su" target="_blank" rel="noopener">哔哩哔哩解析</a></td><td>哔哩哔哩视频在线下载</td></tr><tr><td><a href="https://dalao.ru/" target="_blank" rel="noopener">大佬搜索</a></td><td>好用的搜索引擎</td></tr><tr><td><a href="https://ps.gaoding.com/" target="_blank" rel="noopener">在线 ps</a>、<a href="http://www.polaxiong.com/editor" target="_blank" rel="noopener">泼辣修图</a></td><td>在线图片编辑工具</td></tr><tr><td><a href="https://tableconvert.com/" target="_blank" rel="noopener">在线表格转换</a></td><td>在线表格转换工具</td></tr><tr><td><a href="https://www.apowersoft.cn/compress-file-online" target="_blank" rel="noopener">在线视频压缩</a></td><td>免费优质压缩视频、图片及 PDF 文件</td></tr><tr><td><a href="https://docsmall.com/" target="_blank" rel="noopener">docsmall</a></td><td>在线图片压缩处理，在线 pdf 处理</td></tr><tr><td><a href="http://x.bensee.com.cn/parse" target="_blank" rel="noopener">短视频解析</a></td><td>抖音快手短视频无水印下载</td></tr><tr><td><a href="http://mp3cut.net/cn/" target="_blank" rel="noopener">Audio Cutter</a>、<a href="http://ringer.org/zh/" target="_blank" rel="noopener">ringer</a></td><td>在线铃声剪辑工具</td></tr><tr><td><a href="https://web.baimiaoapp.com/?hao.su" target="_blank" rel="noopener">阿里读光</a>、<a href="https://web.baimiaoapp.com/?hao.su" target="_blank" rel="noopener">白描 ocr</a></td><td>在线图片 OCR 识别应用</td></tr><tr><td><a href="http://hao.su/ning/jiami/" target="_blank" rel="noopener">免费加密</a></td><td>文件免费在线加密 / 解密</td></tr><tr><td><a href="https://convertio.co/zh/" target="_blank" rel="noopener">convertio</a></td><td>在线格式转换工具</td></tr><tr><td><a href="https://hao.su/47/" target="_blank" rel="noopener">临时邮箱</a></td><td>保护隐私，随机生成临时邮箱地址</td></tr><tr><td><a href="https://hao.su/2495/" target="_blank" rel="noopener">在线接码</a></td><td>保护隐私，免费的电话短信接受</td></tr><tr><td><a href="https://hao.su/48/" target="_blank" rel="noopener">图片压缩</a></td><td>图片压缩一般在线服务足以满足需求</td></tr><tr><td><a href="https://hao.su/2225/" target="_blank" rel="noopener">二维码生成</a></td><td>添加文字或网址，动态生成二维码</td></tr><tr><td><a href="https://hao.su/pic.html" target="_blank" rel="noopener">在线图床</a></td><td>快速获取图片链接，方便分享</td></tr><tr><td><a href="https://hao.su/1420/" target="_blank" rel="noopener">短地址汇总</a></td><td>缩短网址链接，方便分享</td></tr></tbody></table><h2 id="在线办公展开目录"><a href="#在线办公展开目录" class="headerlink" title="在线办公展开目录"></a>在线办公展开目录</h2><table><thead><tr><th>「推荐」可视化团队协作工具</th><th><a href="https://www.huiyizhuo.com/" target="_blank" rel="noopener">会议桌</a></th></tr></thead><tbody><tr><td>阿里巴巴团队出品在线办公利器</td><td><a href="https://yuque.com/" target="_blank" rel="noopener">语雀</a></td></tr><tr><td>腾讯系产品无缝联动</td><td><a href="https://docs.qq.com/" target="_blank" rel="noopener">腾讯文档</a></td></tr><tr><td>国内知名在线文档</td><td><a href="https://shimo.im/" target="_blank" rel="noopener">石墨文档</a></td></tr><tr><td>国外知名在线协作平台</td><td><a href="https://notion.so/" target="_blank" rel="noopener">notion</a></td></tr></tbody></table><h2 id="图片处理展开目录"><a href="#图片处理展开目录" class="headerlink" title="图片处理展开目录"></a>图片处理展开目录</h2><p><strong>在线抠图，图片 ai 放大</strong></p><p><a href="https://imglarger.com/Tw" target="_blank" rel="noopener">https://imglarger.com/Tw</a></p><p>更多的在线抠图、图片无损放大网站，可以看更多：<a href="https://hao.su/3095/" target="_blank" rel="noopener">图片放大</a>、<a href="https://hao.su/2968/" target="_blank" rel="noopener">在线抠图</a>网站</p><p><a href="https://squoosh.app/" target="_blank" rel="noopener">Squoosh</a> 谷歌出品的图片压缩网站</p><p><a href="https://tool.tanpok.com/" target="_blank" rel="noopener">tanpok 图片压缩</a>基于浏览器提供的压缩功能</p><p><a href="https://tiomg.org/compress-image" target="_blank" rel="noopener">太美工具箱图片压缩工具</a> 智能化的图片压缩，支持 PNG/GIF/JPG 图片压缩。</p><p><a href="https://www.tutieshi.com/" target="_blank" rel="noopener">图贴士</a> GIF 图片工具箱 / GIF 压缩 / 视频转 GIF</p><p>更多好用的在线图片压缩网站，可以看：<a href="https://hao.su/48/" target="_blank" rel="noopener">在线图片压缩网站</a></p><h2 id="在线接码展开目录"><a href="#在线接码展开目录" class="headerlink" title="在线接码展开目录"></a>在线接码展开目录</h2><ul><li><a href="https://www.pdflibr.com/" target="_blank" rel="noopener">https://www.pdflibr.com</a></li><li><a href="https://www.visitorsms.com/cn" target="_blank" rel="noopener">https://www.visitorsms.com/cn</a></li><li><a href="https://www.becmd.com/" target="_blank" rel="noopener">https://www.becmd.com</a></li></ul><p>更多免费国内外接码平台请看：<a href="https://hao.su/2495/" target="_blank" rel="noopener">免费短信接码网站</a></p><h2 id="IP-查询展开目录"><a href="#IP-查询展开目录" class="headerlink" title="IP 查询展开目录"></a>IP 查询展开目录</h2><ul><li><a href="https://ip.sb/" target="_blank" rel="noopener">https://ip.sb</a></li><li><a href="https://www.ipip.net/" target="_blank" rel="noopener">https://www.ipip.net</a></li><li><a href="https://ip.cn/" target="_blank" rel="noopener">https://ip.cn</a></li></ul><h2 id="临时邮箱展开目录"><a href="#临时邮箱展开目录" class="headerlink" title="临时邮箱展开目录"></a>临时邮箱展开目录</h2><ul><li><a href="https://linshiyouxiang.net/" target="_blank" rel="noopener">https://linshiyouxiang.net</a></li></ul><p>10 分钟邮箱，可以自定义也可以随机申请的 10 分钟临时邮箱，支持自定义域名</p><ul><li><a href="https://www.uu.me/" target="_blank" rel="noopener">https://www.uu.me</a></li></ul><p>遨游出品的百变邮箱，可以用一个正规邮箱，利用这个百变邮箱变成无数个邮箱地址，帮你收发邮件，最后到你正规邮箱里。</p><p>更多免费临时邮箱请看：<a href="https://hao.su/47/" target="_blank" rel="noopener">免费在线临时邮箱</a></p><p>本文转载自<a href="https://hao.su/1492/" target="_blank" rel="noopener">不死鸟</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/blogImg/202005261611.jpg&quot; alt&gt;&lt;/p&gt;
&lt;h2 id=&quot;在线小工具展开目录&quot;&gt;&lt;a href=&quot;#在线小工具展开目录&quot; class=&quot;headerlink&quot; title=&quot;在线小工具展开目录&quot;&gt;&lt;/a&gt;在线小工具展开目录&lt;/h2&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Git 快速上手</title>
    <link href="https://blogs.zhaozf.site/c8dc427f/"/>
    <id>https://blogs.zhaozf.site/c8dc427f/</id>
    <published>2020-05-26T06:21:10.000Z</published>
    <updated>2020-05-26T07:40:32.047Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/blogImg/202005261430.jpg" alt="202005261250"></p><h2 id="一、Git-安装配置"><a href="#一、Git-安装配置" class="headerlink" title="一、Git 安装配置"></a>一、Git 安装配置</h2><p>在使用Git前我们需要先安装 Git。Git 目前支持 Linux/Unix、Solaris、Mac和 Windows 平台上运行。</p><p>Git 各平台安装包下载地址为：<a href="http://git-scm.com/downloads" target="_blank" rel="noopener">http://git-scm.com/downloads</a></p><a id="more"></a><h3 id="Linux-平台上安装"><a href="#Linux-平台上安装" class="headerlink" title="Linux 平台上安装"></a>Linux 平台上安装</h3><p>Git 的工作需要调用 curl，zlib，openssl，expat，libiconv 等库的代码，所以需要先安装这些依赖工具。</p><p>在有 yum 的系统上（比如 Fedora）或者有 apt-get 的系统上（比如 Debian 体系），可以用下面的命令安装：</p><p>各 Linux 系统可以很简单多使用其安装包管理工具进行安装：</p><h4 id="Debian-Ubuntu"><a href="#Debian-Ubuntu" class="headerlink" title="Debian/Ubuntu"></a>Debian/Ubuntu</h4><h5 id="Debian-Ubuntu-Git-安装命令为："><a href="#Debian-Ubuntu-Git-安装命令为：" class="headerlink" title="Debian/Ubuntu Git 安装命令为："></a>Debian/Ubuntu Git 安装命令为：</h5><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ apt-<span class="built_in">get</span> install libcurl4-gnutls-<span class="built_in">dev</span> libexpat1-<span class="built_in">dev</span> gettext \</span><br><span class="line">  libz-<span class="built_in">dev</span> libssl-<span class="built_in">dev</span></span><br><span class="line"></span><br><span class="line">$ apt-<span class="built_in">get</span> install git-core</span><br><span class="line"></span><br><span class="line">$ git --version</span><br><span class="line">git version <span class="number">1.8</span><span class="number">.1</span><span class="number">.2</span></span><br></pre></td></tr></table></figure><h5 id="Centos-RedHat"><a href="#Centos-RedHat" class="headerlink" title="Centos/RedHat"></a>Centos/RedHat</h5><p>如果你使用的系统是 Centos/RedHat 安装命令为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ yum <span class="keyword">install</span> curl-devel expat-devel gettext-devel \</span><br><span class="line">  openssl-devel zlib-devel</span><br><span class="line"></span><br><span class="line">$ yum -y <span class="keyword">install</span> git-core</span><br><span class="line"></span><br><span class="line">$ git <span class="comment">--version</span></span><br><span class="line">git <span class="keyword">version</span> <span class="number">1.7</span><span class="number">.1</span></span><br></pre></td></tr></table></figure><h3 id="Windows-平台上安装"><a href="#Windows-平台上安装" class="headerlink" title="Windows 平台上安装"></a>Windows 平台上安装</h3><p>在 Windows 平台上安装 Git 同样轻松，有个叫做 msysGit 的项目提供了安装包，可以到 GitHub 的页面上下载 exe 安装文件并运行：</p><p>安装包下载地址：<a href="http://msysgit.github.io/" target="_blank" rel="noopener">http://msysgit.github.io/</a></p><p>完成安装之后，就可以使用命令行的 git 工具（已经自带了 ssh 客户端）了，另外还有一个图形界面的 Git 项目管理工具。</p><p>在开始菜单里找到”Git”-&gt;”Git Bash”，会弹出 Git 命令窗口，你可以在该窗口进行 Git 操作。</p><h3 id="Mac-平台上安装"><a href="#Mac-平台上安装" class="headerlink" title="Mac 平台上安装"></a>Mac 平台上安装</h3><p>在 Mac 平台上安装 Git 最容易的当属使用图形化的 Git 安装工具，下载地址为：</p><p><a href="http://sourceforge.net/projects/git-osx-installer/" target="_blank" rel="noopener">http://sourceforge.net/projects/git-osx-installer/</a></p><p>安装界面如下所示：</p><p> <img src="/assets/blogImg/202005261250.png" alt="202005261250"></p><h3 id="Git-配置"><a href="#Git-配置" class="headerlink" title="Git 配置"></a>Git 配置</h3><p>Git 提供了一个叫做 git config 的工具，专门用来配置或读取相应的工作环境变量。</p><p>这些环境变量，决定了 Git 在各个环节的具体工作方式和行为。这些变量可以存放在以下三个不同的地方：</p><pre><code>`/etc/gitconfig` 文件：系统中对所有用户都普遍适用的配置。若使用 `git config` 时用 `--system` 选项，读写的就是这个文件。`~/.gitconfig` 文件：用户目录下的配置文件只适用于该用户。若使用 `git config` 时用 `--global` 选项，读写的就是这个文件。当前项目的 Git 目录中的配置文件（也就是工作目录中的 `.git/config `文件）：这里的配置仅仅针对当前项目有效。每一个级别的配置都会覆盖上层的相同配置，所以 `.git/config` 里的配置会覆盖 `/etc/gitconfig` 中的同名变量。</code></pre><p>在 Windows 系统上，Git 会找寻用户主目录下的 .gitconfig 文件。主目录即 $HOME 变量指定的目录，一般都是 C:\Documents and Settings\$USER。</p><p>此外，Git 还会尝试找寻 /etc/gitconfig 文件，只不过看当初 Git 装在什么目录，就以此作为根目录来定位。</p><h5 id="用户信息"><a href="#用户信息" class="headerlink" title="用户信息"></a>用户信息</h5><p>配置个人的用户名称和电子邮件地址：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git<span class="built_in"> config </span>--global user.name <span class="string">"zhaozf"</span>$ git<span class="built_in"> config </span>--global user.email test@zhaozf.site</span><br></pre></td></tr></table></figure><p>如果用了 –global 选项，那么更改的配置文件就是位于你用户主目录下的那个，以后你所有的项目都会默认使用这里配置的用户信息。</p><p>如果要在某个特定的项目中使用其他名字或者电邮，只要去掉 –global 选项重新配置即可，新的设定保存在当前项目的 .git/config 文件里。</p><h5 id="文本编辑器"><a href="#文本编辑器" class="headerlink" title="文本编辑器"></a>文本编辑器</h5><p>设置Git默认使用的文本编辑器, 一般可能会是 Vi 或者 Vim。如果你有其他偏好，比如 Emacs 的话，可以重新设置：:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git<span class="built_in"> config </span>--global core.editor emacs</span><br></pre></td></tr></table></figure><h5 id="差异分析工具"><a href="#差异分析工具" class="headerlink" title="差异分析工具"></a>差异分析工具</h5><p>还有一个比较常用的是，在解决合并冲突时使用哪种差异分析工具。比如要改用 vimdiff 的话：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git<span class="built_in"> config </span>--global merge.tool vimdiff</span><br></pre></td></tr></table></figure><p>Git 可以理解 kdiff3，tkdiff，meld，xxdiff，emerge，vimdiff，gvimdiff，ecmerge，和 opendiff 等合并工具的输出信息。</p><p>当然，你也可以指定使用自己开发的工具，具体怎么做可以参阅第七章。</p><h5 id="查看配置信息"><a href="#查看配置信息" class="headerlink" title="查看配置信息"></a>查看配置信息</h5><p>要检查已有的配置信息，可以使用 git config –list 命令：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git<span class="built_in"> config </span>--list</span><br><span class="line">http.<span class="attribute">postbuffer</span>=2Muser.name=zhaozf</span><br><span class="line">user.<span class="attribute">email</span>=test@zhaozf.site</span><br></pre></td></tr></table></figure><p>有时候会看到重复的变量名，那就说明它们来自不同的配置文件（比如 /etc/gitconfig 和 ~/.gitconfig），不过最终 Git 实际采用的是最后一个。</p><p>这些配置我们也可以在 ~/.gitconfig 或 /etc/gitconfig 看到，如下所示：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~<span class="string">/.gitconfig</span></span><br></pre></td></tr></table></figure><p>显示内容如下所示：</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[http]</span><br><span class="line">    <span class="attr">postBuffer</span> = <span class="number">2</span>M[user]</span><br><span class="line">    <span class="attr">name</span> = zhaozf</span><br><span class="line">    <span class="attr">email</span> = test@zhaozf.site</span><br></pre></td></tr></table></figure><p>也可以直接查阅某个环境变量的设定，只要把特定的名字跟在后面即可，像这样：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git<span class="built_in"> config </span>user.name</span><br><span class="line">zhaozf</span><br></pre></td></tr></table></figure><h2 id="二、Git-工作流程"><a href="#二、Git-工作流程" class="headerlink" title="二、Git 工作流程"></a>二、Git 工作流程</h2><p>我们为大家介绍 Git 的工作流程。</p><p>一般工作流程如下：</p><ul><li>克隆 Git 资源作为工作目录。</li><li>在克隆的资源上添加或修改文件。</li><li>如果其他人修改了，你可以更新资源。</li><li>在提交前查看修改。</li><li>提交修改。</li><li>在修改完成后，如果发现错误，可以撤回提交并再次修改并提交。</li></ul><p>下图展示了 Git 的工作流程：</p><p><img src="/assets/blogImg/202005261253.png" alt="202005261253"></p><h2 id="三、Git-工作区、暂存区和版本库"><a href="#三、Git-工作区、暂存区和版本库" class="headerlink" title="三、Git 工作区、暂存区和版本库"></a>三、Git 工作区、暂存区和版本库</h2><hr><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>我们先来理解下Git 工作区、暂存区和版本库概念</p><ul><li><strong>工作区：</strong>就是你在电脑里能看到的目录。</li><li><strong>暂存区：</strong>英文叫stage, 或index。一般存放在 “.git目录下” 下的index文件（.git/index）中，所以我们把暂存区有时也叫作索引（index）。</li><li><strong>版本库：</strong>工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。</li></ul><p>下面这个图展示了工作区、版本库中的暂存区和版本库之间的关系：</p><p><img src="/assets/blogImg/202005261255.jpg" alt="202005261255"></p><p>图中左侧为工作区，右侧为版本库。在版本库中标记为 “index” 的区域是暂存区（stage, index），标记为 “master” 的是 master 分支所代表的目录树。</p><p>图中我们可以看出此时 “HEAD” 实际是指向 master 分支的一个”游标”。所以图示的命令中出现 HEAD 的地方可以用 master 来替换。</p><p>图中的 objects 标识的区域为 Git 的对象库，实际位于 “.git/objects” 目录下，里面包含了创建的各种对象及内容。</p><p>当对工作区修改（或新增）的文件执行 “git add” 命令时，暂存区的目录树被更新，同时工作区修改（或新增）的文件内容被写入到对象库中的一个新的对象中，而该对象的ID被记录在暂存区的文件索引中。</p><p>当执行提交操作（git commit）时，暂存区的目录树写到版本库（对象库）中，master 分支会做相应的更新。即 master 指向的目录树就是提交时暂存区的目录树。</p><p>当执行 “git reset HEAD” 命令时，暂存区的目录树会被重写，被 master 分支指向的目录树所替换，但是工作区不受影响。</p><p>当执行 “git rm –cached <file>“ 命令时，会直接从暂存区删除文件，工作区则不做出改变。</file></p><p>当执行 “git checkout .” 或者 “git checkout – <file>“ 命令时，会用暂存区全部或指定的文件替换工作区的文件。这个操作很危险，会清除工作区中未添加到暂存区的改动。</file></p><p>当执行 “git checkout HEAD .” 或者 “git checkout HEAD <file>“ 命令时，会用 HEAD 指向的 master 分支中的全部或者部分文件替换暂存区和以及工作区中的文件。这个命令也是极具危险性的，因为不但会清除工作区中未提交的改动，也会清除暂存区中未提交的改动。</file></p><h2 id="四、Git-创建仓库"><a href="#四、Git-创建仓库" class="headerlink" title="四、Git 创建仓库"></a>四、Git 创建仓库</h2><p>本章节我们将为大家介绍如何创建一个 Git 仓库。</p><p>你可以使用一个已经存在的目录作为Git仓库。</p><hr><h2 id="git-init"><a href="#git-init" class="headerlink" title="git init"></a>git init</h2><p>Git 使用 <strong>git init</strong> 命令来初始化一个 Git 仓库，Git 的很多命令都需要在 Git 的仓库中运行，所以 <strong>git init</strong> 是使用 Git 的第一个命令。</p><p>在执行完成 <strong>git init</strong> 命令后，Git 仓库会生成一个 .git 目录，该目录包含了资源的所有元数据，其他的项目目录保持不变（不像 SVN 会在每个子目录生成 .svn 目录，Git 只在仓库的根目录生成 .git 目录）。</p><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>使用当前目录作为Git仓库，我们只需使它初始化。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p>该命令执行完后会在当前目录生成一个 .git 目录。</p><p>使用我们指定目录作为Git仓库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init newrepo</span><br></pre></td></tr></table></figure><p>初始化后，会在 newrepo 目录下会出现一个名为 .git 的目录，所有 Git 需要的数据和资源都存放在这个目录中。</p><p>如果当前目录下有几个文件想要纳入版本控制，需要先用 git add 命令告诉 Git 开始对这些文件进行跟踪，然后提交：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git add *.c</span><br><span class="line">$ git add README</span><br><span class="line">$ git commit -m <span class="string">'初始化项目版本'</span></span><br></pre></td></tr></table></figure><p>以上命令将目录下以 .c 结尾及 README 文件提交到仓库中。</p><hr><h2 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h2><p>我们使用 <strong>git clone</strong> 从现有 Git 仓库中拷贝项目（类似 <strong>svn checkout</strong>）。</p><p>克隆仓库的命令格式为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> &lt;repo&gt;</span><br></pre></td></tr></table></figure><p>如果我们需要克隆到指定的目录，可以使用以下命令格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> &lt;repo&gt; &lt;directory&gt;</span><br></pre></td></tr></table></figure><p><strong>参数说明：</strong></p><ul><li><strong>repo:</strong>Git 仓库。</li><li><strong>directory:</strong>本地目录。</li></ul><p>比如，要克隆 Ruby 语言的 Git 代码仓库 Grit，可以用下面的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> git://github.com/schacon/grit.git</span><br></pre></td></tr></table></figure><p>执行该命令后，会在当前目录下创建一个名为grit的目录，其中包含一个 .git 的目录，用于保存下载下来的所有版本记录。</p><p>如果要自己定义要新建的项目目录名称，可以在上面的命令末尾指定新的名字：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> git://github.com/schacon/grit.git mygrit</span><br></pre></td></tr></table></figure><h2 id="五、Git-基本操作"><a href="#五、Git-基本操作" class="headerlink" title="五、Git 基本操作"></a>五、Git 基本操作</h2><p>Git 的工作就是创建和保存你项目的快照及与之后的快照进行对比。本章将对有关创建与提交你的项目快照的命令作介绍。</p><hr><h2 id="获取与创建项目命令"><a href="#获取与创建项目命令" class="headerlink" title="获取与创建项目命令"></a>获取与创建项目命令</h2><h3 id="git-init-1"><a href="#git-init-1" class="headerlink" title="git init"></a>git init</h3><p>用 git init 在目录中创建新的 Git 仓库。 你可以在任何时候、任何目录中这么做，完全是本地化的。</p><p>在目录中执行 git init，就可以创建一个 Git 仓库了。比如我们创建 zhaozf 项目：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir zhaozf</span><br><span class="line">$ <span class="built_in">cd</span> zhaozf/$ git initInitialized empty Git repository <span class="keyword">in</span> /Users/tianqixin/www/zhaozf/.git/<span class="comment"># 在 /www/zhaozf/.git/ 目录初始化空 Git 仓库完毕。</span></span><br></pre></td></tr></table></figure><p>现在你可以看到在你的项目中生成了 .git 这个子目录。 这就是你的 Git 仓库了，所有有关你的此项目的快照数据都存放在这里。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -a....git</span><br></pre></td></tr></table></figure><h3 id="git-clone-1"><a href="#git-clone-1" class="headerlink" title="git clone"></a>git clone</h3><p>使用 git clone 拷贝一个 Git 仓库到本地，让自己能够查看该项目，或者进行修改。</p><p>如果你需要与他人合作一个项目，或者想要复制一个项目，看看代码，你就可以克隆那个项目。 执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> [url]</span><br></pre></td></tr></table></figure><p>[url] 为你想要复制的项目，就可以了。</p><p>例如我们克隆 Github 上的项目：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> git@github.com:schacon/simplegit.gitCloning into <span class="string">'simplegit'</span>...remote: Counting objects: 13, done.remote: Total 13 (delta 0), reused 0 (delta 0), pack-reused 13Receiving objects: 100% (13/13), done.Resolving deltas: 100% (2/2), done.Checking connectivity... <span class="keyword">done</span>.</span><br></pre></td></tr></table></figure><p>克隆完成后，在当前目录下会生成一个 simplegit 目录：</p><p>$ cd simplegit/ $ ls README Rakefile lib</p><p>上述操作将复制该项目的全部记录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ ls -a.        ..       .git     README   Rakefile lib</span><br><span class="line">$ <span class="built_in">cd</span> .git</span><br><span class="line">$ ls</span><br><span class="line">HEAD        description info        packed-refs</span><br><span class="line">branches    hooks       logs        refs</span><br><span class="line">config      index       objects</span><br></pre></td></tr></table></figure><p>默认情况下，Git 会按照你提供的 URL 所指示的项目的名称创建你的本地项目目录。 通常就是该 URL 最后一个 / 之后的项目名称。如果你想要一个不一样的名字， 你可以在该命令后加上你想要的名称。</p><hr><h2 id="基本快照"><a href="#基本快照" class="headerlink" title="基本快照"></a>基本快照</h2><p>Git 的工作就是创建和保存你的项目的快照及与之后的快照进行对比。本章将对有关创建与提交你的项目的快照的命令作介绍。</p><h3 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a>git add</h3><p>git add 命令可将该文件添加到缓存，如我们添加以下两个文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ touch README</span><br><span class="line">$ touch hello.php</span><br><span class="line">$ ls</span><br><span class="line">READMEhello.php</span><br><span class="line">$ git status -s?? README?? hello.php</span><br><span class="line">$</span><br></pre></td></tr></table></figure><p>git status 命令用于查看项目的当前状态。</p><p>接下来我们执行 git add 命令来添加文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add README hello.php</span><br></pre></td></tr></table></figure><p>现在我们再执行 git status，就可以看到这两个文件已经加上去了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git status -s</span><br><span class="line">A  README</span><br><span class="line">A  hello.php</span><br><span class="line">$</span><br></pre></td></tr></table></figure><p>新项目中，添加所有文件很普遍，我们可以使用 <strong>git add .</strong> 命令来添加当前项目的所有文件。</p><p>现在我们修改 README 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim README</span><br></pre></td></tr></table></figure><p>在 README 添加以下内容：<strong># zhaozf Git 测试</strong>，然后保存退出。</p><p>再执行一下 git status：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git status -s</span><br><span class="line">AM README</span><br><span class="line">A  hello.php</span><br></pre></td></tr></table></figure><p>“AM” 状态的意思是，这个文件在我们将它添加到缓存之后又有改动。改动后我们在执行 git add 命令将其添加到缓存中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git add .$ git status -s</span><br><span class="line">A  README</span><br><span class="line">A  hello.php</span><br></pre></td></tr></table></figure><p>当你要将你的修改包含在即将提交的快照里的时候，需要执行 git add。</p><h3 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a>git status</h3><p>git status 以查看在你上次提交之后是否有修改。</p><p>我演示该命令的时候加了 -s 参数，以获得简短的结果输出。如果没加该参数会详细输出内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git statusOn branch masterInitial commitChanges to be committed:</span><br><span class="line">  (use <span class="string">"git rm --cached &lt;file&gt;..."</span> to unstage)</span><br><span class="line"></span><br><span class="line">new file:   READMEnew file:   hello.php</span><br></pre></td></tr></table></figure><h3 id="git-diff"><a href="#git-diff" class="headerlink" title="git diff"></a>git diff</h3><p>执行 git diff 来查看执行 git status 的结果的详细信息。</p><p>git diff 命令显示已写入缓存与已修改但尚未写入缓存的改动的区别。git diff 有两个主要的应用场景。</p><ul><li>尚未缓存的改动：<strong>git diff</strong></li><li>查看已缓存的改动： <strong>git diff –cached</strong></li><li>查看已缓存的与未缓存的所有改动：<strong>git diff HEAD</strong></li><li>显示摘要而非整个 diff：<strong>git diff –stat</strong></li></ul><p>在 hello.php 文件中输入以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'开放课堂：www.openketang.com'</span>;?&gt;</span><br><span class="line"> </span><br><span class="line">$ git status -s</span><br><span class="line">A  README</span><br><span class="line">AM hello.php</span><br><span class="line">$ git diff</span><br><span class="line">diff --git a/hello.php b/hello.php</span><br><span class="line">index e69de29..69b5711 100644--- a/hello.php+++ b/hello.php@@ -0,0 +1,3 @@+&lt;?php+<span class="built_in">echo</span> <span class="string">'开放课堂：www.openketang.com'</span>;+?&gt;</span><br></pre></td></tr></table></figure><p>git status 显示你上次提交更新后的更改或者写入缓存的改动， 而 git diff 一行一行地显示这些改动具体是啥。</p><p>接下来我们来查看下 git diff –cached 的执行效果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git add hello.php </span><br><span class="line">$ git status -s</span><br><span class="line">A  README</span><br><span class="line">A  hello.php</span><br><span class="line">$ git diff --cached</span><br><span class="line">diff --git a/README b/READMEnew file mode 100644index 0000000..8f87495--- /dev/null+++ b/README@@ -0,0 +1 @@+<span class="comment"># zhaozf Git 测试diff --git a/hello.php b/hello.phpnew file mode 100644index 0000000..69b5711--- /dev/null+++ b/hello.php@@ -0,0 +1,3 @@+&lt;?php+echo '开放课堂：www.openketang.com';+?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h3><p>使用 git add 命令将想要快照的内容写入缓存区， 而执行 git commit 将缓存区内容添加到仓库中。</p><p>Git 为你的每一个提交都记录你的名字与电子邮箱地址，所以第一步需要配置用户名和邮箱地址。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">'zhaozf'</span>$ git config --global user.email <span class="built_in">test</span>@zhaozf.site</span><br></pre></td></tr></table></figure><p>接下来我们写入缓存，并提交对 hello.php 的所有改动。在首个例子中，我们使用 -m 选项以在命令行中提供提交注释。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git add hello.php</span><br><span class="line">$ git status -s</span><br><span class="line">A  README</span><br><span class="line">A  hello.php</span><br><span class="line">$ $ git commit -m <span class="string">'第一次版本提交'</span>[master (root-commit) d32cf1f] 第一次版本提交</span><br><span class="line"> 2 files changed, 4 insertions(+)</span><br><span class="line"> create mode 100644 README</span><br><span class="line"> create mode 100644 hello.php</span><br></pre></td></tr></table></figure><p>现在我们已经记录了快照。如果我们再执行 git status:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git status<span class="comment"># On branch masternothing to commit (working directory clean)</span></span><br></pre></td></tr></table></figure><p>以上输出说明我们在最近一次提交之后，没有做任何改动，是一个”working directory clean：干净的工作目录”。</p><p>如果你没有设置 -m 选项，Git 会尝试为你打开一个编辑器以填写提交信息。 如果 Git 在你对它的配置中找不到相关信息，默认会打开 vim。屏幕会像这样：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Please enter the commit message for your changes. Lines starting# with '#' will be ignored, and an empty message aborts the commit.# On branch master# Changes to be committed:#   (use "git reset HEAD &lt;file&gt;..." to unstage)## modified:   hello.php#~~".git/COMMIT_EDITMSG" 9L, 257C</span></span><br></pre></td></tr></table></figure><p>如果你觉得 git add 提交缓存的流程太过繁琐，Git 也允许你用 -a 选项跳过这一步。命令格式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -a</span><br></pre></td></tr></table></figure><p>我们先修改 hello.php 文件为以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'开放课堂：www.openketang.com'</span>;<span class="built_in">echo</span> <span class="string">'开放课堂：www.openketang.com'</span>;?&gt;</span><br></pre></td></tr></table></figure><p>再执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git commit -am <span class="string">'修改 hello.php 文件'</span>[master 71ee2cb] 修改 hello.php 文件</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br></pre></td></tr></table></figure><h3 id="git-reset-HEAD"><a href="#git-reset-HEAD" class="headerlink" title="git reset HEAD"></a>git reset HEAD</h3><p>git reset HEAD 命令用于取消已缓存的内容。</p><p>我们先改动文件 README 文件，内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># zhaozf Git 测试# 开放课堂</span></span><br></pre></td></tr></table></figure><p>hello.php 文件修改为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="built_in">echo</span> <span class="string">'开放课堂：www.openketang.com'</span>;<span class="built_in">echo</span> <span class="string">'开放课堂：www.openketang.com'</span>;<span class="built_in">echo</span> <span class="string">'开放课堂：www.openketang.com'</span>;?&gt;</span><br></pre></td></tr></table></figure><p>现在两个文件修改后，都提交到了缓存区，我们现在要取消其中一个的缓存，操作如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ git status -s</span><br><span class="line"> M README</span><br><span class="line"> M hello.php</span><br><span class="line">$ git add .$ git status -s</span><br><span class="line">M  README</span><br><span class="line">M  hello.pp</span><br><span class="line">$ git reset HEAD -- hello.php </span><br><span class="line">Unstaged changes after reset:Mhello.php</span><br><span class="line">$ git status -s</span><br><span class="line">M  README</span><br><span class="line"> M hello.php</span><br></pre></td></tr></table></figure><p>现在你执行 git commit，只会将 README 文件的改动提交，而 hello.php 是没有的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m <span class="string">'修改'</span>[master f50cfda] 修改</span><br><span class="line"> 1 file changed, 1 insertion(+)$ git status -s</span><br><span class="line"> M hello.php</span><br></pre></td></tr></table></figure><p>可以看到 hello.php 文件的修改并为提交。</p><p>这时我们可以使用以下命令将 hello.php 的修改提交：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -am <span class="string">'修改 hello.php 文件'</span>[master 760f74d] 修改 hello.php 文件</span><br><span class="line"> 1 file changed, 1 insertion(+)$ git statusOn branch master</span><br><span class="line">nothing to commit, working directory clean</span><br></pre></td></tr></table></figure><p>简而言之，执行 git reset HEAD 以取消之前 git add 添加，但不希望包含在下一提交快照中的缓存。</p><h3 id="git-rm"><a href="#git-rm" class="headerlink" title="git rm"></a>git rm</h3><p>git rm 会将条目从缓存区中移除。这与 git reset HEAD 将条目取消缓存是有区别的。 “取消缓存”的意思就是将缓存区恢复为我们做出修改之前的样子。</p><p>默认情况下，<strong>git rm file</strong> 会将文件从缓存区和你的硬盘中（工作目录）删除。</p><p>如果你要在工作目录中留着该文件，可以使用 <strong>git rm –cached</strong>：</p><p>如我们删除 hello.php文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git rm hello.php </span><br><span class="line">rm <span class="string">'hello.php'</span>$ ls</span><br><span class="line">README</span><br></pre></td></tr></table></figure><p>不从工作区中删除文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git rm --cached README </span><br><span class="line">rm <span class="string">'README'</span>$ ls</span><br><span class="line">README</span><br></pre></td></tr></table></figure><h3 id="git-mv"><a href="#git-mv" class="headerlink" title="git mv"></a>git mv</h3><p>git mv 命令做得所有事情就是 <strong>git rm –cached</strong> 命令的操作， 重命名磁盘上的文件，然后再执行 git add 把新文件添加到缓存区。</p><p>我们先把刚移除的 README 添加回来：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add README</span><br></pre></td></tr></table></figure><p>然后对其重名:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git mv README  README.md</span><br><span class="line">$ ls</span><br><span class="line">README.md</span><br></pre></td></tr></table></figure><h2 id="六、Git-分支管理"><a href="#六、Git-分支管理" class="headerlink" title="六、Git 分支管理"></a>六、Git 分支管理</h2><p>几乎每一种版本控制系统都以某种形式支持分支。使用分支意味着你可以从开发主线上分离开来，然后在不影响主线的同时继续工作。</p><p>有人把 Git 的分支模型称为”必杀技特性”，而正是因为它，将 Git 从版本控制系统家族里区分出来。</p><p>创建分支命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch (branchname)</span><br></pre></td></tr></table></figure><p>切换分支命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout (branchname)</span><br></pre></td></tr></table></figure><p>当你切换分支的时候，Git 会用该分支的最后提交的快照替换你的工作目录的内容， 所以多个分支不需要多个目录。</p><p>合并分支命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge</span><br></pre></td></tr></table></figure><p>你可以多次合并到统一分支， 也可以选择在合并之后直接删除被并入的分支。</p><hr><h2 id="六、Git-分支管理-1"><a href="#六、Git-分支管理-1" class="headerlink" title="六、Git 分支管理"></a>六、Git 分支管理</h2><h3 id="列出分支"><a href="#列出分支" class="headerlink" title="列出分支"></a>列出分支</h3><p>列出分支基本命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure><p>没有参数时，git branch 会列出你在本地的分支。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch* master</span><br></pre></td></tr></table></figure><p>此例的意思就是，我们有一个叫做”master”的分支，并且该分支是当前分支。</p><p>当你执行 git init 的时候，缺省情况下 Git 就会为你创建”master”分支。</p><p>如果我们要手动创建一个分支。执行 git branch (branchname) 即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git branch testing</span><br><span class="line">$ git branch* master</span><br><span class="line">  testing</span><br></pre></td></tr></table></figure><p>现在我们可以看到，有了一个新分支 testing。</p><p>当你以此方式在上次提交更新之后创建了新分支，如果后来又有更新提交， 然后又切换到了”testing”分支，Git 将还原你的工作目录到你创建分支时候的样子</p><p>接下来我们将演示如何切换分支，我们用 git checkout (branch) 切换到我们要修改的分支。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ ls</span><br><span class="line">README</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">'openketang.com'</span> &gt; test.txt</span><br><span class="line">$ git add .$ git commit -m <span class="string">'add test.txt'</span>[master 048598f] add test.txt 2 files changed, 1 insertion(+), 3 deletions(-)</span><br><span class="line"> delete mode 100644 hello.php</span><br><span class="line"> create mode 100644 test.txt</span><br><span class="line">$ ls</span><br><span class="line">READMEtest.txt</span><br><span class="line">$ git checkout testingSwitched to branch <span class="string">'testing'</span>$ ls</span><br><span class="line">READMEhello.php</span><br></pre></td></tr></table></figure><p>当我们切换到”testing”分支的时候，我们添加的新文件test.txt被移除了, 原来被删除的文件hello.php文件又出现了。切换回”master”分支的时候，它们有重新出现了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout masterSwitched to branch <span class="string">'master'</span>$ ls</span><br><span class="line">READMEtest.txt</span><br></pre></td></tr></table></figure><p>我们也可以使用 git checkout -b (branchname) 命令来创建新分支并立即切换到该分支下，从而在该分支中操作。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b newtestSwitched to a new branch <span class="string">'newtest'</span>$ git rm test2.txt </span><br><span class="line">rm <span class="string">'test2.txt'</span>$ ls</span><br><span class="line">READMEtest.txt</span><br><span class="line">$ git commit -am <span class="string">'removed test2.txt'</span>[newtest 556f0a0] removed test2.txt 1 file changed, 1 deletion(-)</span><br><span class="line"> delete mode 100644 test2.txt</span><br><span class="line">$ git checkout masterSwitched to branch <span class="string">'master'</span>$ ls</span><br><span class="line">READMEtest.txttest2.txt</span><br></pre></td></tr></table></figure><p>如你所见，我们创建了一个分支，在该分支的上下文中移除了一些文件，然后切换回我们的主分支，那些文件又回来了。</p><p>使用分支将工作切分开来，从而让我们能够在不同上下文中做事，并来回切换。</p><h3 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h3><p>删除分支命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d (branchname)</span><br></pre></td></tr></table></figure><p>例如我们要删除”testing”分支：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git branch* master</span><br><span class="line">  testing</span><br><span class="line">$ git branch -d testingDeleted branch testing (was 85fc7e7).$ git branch* master</span><br></pre></td></tr></table></figure><h3 id="分支合并"><a href="#分支合并" class="headerlink" title="分支合并"></a>分支合并</h3><p>一旦某分支有了独立内容，你终究会希望将它合并回到你的主分支。 你可以使用以下命令将任何分支合并到当前分支中去：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">git merge</span><br><span class="line">$ git branch* master</span><br><span class="line">  newtest</span><br><span class="line">$ ls</span><br><span class="line">READMEtest.txttest2.txt</span><br><span class="line">$ git merge newtestUpdating 2e082b7..556f0a0Fast-forward</span><br><span class="line"> test2.txt | 1 -</span><br><span class="line"> 1 file changed, 1 deletion(-)</span><br><span class="line"> delete mode 100644 test2.txt</span><br><span class="line">$ ls</span><br><span class="line">READMEtest.txt</span><br></pre></td></tr></table></figure><p>以上实例中我们将 newtest 分支合并到主分支去，test2.txt 文件被删除。</p><h3 id="合并冲突"><a href="#合并冲突" class="headerlink" title="合并冲突"></a>合并冲突</h3><p>合并并不仅仅是简单的文件添加、移除的操作，Git 也会合并修改。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git branch* master</span><br><span class="line">$ cat test.txt</span><br><span class="line">zhaozf.site</span><br></pre></td></tr></table></figure><p>首先，我们创建一个叫做”change_site”的分支，切换过去，我们将内容改为 <a href="http://www.zhaozf.site" target="_blank" rel="noopener">www.zhaozf.site</a> 。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b change_siteSwitched to a new branch <span class="string">'change_site'</span>$ vim test.txt </span><br><span class="line">$ head -1 test.txt </span><br><span class="line">www.openketang.com</span><br><span class="line">$ git commit -am <span class="string">'changed the site'</span>[change_site d7e7346] changed the site 1 file changed, 1 insertion(+), 1 deletion(-)</span><br></pre></td></tr></table></figure><p>将修改的内容提交到 “change_site” 分支中。 现在，假如切换回 “master” 分支我们可以看内容恢复到我们修改前的，我们再次修改test.txt文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout masterSwitched to branch <span class="string">'master'</span>$ head -1 test.txt </span><br><span class="line">www.openketang.com</span><br><span class="line">$ vim test.txt </span><br><span class="line">$ cat test.txt</span><br><span class="line">openketang.com新增加一行$ git diff</span><br><span class="line">diff --git a/test.txt b/test.txt</span><br><span class="line">index 704cce7..f84c2a4 100644--- a/test.txt+++ b/test.txt@@ -1 +1,2 @@</span><br><span class="line"> openketang.com+新增加一行$ git commit -am <span class="string">'新增加一行'</span>[master 14b4dca] 新增加一行</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br></pre></td></tr></table></figure><p>现在这些改变已经记录到我的 “master” 分支了。接下来我们将 “change_site” 分支合并过来。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> $ git merge change_siteAuto-merging test.txt</span><br><span class="line">CONFLICT (content): Merge conflict <span class="keyword">in</span> test.txtAutomatic merge failed; fix conflicts and <span class="keyword">then</span> commit the result.$ cat test.txt </span><br><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line">zhaozf.site新增加一行=======www.zhaozf.site&gt;&gt;&gt;&gt;&gt;&gt;&gt; change_site</span><br></pre></td></tr></table></figure><p>我们将前一个分支合并到 “master” 分支，一个合并冲突就出现了，接下来我们需要手动去修改它。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ vim test.txt </span><br><span class="line">$ cat test.txt </span><br><span class="line">www.openketang.com新增加一行$ git diff</span><br><span class="line">diff --cc test.txt</span><br><span class="line">index f84c2a4,bccb7c2..0000000--- a/test.txt+++ b/test.txt@@@ -1,2 -1,1 +1,2 @@@- zhaozf.site+ www.zhaozf.site +新增加一行</span><br></pre></td></tr></table></figure><p>在 Git 中，我们可以用 git add 要告诉 Git 文件冲突已经解决</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git status -s</span><br><span class="line">UU test.txt</span><br><span class="line">$ git add test.txt </span><br><span class="line">$ git status -s</span><br><span class="line">M  test.txt</span><br><span class="line">$ git commit[master 88afe0e] Merge branch <span class="string">'change_site'</span></span><br></pre></td></tr></table></figure><p>现在我们成功解决了合并中的冲突，并提交了结果。</p><h2 id="七、Git-查看提交历史"><a href="#七、Git-查看提交历史" class="headerlink" title="七、Git 查看提交历史"></a>七、Git 查看提交历史</h2><p>在使用 Git 提交了若干更新之后，又或者克隆了某个项目，想回顾下提交历史，我们可以使用 git log 命令查看。</p><p>针对我们前一章节的操作，使用 git log 命令列出历史提交记录如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span></span><br><span class="line">commit 88afe0e02adcdfea6844bb627de97da21eb10af1Merge: 14b4dca d7e7346Author: w3cschool &lt;w3c@w3cschool.cc&gt;Date:   Sun Mar 1 15:03:42 2015 +0800</span><br><span class="line"></span><br><span class="line">    Merge branch <span class="string">'change_site'</span></span><br><span class="line">    </span><br><span class="line">    Conflicts:</span><br><span class="line">        test.txt</span><br><span class="line"></span><br><span class="line">commit 14b4dcadbdc847207651d5a9fae0d315057f346eAuthor: w3cschool &lt;w3c@w3cschool.cc&gt;Date:   Sun Mar 1 14:53:15 2015 +0800</span><br><span class="line"></span><br><span class="line">    新增加一行commit d7e734640da06055e107eaf29cf350b3f1de1c2cAuthor: w3cschool &lt;w3c@w3cschool.cc&gt;Date:   Sun Mar 1 14:48:57 2015 +0800</span><br><span class="line"></span><br><span class="line">    changed the site</span><br><span class="line"></span><br><span class="line">commit 556f0a0637978097b82287ac665a717623b21f3fAuthor: w3cschool &lt;w3c@w3cschool.cc&gt;Date:   Sun Mar 1 14:40:34 2015 +0800</span><br><span class="line"></span><br><span class="line">    removed test2.txt</span><br></pre></td></tr></table></figure><p>我们可以用 –oneline 选项来查看历史记录的简洁的版本。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">$ git log --oneline88afe0e Merge branch <span class="string">'change_site'</span><span class="number">14</span>b4dca 新增加一行d7e7346 changed the site556f0a0 removed test2<span class="selector-class">.txt2e082b7</span> add test2<span class="selector-class">.txt048598f</span> add test<span class="selector-class">.txt85fc7e7</span> test comment from w3cschool.cc</span><br></pre></td></tr></table></figure><p>这告诉我们的是，此项目的开发历史。</p><p>我们还可以用 –graph 选项，查看历史中什么时候出现了分支、合并。以下为相同的命令，开启了拓扑图选项：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --oneline --graph*   88afe0e Merge branch <span class="string">'change_site'</span>|\  </span><br><span class="line">| * d7e7346 changed the site* | 14b4dca 新增加一行|/  * 556f0a0 removed test2.txt* 2e082b7 add test2.txt* 048598f add test.txt* 85fc7e7 <span class="built_in">test</span> comment from w3cschool.cc</span><br></pre></td></tr></table></figure><p>现在我们可以更清楚明了地看到何时工作分叉、又何时归并。</p><p>你也可以用 ‘–reverse’参数来逆向显示所有日志。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --reverse --oneline85fc7e7 <span class="built_in">test</span> comment from w3cschool.cc048598f add test.txt2e082b7 add test2.txt556f0a0 removed test2.txt</span><br><span class="line">d7e7346 changed the site14b4dca 新增加一行88afe0e Merge branch <span class="string">'change_site'</span></span><br></pre></td></tr></table></figure><p>如果只想查找指定用户的提交日志可以使用命令：git log –author , 例如，比方说我们要找 Git 源码中 Linus 提交的部分：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --author=Linus --oneline -581b50f3 Move <span class="string">'builtin-*'</span> into a <span class="string">'builtin/'</span> subdirectory3bb7256 make <span class="string">"index-pack"</span> a built-in377d027 make <span class="string">"git pack-redundant"</span> a built-inb532581 make <span class="string">"git unpack-file"</span> a built-in112dd51 make <span class="string">"mktag"</span> a built-in</span><br></pre></td></tr></table></figure><p>如果你要指定日期，可以执行几个选项：–since 和 –before，但是你也可以用 –until 和 –after。</p><p>例如，如果我要看 Git 项目中三周前且在四月十八日之后的所有提交，我可以执行这个（我还用了 –no-merges 选项以隐藏合并提交）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --oneline --before=&#123;3.weeks.ago&#125; --after=&#123;2010-04-18&#125; --no-merges5469e2d Git 1.7.1-rc2</span><br><span class="line">d43427d Documentation/remote-helpers: Fix typos and improve language272a36b Fixup: Second argument may be any arbitrary stringb6c8d2d Documentation/remote-helpers: Add invocation section5ce4f4e Documentation/urls: Rewrite to accomodate transport::address00b84e9 Documentation/remote-helpers: Rewrite description03aa87e Documentation: Describe other situations <span class="built_in">where</span> -z affects git diff77bc694 rebase-interactive: silence warning when no commits rewritten636db2c t3301: add tests to use --format=<span class="string">"%N"</span></span><br></pre></td></tr></table></figure><p>更多 git log 命令可查看：<a href="http://git-scm.com/docs/git-log" target="_blank" rel="noopener">http://git-scm.com/docs/git-log</a></p><h2 id="八、Git-标签"><a href="#八、Git-标签" class="headerlink" title="八、Git 标签"></a>八、Git 标签</h2><p>如果你达到一个重要的阶段，并希望永远记住那个特别的提交快照，你可以使用 git tag 给它打上标签。</p><p>比如说，我们想为我们的 w3cschoolcc 项目发布一个”1.0”版本。 我们可以用 git tag -a v1.0 命令给最新一次提交打上（HEAD）”v1.0”的标签。</p><p>-a 选项意为”创建一个带注解的标签”。 不用 -a 选项也可以执行的，但它不会记录这标签是啥时候打的，谁打的，也不会让你添加个标签的注解。 我推荐一直创建带注解的标签。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git tag -a v1.0</span><br></pre></td></tr></table></figure><p>当你执行 git tag -a 命令时，Git 会打开你的编辑器，让你写一句标签注解，就像你给提交写注解一样。</p><p>现在，注意当我们执行 git log –decorate 时，我们可以看到我们的标签了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --oneline --decorate --graph*   88afe0e (HEAD, tag: v1.0, master) Merge branch <span class="string">'change_site'</span>|\  </span><br><span class="line">| * d7e7346 (change_site) changed the site* | 14b4dca 新增加一行|/  * 556f0a0 removed test2.txt* 2e082b7 add test2.txt* 048598f add test.txt* 85fc7e7 <span class="built_in">test</span> comment from w3cschool.cc</span><br></pre></td></tr></table></figure><p>如果我们忘了给某个提交打标签，又将它发布了，我们可以给它追加标签。</p><p>例如，假设我们发布了提交 85fc7e7(上面实例最后一行)，但是那时候忘了给它打标签。 我们现在也可以：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git tag -a v0.9 85fc7e7$ git <span class="built_in">log</span> --oneline --decorate --graph*   88afe0e (HEAD, tag: v1.0, master) Merge branch <span class="string">'change_site'</span>|\  </span><br><span class="line">| * d7e7346 (change_site) changed the site* | 14b4dca 新增加一行|/  * 556f0a0 removed test2.txt* 2e082b7 add test2.txt* 048598f add test.txt* 85fc7e7 (tag: v0.9) <span class="built_in">test</span> comment from w3cschool.cc</span><br></pre></td></tr></table></figure><p>如果我们要查看所有标签可以使用以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git tag</span><br><span class="line">v0.9v1.0</span><br></pre></td></tr></table></figure><p>指定标签信息命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -a &lt;tagname&gt; -m <span class="string">"w3cschool.cc标签"</span></span><br></pre></td></tr></table></figure><p>PGP签名标签命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -s &lt;tagname&gt; -m <span class="string">"w3cschool.cc标签"</span></span><br></pre></td></tr></table></figure><h2 id="九、Git-远程仓库-Github"><a href="#九、Git-远程仓库-Github" class="headerlink" title="九、Git 远程仓库(Github)"></a>九、Git 远程仓库(Github)</h2><p>Git 并不像 SVN 那样有个中心服务器。</p><p>目前我们使用到的 Git 命令都是在本地执行，如果你想通过 Git 分享你的代码或者与其他开发人员合作。 你就需要将数据放到一台其他开发人员能够连接的服务器上。</p><p>本例使用了 Github 作为远程仓库，你可以先阅读 <a href="http://rogerdudler.github.io/git-guide/index.zh.html" target="_blank" rel="noopener">Github 简明教程。</a></p><hr><h2 id="添加远程库"><a href="#添加远程库" class="headerlink" title="添加远程库"></a>添加远程库</h2><p>要添加一个新的远程仓库，可以指定一个简单的名字，以便将来引用,命令格式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add [shortname] [url]</span><br></pre></td></tr></table></figure><p>本例以Github为例作为远程仓库，如果你没有Github可以在官网<a href="https://github.com/注册。" target="_blank" rel="noopener">https://github.com/注册。</a></p><p>由于你的本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，所以我们需要配置验证信息：</p><p>使用以下命令生成SSH Key：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">"youremail@example.com"</span></span><br></pre></td></tr></table></figure><p>后面的 <a href="mailto:**your_email@youremail.com" target="_blank" rel="noopener">**your_email@youremail.com</a>** 改为你在 github 上注册的邮箱，之后会要求确认路径和输入密码，我们这使用默认的一路回车就行。成功的话会在~/下生成.ssh文件夹，进去，打开 id_rsa.pub，复制里面的 key。</p><p>回到 github 上，进入 Account =&gt; Settings（账户配置）。</p><p><img src="https://edu.aliyun.com/files/course/2017/09-25/184443b9d1c0402242.jpg" alt="img"></p><p>左边选择 <strong>SSH and GPG keys</strong>，然后点击 <strong>New SSH key</strong> 按钮,title 设置标题，可以随便填，粘贴在你电脑上生成的 key。</p><p><img src="https://edu.aliyun.com/files/course/2017/09-25/184514a00646040125.jpg" alt="img"></p><p>添加成功后界面如下所示</p><p><img src="https://edu.aliyun.com/files/course/2017/09-25/184533d254bd582703.jpg" alt="img"></p><p>为了验证是否成功，输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.comHi tianqixin! You<span class="string">'ve successfully authenticated, but GitHub does not provide shell access.</span></span><br></pre></td></tr></table></figure><p>以下命令说明我们已成功连上 Github。</p><p>之后登录后点击” New repository “ 如下图所示：</p><p><img src="https://edu.aliyun.com/files/course/2017/09-25/184633939cdc361092.jpg" alt="img"></p><p>之后在在Repository name 填入 zhaozf-git-test(远程仓库名) ，其他保持默认设置，点击”Create repository”按钮，就成功地创建了一个新的Git仓库：</p><p><img src="https://edu.aliyun.com/files/course/2017/09-25/184652c9d52e827387.jpg" alt="img"></p><p>创建成功后，显示如下信息：</p><p><img src="https://edu.aliyun.com/files/course/2017/09-25/184707b60a12744933.jpg" alt="img"></p><p>以上信息告诉我们可以从这个仓库克隆出新的仓库，也可以把本地仓库的内容推送到GitHub仓库。</p><p>现在，我们根据 GitHub 的提示，在本地的仓库下运行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir zhaozf-git-test                     <span class="comment"># 创建测试目录$ cd zhaozf-git-test/                       # 进入测试目录$ echo "# 菜鸟教程 Git 测试" &gt;&gt; README.md     # 创建 README.md 文件并写入内容$ ls                                        # 查看目录下的文件README</span></span><br><span class="line">$ git init                                  <span class="comment"># 初始化$ git add README.md                         # 添加文件$ git commit -m "添加 README.md 文件"        # 提交并备注信息[master (root-commit) 0205aab] 添加 README.md 文件</span></span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 README.md<span class="comment"># 提交到 Github$ git remote add origin git@github.com:tianqixin/zhaozf-git-test.git</span></span><br><span class="line">$ git push -u origin master</span><br></pre></td></tr></table></figure><p>以下命令请根据你在Github成功创建新仓库的地方复制，而不是根据我提供的命令，因为我们的Github用户名不一样，仓库名也不一样。</p><p>接下来我们返回 Github 创建的仓库，就可以看到文件已上传到 Github上：</p><p><img src="https://edu.aliyun.com/files/course/2017/09-25/184739b5d6ad273419.jpg" alt="img"></p><hr><h2 id="查看当前的远程库"><a href="#查看当前的远程库" class="headerlink" title="查看当前的远程库"></a>查看当前的远程库</h2><p>要查看当前配置有哪些远程仓库，可以用命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote</span><br></pre></td></tr></table></figure><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git remote</span><br><span class="line">origin</span><br><span class="line">$ git remote -v</span><br><span class="line">origingit@github.com:tianqixin/zhaozf-git-test.git (fetch)origingit@github.com:tianqixin/zhaozf-git-test.git (push)</span><br></pre></td></tr></table></figure><p>执行时加上 -v 参数，你还可以看到每个别名的实际链接地址。</p><hr><h2 id="提取远程仓库"><a href="#提取远程仓库" class="headerlink" title="提取远程仓库"></a>提取远程仓库</h2><p>Git 有两个命令用来提取远程仓库的更新。</p><p>1、从远程仓库下载新分支与数据：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch</span><br></pre></td></tr></table></figure><p>该命令执行完后需要执行git merge 远程分支到你所在的分支。</p><p>2、从远端仓库提取数据并尝试合并到当前分支：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure><p>该命令就是在执行 git fetch 之后紧接着执行 git merge 远程分支到你所在的任意分支。</p><p>假设你配置好了一个远程仓库，并且你想要提取更新的数据，你可以首先执行 <strong>git fetch [alias]</strong> 告诉 Git 去获取它有你没有的数据，然后你可以执行 <strong>git merge [alias]/[branch]</strong> 以将服务器上的任何更新（假设有人这时候推送到服务器了）合并到你的当前分支。</p><p>接下来我们在 Github 上点击” README.md” 并在线修改它:</p><p><img src="https://edu.aliyun.com/files/course/2017/09-25/184832041e7c769713.jpg" alt="img"></p><p>然后我们在本地更新修改。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git fetch origin</span><br><span class="line">remote: Counting objects: 3, done.remote: Compressing objects: 100% (2/2), done.remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0Unpacking objects: 100% (3/3), done.From github.com:tianqixin/zhaozf-git-test   0205aab..febd8ed  master     -&gt; origin/master</span><br></pre></td></tr></table></figure><p>以上信息”0205aab..febd8ed master -&gt; origin/master” 说明 master 分支已被更新，我们可以使用以下命令将更新同步到本地：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git merge origin/masterUpdating 0205aab..febd8edFast-forward</span><br><span class="line"> README.md | 1 +</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br></pre></td></tr></table></figure><p>查看 README.md 文件内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cat README.md </span><br><span class="line"><span class="comment"># 教程 Git 测试## 第一次修改内容</span></span><br></pre></td></tr></table></figure><hr><h2 id="推送到远程仓库"><a href="#推送到远程仓库" class="headerlink" title="推送到远程仓库"></a>推送到远程仓库</h2><p>推送你的新分支与数据到某个远端仓库命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push [<span class="built_in">alias</span>] [branch]</span><br></pre></td></tr></table></figure><p>以上命令将你的 [branch] 分支推送成为 [alias] 远程仓库上的 [branch] 分支，实例如下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ touch zhaozf-test.txt      <span class="comment"># 添加文件$ git add zhaozf-test.txt </span></span><br><span class="line">$ git commit -m <span class="string">"添加到远程"</span>master 69e702d] 添加到远程</span><br><span class="line"> 1 file changed, 0 insertions(+), 0 deletions(-)</span><br><span class="line"> create mode 100644 zhaozf-test.txt</span><br><span class="line"></span><br><span class="line">$ git push origin master    <span class="comment"># 推送到 Github</span></span><br></pre></td></tr></table></figure><p>重新回到我们的 Github 仓库，可以看到文件以及提交上来了：</p><p><img src="https://edu.aliyun.com/files/course/2017/09-25/1849531411f4153823.jpg" alt="img"></p><hr><h2 id="删除远程仓库"><a href="#删除远程仓库" class="headerlink" title="删除远程仓库"></a>删除远程仓库</h2><p>删除远程仓库你可以使用命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote rm [别名]</span><br></pre></td></tr></table></figure><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git remote -v</span><br><span class="line">origingit@github.com:tianqixin/zhaozf-git-test.git (fetch)origingit@github.com:tianqixin/zhaozf-git-test.git (push)<span class="comment"># 添加仓库 origin2$ git remote add origin2 git@github.com:tianqixin/zhaozf-git-test.git</span></span><br><span class="line"></span><br><span class="line">$ git remote -v</span><br><span class="line">origingit@github.com:tianqixin/zhaozf-git-test.git (fetch)origingit@github.com:tianqixin/zhaozf-git-test.git (push)origin2git@github.com:tianqixin/zhaozf-git-test.git (fetch)origin2git@github.com:tianqixin/zhaozf-git-test.git (push)<span class="comment"># 删除仓库 origin2$ git remote rm origin2</span></span><br><span class="line">$ git remote -v</span><br><span class="line">origingit@github.com:tianqixin/zhaozf-git-test.git (fetch)origingit@github.com:tianqixin/zhaozf-git-test.git (push)</span><br></pre></td></tr></table></figure><h2 id="十、Git-服务器搭建"><a href="#十、Git-服务器搭建" class="headerlink" title="十、Git 服务器搭建"></a>十、Git 服务器搭建</h2><p>上一章节中我们远程仓库使用了 Github，Github 公开的项目是免费的，但是如果你不想让其他人看到你的项目就需要收费。</p><p>这时我们就需要自己搭建一台Git服务器作为私有仓库使用。</p><p>接下来我们将以 Centos 为例搭建 Git 服务器。</p><h3 id="1、安装Git"><a href="#1、安装Git" class="headerlink" title="1、安装Git"></a>1、安装Git</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel perl-devel</span><br><span class="line">$ yum install git</span><br></pre></td></tr></table></figure><p>接下来我们 创建一个git用户组和用户，用来运行git服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ groupadd git</span><br><span class="line">$ adduser git -g git</span><br></pre></td></tr></table></figure><h3 id="2、创建证书登录"><a href="#2、创建证书登录" class="headerlink" title="2、创建证书登录"></a>2、创建证书登录</h3><p>收集所有需要登录的用户的公钥，公钥位于id_rsa.pub文件中，把我们的公钥导入到/home/git/.ssh/authorized_keys文件里，一行一个。</p><p>如果没有该文件创建它：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /home/git/$ mkdir .ssh</span><br><span class="line">$ chmod 700 .ssh</span><br><span class="line">$ touch .ssh/authorized_keys</span><br><span class="line">$ chmod 600 .ssh/authorized_keys</span><br></pre></td></tr></table></figure><h3 id="3、初始化Git仓库"><a href="#3、初始化Git仓库" class="headerlink" title="3、初始化Git仓库"></a>3、初始化Git仓库</h3><p>首先我们选定一个目录作为Git仓库，假定是/home/gitrepo/zhaozf.git，在/home/gitrepo目录下输入命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /home</span><br><span class="line">$ mkdir gitrepo</span><br><span class="line">$ chown git:git gitrepo/$ <span class="built_in">cd</span> gitrepo</span><br><span class="line"></span><br><span class="line">$ git init --bare zhaozf.gitInitialized empty Git repository <span class="keyword">in</span> /home/gitrepo/zhaozf.git/</span><br></pre></td></tr></table></figure><p>以上命令Git创建一个空仓库，服务器上的Git仓库通常都以.git结尾。然后，把仓库所属用户改为git：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ chown -R git:git zhaozf.git</span><br></pre></td></tr></table></figure><h3 id="4、克隆仓库"><a href="#4、克隆仓库" class="headerlink" title="4、克隆仓库"></a>4、克隆仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> git@192.168.45.4:/home/gitrepo/zhaozf.gitCloning into <span class="string">'zhaozf'</span>...warning: You appear to have cloned an empty repository.Checking connectivity... <span class="keyword">done</span>.</span><br></pre></td></tr></table></figure><p>192.168.45.4 为 Git 所在服务器 ip ，你需要将其修改为你自己的 Git 服务 ip。</p><p>这样我们的 Git 服务器安装就完成了，接下来我们可以禁用 git 用户通过shell登录，可以通过编辑/etc/passwd文件完成。找到类似下面的一行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git:x:503:503::/home/git:/bin/bash</span><br></pre></td></tr></table></figure><p>改为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git:x:503:503::/home/git:/sbin/nologin</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/blogImg/202005261430.jpg&quot; alt=&quot;202005261250&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;一、Git-安装配置&quot;&gt;&lt;a href=&quot;#一、Git-安装配置&quot; class=&quot;headerlink&quot; title=&quot;一、Git 安装配置&quot;&gt;&lt;/a&gt;一、Git 安装配置&lt;/h2&gt;&lt;p&gt;在使用Git前我们需要先安装 Git。Git 目前支持 Linux/Unix、Solaris、Mac和 Windows 平台上运行。&lt;/p&gt;
&lt;p&gt;Git 各平台安装包下载地址为：&lt;a href=&quot;http://git-scm.com/downloads&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://git-scm.com/downloads&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Git" scheme="https://blogs.zhaozf.site/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>前端开发学习路线-CSS快速掌握</title>
    <link href="https://blogs.zhaozf.site/4f88b68a/"/>
    <id>https://blogs.zhaozf.site/4f88b68a/</id>
    <published>2020-05-20T15:27:39.000Z</published>
    <updated>2020-05-20T15:32:56.427Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/blogImg/202005202332.jpg" alt="CSS快速掌握"></p><h3 id="1、CSS简介"><a href="#1、CSS简介" class="headerlink" title="1、CSS简介"></a>1、CSS简介</h3><p> css（cascading style sheets的缩写）翻译为“层叠样式表”或者“级联样式表”，简称样式表。</p><h3 id="2、CSS的主要作用"><a href="#2、CSS的主要作用" class="headerlink" title="2、CSS的主要作用"></a>2、CSS的主要作用</h3><p>它是用来给HTML网页来设置外观或者样式的，包括文字的大小、颜色、字体，网页的背景色、背景图片等。</p><h3 id="3、CSS书写规则"><a href="#3、CSS书写规则" class="headerlink" title="3、CSS书写规则"></a>3、CSS书写规则</h3><ol><li>css代码是由选择器和一对括号组成的</li><li>大括号里面是由一条一条的声明语句组成</li><li>每一条语句都要使用英文状态下的分号</li><li>每一条语句是由“属性：值”组成</li><li>CSS中的属性值一般不加引号</li><li>在CSS中如果属性值为数值型数据的时候，一般情况下需要加单位（px）</li><li>在CSS中不能出现HTML标签</li></ol><a id="more"></a><h3 id="4、CSS代码的书写方式"><a href="#4、CSS代码的书写方式" class="headerlink" title="4、CSS代码的书写方式"></a>4、CSS代码的书写方式</h3><p>书写方式分为三种：嵌入式、外链式、行内式。</p><h5 id="嵌入式"><a href="#嵌入式" class="headerlink" title="嵌入式"></a>嵌入式</h5><p>将css代码键入到HTML文件中，通过<code>&lt;style&gt;</code>标签将css代码嵌入到网页中。<br>一般只将它放到<code>&lt;head&gt;</code>标签里。</p><h5 id="外链式"><a href="#外链式" class="headerlink" title="外链式"></a>外链式</h5><p>单独为写一个以.css为扩展名的文件。在<code>&lt;head&gt;</code>标签中使用<code>&lt;link /&gt;</code>标签引入</p><h5 id="行内式"><a href="#行内式" class="headerlink" title="行内式"></a>行内式</h5><p>将CSS代码书写在HTML标签的style属性中。<br>语法格式：<br>&lt;标签名 style=”属性:值; 属性:值;”&gt;&lt;/标签名&gt;</p><h3 id="5、注释"><a href="#5、注释" class="headerlink" title="5、注释"></a>5、注释</h3><p>格式：<br>/<em> 注释内容 </em>/</p><h3 id="6、基本选择器"><a href="#6、基本选择器" class="headerlink" title="6、基本选择器"></a>6、基本选择器</h3><p>选择器是指通过一定的<code>语法规则</code>选取到对应的<code>HTML标记</code>，然后给这个对应的HTML标记设置样式。</p><p>选择器分为四大类：基本选择器、复合选择器、伪类选择器、属性选择器。</p><table><thead><tr><th>选择器</th><th>格式</th><th>含义</th><th>举例</th></tr></thead><tbody><tr><td>通用选择器</td><td>*{属性:值;}</td><td>通用选择器，将匹配HTML所有标签。不建议使用，IE6不支持，给大型网站增加负担</td><td>*{margin:0px;}</td></tr><tr><td>标签选择器</td><td>标签名{属性:值；}</td><td>标签选择器，匹配对应的HTML标签 。</td><td>p{font-size:14px;}</td></tr><tr><td>类选择器</td><td>.class属性值{属性:值;}</td><td>类选择器，给拥有指定的class属性值得元素设置样式</td><td>.box{width:800px;}</td></tr><tr><td>id选择器</td><td>#id属性值{属性:值;}</td><td>id选择器可以为标有特定ID的HTML元素指定特定的样式，只能使用一次。ID选择器以“#”来定义。</td><td>#title{font-size:14px;}</td></tr></tbody></table><h3 id="7、尺寸样式属性"><a href="#7、尺寸样式属性" class="headerlink" title="7、尺寸样式属性"></a>7、尺寸样式属性</h3><table><thead><tr><th>属性</th><th>值</th><th>含义</th></tr></thead><tbody><tr><td>height</td><td>auto: 自动，浏览器会自动计算高度。length：使用px定义高度。 %：基于包含它的块级对象的百分比高度。</td><td>设置元素的高度</td></tr><tr><td>width</td><td>同上</td><td>设置元素的宽度</td></tr></tbody></table><h3 id="8、文本与字体属性"><a href="#8、文本与字体属性" class="headerlink" title="8、文本与字体属性"></a>8、文本与字体属性</h3><table><thead><tr><th>属性名</th><th>值</th><th>含义</th></tr></thead><tbody><tr><td>color</td><td>#ff0000 或 red 或 rgb(3,5,8)</td><td>给文本设置颜色</td></tr><tr><td>text-align</td><td>left(居左)、right(居右)、center(居中)</td><td>设置文本的水平对齐方向</td></tr><tr><td>text-decoration</td><td>none(去掉文本修饰线)、underline(下划线)、overline(上划线)、line-through(删除线)</td><td>设置文本的修饰线</td></tr><tr><td>text-transform</td><td>capitalize、uppercase、lowercase</td><td>大小写转换或者首字母大写</td></tr><tr><td>line-height</td><td>固定值或百分比</td><td>设置行高</td></tr><tr><td>text-indent</td><td>px 或者 em</td><td>设置首行缩进  允许负值</td></tr><tr><td>letter-spacing</td><td>px</td><td>设置字符间距</td></tr><tr><td>word-spacing</td><td>px</td><td>设置单词间距</td></tr></tbody></table><h3 id="9、字体属性"><a href="#9、字体属性" class="headerlink" title="9、字体属性"></a>9、字体属性</h3><table><thead><tr><th>属性名</th><th>值</th><th>功能</th></tr></thead><tbody><tr><td>font-style</td><td>normal(正常)、italic(斜体)</td><td>设置文本为倾斜</td></tr><tr><td>font-weight</td><td>normal(正常)、bold</td><td>设置文字粗细</td></tr><tr><td>font-size</td><td>如12px、14px  记得加单位</td><td>给文本设置大小</td></tr><tr><td>font-family</td><td>微软雅黑、楷体、宋体……</td><td>给文本设置字体</td></tr><tr><td>font</td><td>举例：font: italic  bold 12px  “微软雅黑”</td><td>简写属性 能够同时给文本设置斜体、加粗、大小、字体  每一个值之间需要使用空格  并且一定要有顺序。</td></tr></tbody></table><h3 id="10、复合元素选择器"><a href="#10、复合元素选择器" class="headerlink" title="10、复合元素选择器"></a>10、复合元素选择器</h3><table><thead><tr><th>选择器</th><th>含义</th><th></th></tr></thead><tbody><tr><td>选择器1，选择器2{属性:值;}多元素选择器</td><td>多元素选择器，同时匹配选择器1和选择器2，多个选择器之间用逗号分隔</td><td>p,h1,h2{margin:0px;}</td></tr><tr><td><code>E F</code>{属性:值;}后代元素选择器</td><td>后代元素选择器，匹配所有属于E元素后代的F元素，E和F之间用空格分隔</td><td>#slidebar p{font-color:#990000;}</td></tr><tr><td>E&gt;F{属性:值;}子元素选择器</td><td>子元素选择器，匹配所有E元素的子元素F(只匹配一级   )</td><td>div &gt; p{color:#990000;}</td></tr><tr><td>E + F{属性:值;}相邻元素选择器</td><td>相邻元素选择器，匹配所有紧随E元素之后的同级元素F</td><td>div+div{color:#990000;}</td></tr></tbody></table><h3 id="11、列表样式属性"><a href="#11、列表样式属性" class="headerlink" title="11、列表样式属性"></a>11、列表样式属性</h3><p>列表包括：无序列表和有序列表。</p><p>在整个网页里无序列表使用的是最多的。</p><table><thead><tr><th>属性</th><th>值</th><th>含义</th></tr></thead><tbody><tr><td>list-style-type</td><td>none(将列表前面的项目符号去掉),disc(实心圆)，square(实心小方块),circle(空心圆)</td><td>设置列表前项目符号的类型。</td></tr><tr><td>list-style-position</td><td>inside(在里面),outside(在外面)</td><td>设置列表项标记的放置位置</td></tr><tr><td>list-style-image</td><td>url(图像路径)</td><td></td></tr><tr><td>list-style</td><td>square  inside  url(arrow.gif)</td><td>在一个声明中设置所有列表属性</td></tr></tbody></table><h3 id="12、伪类选择器"><a href="#12、伪类选择器" class="headerlink" title="12、伪类选择器"></a>12、伪类选择器</h3><p>什么是伪类选择器？</p><p>​    伪类选择器是用来给超级链接的不同状态来设置样式。</p><table><thead><tr><th>选择器</th><th>含义</th></tr></thead><tbody><tr><td><code>:link</code></td><td>向未被访问的链接添加样式</td></tr><tr><td><code>:visited</code></td><td>向已被访问的链接添加样式</td></tr><tr><td><code>:hover</code></td><td>当鼠标悬浮在元素上方时，向元素添加样式</td></tr><tr><td><code>:active</code></td><td>鼠标放在元素上面时，点击的一瞬间</td></tr></tbody></table><h3 id="13、对超级链接的美化"><a href="#13、对超级链接的美化" class="headerlink" title="13、对超级链接的美化"></a>13、对超级链接的美化</h3><p>我们通常会去掉超级链接的下划线，然后同时给超级链接设置一个颜色</p><p>一般情况下：</p><p>​        正常状态与访问过后的状态样式设置为一样</p><p>​        当鼠标放上的时候给其设置另外一个颜色     激活状态一般不会设置   因为激活状态的时间太短</p><p>举例：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">a:</span>link,a:<span class="class">visited </span>&#123;去掉超级链接的下划线;设置一个颜色;&#125;</span><br><span class="line"></span><br><span class="line"><span class="symbol">a:</span><span class="class">hover </span>&#123;设置另外一个颜色;增加一张下划线;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*对超级链接进行美化*/</span></span><br><span class="line"><span class="comment">/*正常状态与访问过后的状态*/</span></span><br><span class="line"><span class="selector-tag">a</span>:link,<span class="selector-tag">a</span>:visited&#123;    </span><br><span class="line">​<span class="attribute">text-decoration</span>: none;  <span class="attribute">color</span>: <span class="number">#444</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*鼠标放上状态*/</span></span><br><span class="line"><span class="selector-tag">a</span>:hover&#123;</span><br><span class="line">​<span class="attribute">color</span>: <span class="number">#f00</span>;</span><br><span class="line">​<span class="attribute">text-decoration</span>: underline;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="14、属性选择器"><a href="#14、属性选择器" class="headerlink" title="14、属性选择器"></a>14、属性选择器</h3><p>什么是属性选择器？</p><p>​        属性选择器它是与标签的<code>属性名和属性</code>值有关系。</p><p>​        属性选择器是通过标签的<code>属性名和属性值</code>来匹配元素。</p><p>attr是英文“attribute”的简写，中文意思“属性”      属性名</p><p>val是英文单词“value”的简写，中文意思是‘’值‘      属性值</p><table><thead><tr><th>选择器</th><th></th><th></th></tr></thead><tbody><tr><td>[attr]</td><td>匹配所有具有attr属性的元素，不考虑它的值</td><td><code>h1[align]{......}</code>       <code>input[type][size]{......}</code></td></tr><tr><td>[attr = “val”]</td><td>匹配所有attr属性值等于val的元素</td><td>h1[align=”center”]{……}属性值一般加引号</td></tr><tr><td>[attr^ = “val”]</td><td>匹配元素中attr属性以指定值开头的所有元素</td><td>font[color^=”#ff”]</td></tr><tr><td>[attr$= “val”]</td><td>匹配元素中attr属性以指定值结尾的所有元素</td><td>font[color$=”00”]</td></tr><tr><td>[attr* = “val”]</td><td>匹配元素中attr属性中包含指定值的所有元素</td><td>font[color*=”00”]</td></tr></tbody></table><h3 id="15、继承性"><a href="#15、继承性" class="headerlink" title="15、继承性"></a>15、继承性</h3><p>特点：</p><p>1、外层元素身上的样式会被内层元素所继承。</p><p>2、如果内层元素与外层元素身上的样式相同时，外层元素的样式会被内层元素所覆盖。</p><p>3、并不是所有样式都能够被继承。只有文本与字体样式属性能够被继承。其他样式属性都不可以被继承。</p><p>注意：在实际工作中，我会给body标签设置字体大小及字体颜色。因为body是最外层的元素，内层的元素会继承外层的元素样式。</p><h3 id="16、优先级"><a href="#16、优先级" class="headerlink" title="16、优先级"></a>16、优先级</h3><p>行内样式 &gt; ID选择器 &gt; 类选择器 &gt; 标签选择器</p><p>一般而言，选择器指向的越准确，优先级就会越高。通常我们会用1来表示标签选择器的优先级，用10来表示类选择器的优先级，用100来表示ID选择器的优先级，用1000来表示行内样式。</p><p>标签选择器            1</p><p>类选择器                10</p><p>ID选择器                100</p><p>行内样式                1000</p><p>值越大表示其优先级越高。</p><p>不管是单个选择器还是多个选择器组合他们之间的优先级都可以通过上面这个公式来进行计算。我们将其值称之为权重值。权重值越大就表示其优先级越高。</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">例子：</span><br><span class="line"><span class="comment">/*类选择器*/</span></span><br><span class="line">.d&#123;</span><br><span class="line"><span class="symbol">color:</span> <span class="meta">#00f;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*标签选择器*/</span></span><br><span class="line">div&#123;</span><br><span class="line"><span class="symbol">color:</span> <span class="meta">#f00;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*ID选择器*/</span></span><br><span class="line">dd&#123;</span><br><span class="line"><span class="symbol">color:</span> <span class="meta">#0f0;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="params">&lt;body&gt;</span></span><br><span class="line"><span class="params">&lt;div class="d" id="dd" style="color:skyblue;"&gt;</span></span><br><span class="line"><span class="params">&lt;h2&gt;</span>无聊才读书<span class="params">&lt;/h2&gt;</span></span><br><span class="line"><span class="params">&lt;p&gt;</span> 个人网站<span class="params">&lt;/P&gt;</span></span><br><span class="line"><span class="params">&lt;/div&gt;</span></span><br><span class="line"><span class="params">&lt;/body&gt;</span></span><br></pre></td></tr></table></figure><h3 id="17、-important属性"><a href="#17、-important属性" class="headerlink" title="17、!important属性"></a>17、<code>!important</code>属性</h3><p>important 在英文中的含义是“重要的”意思</p><p><code>!important</code>在css中的作用：主要是用来提升属性的权重。其属性的权重值无穷大。</p><p>语法格式：属性：值  !important;</p><p>​                    </p><h3 id="18、背景样式属性"><a href="#18、背景样式属性" class="headerlink" title="18、背景样式属性"></a>18、背景样式属性</h3><table><thead><tr><th>属性</th><th>值</th><th>含义</th></tr></thead><tbody><tr><td>background-color</td><td>#ff0000、red、rgb(255,0,0)</td><td>背景颜色</td></tr><tr><td>background-image</td><td>url(图像路径和名称);</td><td>背景图像</td></tr><tr><td>background-repeat</td><td>repeat、repeat-x、repeat-y、no-repeat</td><td>背景图像是否重复</td></tr><tr><td>background-position</td><td>center center或x% y%或xpos ypos</td><td>背景图像起始位置</td></tr><tr><td>background-attachment</td><td>scroll(滚动)、fixed(固定)</td><td>设置背景图像是否固定或者随着页面的其余部分滚动</td></tr><tr><td>background</td><td>url(1.jpg) no-repeat  center center fixed</td><td>设置背景的简写形式</td></tr></tbody></table><ul><li><p>background-color：用于给元素设置背景颜色 但是前提这个元素要么有内容，要么有宽度和高度才可以。</p></li><li><p>background-image  用于给元素设置背景图片  图片的地址一定放在url（图片的地址） 但是前提这个元素要么有内容，要么有宽度和高度才可以  背景图片默认是平铺的</p></li><li><p>background-repeat 是用于设置0背景图片是否平铺    repeat（是平铺）、repeat-x（水平方向平铺）、repeat-y（垂直方向平铺）、 no-repeat（不平铺）</p></li><li><p>background-position 用于设置背景图片的位置  如果要设置背景图片的位置  这个属性就会有两个值</p></li><li><p>background-position：水平位置  垂直位置      </p><p>这个两个位置的表示方式有三种 ： 英文单词   固定值   百分比     这三种方式可以混合使用。</p><p>​    1.英文单词的表示方式</p><p>​        水平位置：left（居左）、center（居中）、right（居右）</p><p>​        垂直位置：top（居上）、center（居中）、bottom（居下）</p><p>​    2.固定值得表示方式</p><p>​    3.百分比的表示方式</p><p>​        </p></li><li><p>background：简写属性  它可以同时设置多个样式    比如 背景颜色、背景图片、背景图片是否平铺   水平位置  垂直位置</p></li><li>background：简写属性  其值得个数不定 顺序也不定 每一个值之前使用空格分隔</li></ul><h3 id="19、标准文档流"><a href="#19、标准文档流" class="headerlink" title="19、标准文档流"></a>19、标准文档流</h3><p>HTML网页在制作的时候，都遵循一个“流”的规则：从左至右、从上到下</p><p>1）空白折叠现象</p><p>2）高矮不齐，底部对齐</p><h3 id="20、浮动"><a href="#20、浮动" class="headerlink" title="20、浮动"></a>20、浮动</h3><p>浮动可以让元素脱离标准文档流 ，就可以实现让多个元素排在同一行，并且可以设置宽高。</p><p>浮动它通过一个浮动属性来实现</p><p>float：这个属性有两个值  left（向左浮动）向左移动、right（向右浮动） 向右移动</p><p>浮动元素的特色：</p><ul><li>浮动元素它脱离标准文档流，不在占用空间了</li><li>我们可以把浮动元素理解为“漂”</li><li>浮动元素它的层级要比标准文档流里面的元素层级要高，它会将标准文档流中的元素给压盖住</li><li>浮动元素它会向左或者向右进行浮动（移动）</li><li>浮动元素它遇到了父元素的边框然后就停止了浮动</li><li>浮动元素它还会遇到上一个浮动元素后就停止了浮动</li><li>浮动元素浮动以后 其父元素不会再包裹着浮动元素</li><li>我们将行内元素进行浮动以后 那么这个行内元素它会变成块级元素</li></ul><h3 id="21、清楚浮动"><a href="#21、清楚浮动" class="headerlink" title="21、清楚浮动"></a>21、清楚浮动</h3><p>注意：只要有浮动  那么必须有清除浮动</p><p>为什么清除浮动？</p><p>​    因为经过浮动了元素 它会影响到它下面的元素的排版布局  还有浮动元素的父元素没有将浮动元素包裹着</p><p>只要清除了浮动  不会影响到浮动元素的下面进行排版布局  浮动元素的父元素会将浮动元素从视觉上包裹着</p><p>清除浮动有以下三种方法：</p><ul><li>给浮动元素的父元素设置一个固定的高度（不建议，因为一个元素的高度一般情况下不是手动设置的 应该是有其自身的内容来撑高的）</li><li>使用清除浮动的样式属性  clear（clear是专用于清除浮动的 这个属性有三个值  clear：left；清除左浮动  clear：right；清除右浮动  clear：both；两者都清除  。这个属性一般用在最后 一个浮动元素的下面 在最后一个浮动元素的下面新建一个空白的div 这个div什么都不要放  不要给这个div里面放置内容 它只做一件事就是清除浮动）</li><li>使用overflow：hidden 这个属性来清除浮动</li></ul><h3 id="22、盒子模型"><a href="#22、盒子模型" class="headerlink" title="22、盒子模型"></a>22、盒子模型</h3><p>在css中一个盒子的组成部分：内容（content）+内填充（padding）+边框（border）+外边距（margin）</p><p>一个盒子的主要属性：width、height、padding、border、margin </p><p>width：指“宽度”的意思  但是这里的宽度指的盒子里面的内容的宽度  而不是盒子的宽度</p><p>height：指“高度”的意思  但是这里的高度指的盒子里面的内容的高度 而不是盒子的高度</p><p>padding：是“内填充”的意思，指的盒子里面的内容到盒子边框的距离</p><p>border：是“外边距”的意思  指的盒子的边框</p><p>margin：是“外边框”的意思  指的是盒子与盒子之间的间距</p><h3 id="23、padding"><a href="#23、padding" class="headerlink" title="23、padding"></a>23、padding</h3><p>padding是“内填充”的意思  指的是盒子中间的内容到边框的这一段距离</p><p>padding 是有四个方向的，描述这些方向的方法有两种：第一种我们称之为<code>小属性</code>，第二种我们称之为<code>简写属性</code></p><p> padding-top: 上内填充</p><p>padding-right：右内填充</p><p>padding-bottom：下内填充</p><p>padding-left：左内填充</p><p>简写属性是有顺序的，按照顺时针（上右下左）这个顺序。</p><h3 id="24、margin"><a href="#24、margin" class="headerlink" title="24、margin"></a>24、margin</h3><p>margin 它表示“外边距”的意思  它是指盒子与盒子之间的距离</p><p>margin 它也有4个方向的，对方向的描述方法也有两种：第一种是<code>小属性</code>，第二种我们称之为<code>简写属性</code>.</p><p>小属性：</p><p>margin-top：上外边距</p><p>margin-right：有外边距</p><p>margin-bottom：下外边距</p><p>margin-left：左外边距</p><p>简写属性：</p><p>margin：简写属性它是有方向的   这里的方向是一个顺时针的方向 他的方向顺序是：上、右、下、左。</p><p>margin：10px；表示上右下左这四个方的外边都是10px</p><p>margin：10px  20px；表示上下两个方向的外边距为10px，左右外边距为20px</p><p>margin：10px 20px 30px；表示上边距为10px，左右外边距为20px，下边距为30px。</p><p>margin：10px 20px 30px 40px；表示上边距为10像素，右边距为20像素，下边距为30像素，左边距为40像素</p><h3 id="25、margin塌陷现象"><a href="#25、margin塌陷现象" class="headerlink" title="25、margin塌陷现象"></a>25、margin塌陷现象</h3><p>什么是margin的塌陷现象：</p><p>1、在标准的文档流中 <code>竖直方向</code>的margin值不会叠加 它会取较大的值</p><p>2、<code>横着方向</code>是没有margin的塌陷现象</p><p>3、<code>浮动元素</code>它是没有margin的塌陷现象的</p><h3 id="26、margin居中"><a href="#26、margin居中" class="headerlink" title="26、margin居中"></a>26、margin居中</h3><p>margin的值可以是auto 。auto表示“自动”的意思，当左外边距与右外边距的值都是auto时那么这个盒子就会水平居中。</p><p>注意：</p><ul><li><p>使用margin来实现水平居中时 一定要有固定的宽度（给这个盒子设置一个宽度）只有块元素可以实现水平居中，行内元素是不能实现居中的</p></li><li><p>只有标准文档流中的盒子才可以使用margin来实现水平居中</p></li><li><p>margin属性是用来实现盒子的水平居中，而不是文本的水平居中</p><p>text-align只能实现文本的对齐。</p></li><li><p>善于使用父元素的padding而不是使用子元素的margin</p></li></ul><p><img src="/assets/blogImg/20200520094247.png" alt></p><p>要解决上图的问题：有两种方法</p><p>第一种给父元素设置一个边框线</p><p>但是这个方法不常用，因为边框是用来调试代码的，很少会给一个盒子设置边框。</p><p>第二种方法：不要使用子元素的margin 而是要使用其父元素的padding。</p><p>说明：margin这个属性它本意是用于来描述兄弟与兄弟元素之间的关系，不是用于描述父子元素之间的关系的。如果是父子元素的关系，就最好使用给其父元素设置padding属性。</p><h3 id="27、border属性"><a href="#27、border属性" class="headerlink" title="27、border属性"></a>27、border属性</h3><ul><li><p>border：它是“边框”的意思</p></li><li><p>边框有三个要素: 粗细、线型、颜色</p><p>语法格式：</p><p>​                border : 粗细  线型  颜色</p><p>​                border：1px  solid  #f00;</p></li><li><p>说明：边框的颜色可以省略不写，如果不写默认是黑色，其他的两个属性不能不写。</p></li><li><p>其实边框也是有四个方法：</p><p>border-top：上边框</p><p>border-right：右边框</p><p>border-bottom:下边框</p><p>border-left: 左边框</p></li></ul><h3 id="28、display属性"><a href="#28、display属性" class="headerlink" title="28、display属性"></a>28、display属性</h3><p>display  它是“显示”的意思，他就是用来进行行内元素与块级元素之间的相互转换。将隐藏的元素显示或者是将显示的元素进行隐藏。</p><p>display  这个属性取值：inline（行内）、block（块级）、none（无）</p><ul><li><p>当我们将一个行内元素的display属性的值设置为block以后，那么这个元素就会被转换为块级元素。</p></li><li><p>当我们将一个块级元素的display属性值设置为inlinek以后，那么这个元素就会被转换成行内元素。</p></li></ul><p>注意：</p><p>​        如果说将行内元素转换为块级元素，那么这个元素它就会拥有块级元素的特点</p><p>​    如果说将块级元素转换为行内元素，那么这个元素它就会拥有行内元素的特点。</p><p>将一个显示的元素隐藏、将一个隐藏的元素显示。</p><p><code>display：none（将一个显示的元素进行隐藏）</code></p><p><code>display：block（将一个隐藏的元素显示出来）</code></p><p><code>这两个功能主要是JavaScript来使用</code></p><h3 id="29、固定位置"><a href="#29、固定位置" class="headerlink" title="29、固定位置"></a>29、固定位置</h3><p>position 在英语中表示“位置”的意思，它主要是用于实现对元素的定位</p><p>在css中定位分为三种：</p><p>​    position：fixed            固定定位</p><p>​    position：relative        相对定位</p><p>​    position：absolute      绝对定位</p><p>注意：在使用定位属性时，一定要配合定位的坐标来使用</p><p>​            left：表示定位的元素离左边多远</p><p>​            right：表示定位的元素离右边多远</p><p>​            top：表示定位的元素离上边多远</p><p>​            bottom：表示定位的元素离下边多远</p><ol><li>固定定位</li></ol><p>语法：position：fixed</p><p>固定定位,它是相对于浏览器窗口来进行定位。不管页面如何滚动，固定定位元素显示的位置不会改变。</p><p>特点：</p><ul><li>​        固定定位元素它脱离了标准文档流</li><li>​        固定定位元素的层级比标准文档流里面的元素要高，所以固定定位元素它会压盖住标准文档流里面完的元素。</li><li>​        固定定位元素它不再占用空间</li><li>​        固定定位元素它显示的位置不会随着浏览器滚动而滚动</li></ul><h3 id="30、相对定位"><a href="#30、相对定位" class="headerlink" title="30、相对定位"></a>30、相对定位</h3><p>语法：position：relative；</p><p>相对定位它是相对于“原来的自己”来进行定位。</p><p>特点：</p><ul><li>​    相对定位元素它没有脱离标准文档流</li><li>​    相对定位元素如果没有设置定位的坐标，那么相对定位元素它还在原来的位置</li><li>​    相对定位元素设置了定位的坐标以后，那么它会在原来的位置留下一个坑。</li><li>​    相对定位元素它会将标准文档流中的元素压盖住。</li><li>​    相对定位元素的定位坐标值可以是负数。</li></ul><p>注意：</p><p>相对定位元素他会在老家留下一个坑，所以一般情况下它很少单独使用，相对定位元素它主要是用来配合“绝对定位”元素来使用的。</p><h3 id="31、绝对定位"><a href="#31、绝对定位" class="headerlink" title="31、绝对定位"></a>31、绝对定位</h3><p>语法：position：absolute；</p><p>什么是绝对定位？</p><p>绝对定位元素是相对于“祖先定位元素”来进行定位</p><p>什么是祖先定位元素？</p><p>绝对定位元素它会先去查其父元素是否设置了定位的属性  如果有设置定位的属性，那么他就会相对于其父元素来进行定位；但是如果他的父元素没有设置定位属性 那么他就会去查找其父元素的上一级元素是否设置了定位的属性；如果有设置就相对于其父元素的上一级元素进行对位。但是如果没有设置，那么会继续往向一级进行查找，如果其祖先元素都没有设置定位属性，那么它会相对于“浏览器窗口”来进行定位！</p><p>特点：</p><ul><li><p>绝对定位元素它脱离了标准文档流</p></li><li><p>绝定定位元素它不在占用空间</p></li><li><p>绝定定位元素它会压盖住标准文档流中的元素</p></li><li><p>绝对定位元素它会相对于其“祖先定位元素”来进行定位，这里的祖先定位元素可以是相对定位也可以是固定定位还可以是绝对定位   但是我们一般只会给其祖先定位元素设置相对定位属性。</p><p>“子绝父相”子元素设置绝对定位，父元素设置相对定位。</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype html&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">html</span>&gt;</span>                  /*示例代码*/</span><br><span class="line">        <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">title</span>&gt;</span>绝对定位<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">                *&#123;</span></span><br><span class="line"><span class="css">                    <span class="selector-tag">margin</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="css">                    <span class="selector-tag">padding</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="css">                <span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="css">                    <span class="selector-tag">width</span><span class="selector-pseudo">:600px</span>;</span></span><br><span class="line"><span class="css">                    <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#000</span>;</span></span><br><span class="line"><span class="css">                    <span class="selector-tag">margin</span><span class="selector-pseudo">:100px</span> <span class="selector-tag">auto</span>;</span></span><br><span class="line"><span class="css">                    <span class="comment">/*给其设置一个相对定位*/</span></span></span><br><span class="line"><span class="css">                    <span class="selector-tag">position</span><span class="selector-pseudo">:telative</span>;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="css">                <span class="selector-class">.box</span> <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="css">                    <span class="selector-tag">width</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line"><span class="css">                    <span class="selector-tag">height</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="css">                <span class="selector-class">.div1</span>&#123;</span></span><br><span class="line"><span class="css">                    <span class="selector-tag">background-color</span>:<span class="selector-id">#f00</span>;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="css">                <span class="selector-class">.div2</span>&#123;</span></span><br><span class="line"><span class="css">                    <span class="selector-tag">background-color</span>:<span class="selector-id">#0f0</span>;</span></span><br><span class="line"><span class="css">                    <span class="comment">/*绝对定位属性*/</span></span></span><br><span class="line"><span class="css">                    <span class="selector-tag">position</span><span class="selector-pseudo">:absolute</span>;</span></span><br><span class="line"><span class="css">                    <span class="comment">/*设置定位的坐标*/</span></span></span><br><span class="line"><span class="css">                    <span class="selector-tag">right</span><span class="selector-pseudo">:0px</span>;</span></span><br><span class="line"><span class="css">                    <span class="selector-tag">top</span><span class="selector-pseudo">:0px</span>;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="css">                <span class="selector-class">.div3</span>&#123;</span></span><br><span class="line"><span class="css">                    <span class="selector-tag">background-color</span>:<span class="selector-id">#00f</span>;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div2"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div3"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="31、z-index属性"><a href="#31、z-index属性" class="headerlink" title="31、z-index属性"></a>31、z-index属性</h3><ul><li><p>z-index 表示谁压盖着谁，数值大的会压盖住数值小的</p></li><li><p>只有定位的元素才有z-index值  ，只有设置了固定定位、相对定位、绝对定位的元素他们才会拥有z-index</p></li><li>如果多个定位元素没有设置z-index属性或者z-index值设置一样，那么写在HTML后面的定位元素就会压盖住前面的定位元素</li></ul><h3 id="32、结构伪类"><a href="#32、结构伪类" class="headerlink" title="32、结构伪类"></a>32、结构伪类</h3><p>1）、CSS3与CSS2之间的区别</p><p>CSS3=CSS2+新语法+新的属性</p><p>就是对CSS2进行扩充 删减 优化</p><p>2）、结构伪类</p><table><thead><tr><th>选择器</th><th>功能</th></tr></thead><tbody><tr><td>E:first-child</td><td>匹配第一个孩子</td></tr><tr><td>E:last-child</td><td>匹配最后一个孩子</td></tr><tr><td>E:nth-child（n）</td><td>匹配第n个孩子</td></tr><tr><td>E:nth-child（2n）</td><td>匹配偶数的孩子  如：2、4、6…..</td></tr><tr><td>E:nth-child（even）</td><td></td></tr><tr><td>E:nth-child（2n+1）</td><td>匹配奇数的孩子  如：1、3、5……</td></tr><tr><td>E:nth-child（odd）</td><td></td></tr><tr><td>E:only-child</td><td>匹配有且只有一个孩子</td></tr></tbody></table><h3 id="33、border-collapse"><a href="#33、border-collapse" class="headerlink" title="33、border-collapse"></a>33、border-collapse</h3><p>这个属性主要用来合并表格的边框线 ，其值为：collapse</p><p><code>border-collapse:collapse;</code></p><h3 id="34、伪元素"><a href="#34、伪元素" class="headerlink" title="34、伪元素"></a>34、伪元素</h3><table><thead><tr><th>选择器</th><th>功能</th></tr></thead><tbody><tr><td>:first-letter</td><td>操作当前元素中第一个字</td></tr><tr><td>:first-line</td><td>操作当前元素中第一行</td></tr><tr><td>::before</td><td>在之前插入，在一个盒子内部的最前面</td></tr><tr><td>::after</td><td>在之后插入，在一个盒子内部的最后面</td></tr></tbody></table><p>::before 要在当前元素之中插入文字  必须将文字放在content中</p><h3 id="35、文本阴影"><a href="#35、文本阴影" class="headerlink" title="35、文本阴影"></a>35、文本阴影</h3><p>text-shadow:水平阴影  垂直阴影  模糊距离  阴影颜色</p><p>注释：text-shadow 属性向文本添加一个或多个阴影。该属性是逗号分隔的阴影列表，每个阴影有两个或三个长度值和一个可选的颜色值进行规定。省略的长度是0.</p><table><thead><tr><th>值</th><th>描述</th><th></th></tr></thead><tbody><tr><td>h-shadow</td><td>必需。水平阴影的位置。允许负值。</td><td></td></tr><tr><td>v-shadow</td><td>必需。垂直阴影的位置。允许负值。</td><td></td></tr><tr><td>blur</td><td>可选。模糊的距离。</td><td></td></tr><tr><td>color</td><td>可选。阴影的颜色。参阅css颜色值</td></tr></tbody></table><p>描述：</p><ul><li>文字阴影可以有多组值，多组之间用逗号隔开就可以</li><li>水平阴影正值阴影在右边，负值在左边。</li><li>垂直阴影正值在下边，负值在上边。</li><li>模糊强度，值越大越模糊。</li></ul><h3 id="36、盒子阴影"><a href="#36、盒子阴影" class="headerlink" title="36、盒子阴影"></a>36、盒子阴影</h3><p>box-shadow：水平方向阴影  垂直方向阴影  模糊距离   阴影尺寸  阴影颜色  内/外阴影  </p><p>水平阴影和垂直阴影必须得写，其余的是可以省略不写；</p><p>语法：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">box-shadow:h-shadow </span> v-<span class="keyword">shaadow </span> <span class="keyword">blur </span> spread  color  <span class="keyword">inset;</span></span><br></pre></td></tr></table></figure><p>注释：box-shadow向框添加一个或多个阴影。该属性是由逗号分隔的阴影列表，每个阴影是由2-4个长度值。可选的颜色值以及可选的inset关键词来规定。省略长度的值是0。</p><table><thead><tr><th>值</th><th>描述</th><th>测试</th></tr></thead><tbody><tr><td>h-shadow</td><td>必需。水平阴影的位置。允许负值。</td><td></td></tr><tr><td>v-shadow</td><td>必需。垂直阴影的位置。允许负值。</td><td></td></tr><tr><td>blur</td><td>可选。模糊距离。</td><td></td></tr><tr><td>spread</td><td>可选。阴影的尺寸。</td><td></td></tr><tr><td>color</td><td>可选。阴影的颜色。请参阅CSS颜色值。</td><td></td></tr><tr><td>inset</td><td>可选。将外部阴影（outset）改为内部阴影。</td></tr></tbody></table><ul><li>盒子阴影可以有多组值，多组之间用逗号隔开就可以。</li><li>水平阴影正值阴影在右边，负值在左边。</li></ul><h3 id="37、圆角矩形"><a href="#37、圆角矩形" class="headerlink" title="37、圆角矩形"></a>37、圆角矩形</h3><p>语法：</p><p><code>border-radius：左上 右上 右下 左下；</code></p><p>如果四个值都是一样的话，写一个就可以了。</p><h3 id="38、透明度"><a href="#38、透明度" class="headerlink" title="38、透明度"></a>38、透明度</h3><p>只要有颜色都可以实现透明度。</p><p>rgba（红色、绿色、蓝色、透明度）</p><p>a：表示透明度的意思  透明度取值：0~1之间   0表示完全透明  1表示不透明</p><ul><li><p>背景颜色透明：</p><p>background-color：rgba（255,255,255,0.3）</p></li><li><p>文本颜色透明：</p><p>color：rgba（255,255,255,0.3)</p></li><li><p>边框颜色透明</p><p>border：1px solid rgba（255,255,255,0.5）</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/blogImg/202005202332.jpg&quot; alt=&quot;CSS快速掌握&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;1、CSS简介&quot;&gt;&lt;a href=&quot;#1、CSS简介&quot; class=&quot;headerlink&quot; title=&quot;1、CSS简介&quot;&gt;&lt;/a&gt;1、CSS简介&lt;/h3&gt;&lt;p&gt; css（cascading style sheets的缩写）翻译为“层叠样式表”或者“级联样式表”，简称样式表。&lt;/p&gt;
&lt;h3 id=&quot;2、CSS的主要作用&quot;&gt;&lt;a href=&quot;#2、CSS的主要作用&quot; class=&quot;headerlink&quot; title=&quot;2、CSS的主要作用&quot;&gt;&lt;/a&gt;2、CSS的主要作用&lt;/h3&gt;&lt;p&gt;它是用来给HTML网页来设置外观或者样式的，包括文字的大小、颜色、字体，网页的背景色、背景图片等。&lt;/p&gt;
&lt;h3 id=&quot;3、CSS书写规则&quot;&gt;&lt;a href=&quot;#3、CSS书写规则&quot; class=&quot;headerlink&quot; title=&quot;3、CSS书写规则&quot;&gt;&lt;/a&gt;3、CSS书写规则&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;css代码是由选择器和一对括号组成的&lt;/li&gt;
&lt;li&gt;大括号里面是由一条一条的声明语句组成&lt;/li&gt;
&lt;li&gt;每一条语句都要使用英文状态下的分号&lt;/li&gt;
&lt;li&gt;每一条语句是由“属性：值”组成&lt;/li&gt;
&lt;li&gt;CSS中的属性值一般不加引号&lt;/li&gt;
&lt;li&gt;在CSS中如果属性值为数值型数据的时候，一般情况下需要加单位（px）&lt;/li&gt;
&lt;li&gt;在CSS中不能出现HTML标签&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>【致自己-心灵鸡汤】把日子过好，比什么都重要</title>
    <link href="https://blogs.zhaozf.site/428f9e93/"/>
    <id>https://blogs.zhaozf.site/428f9e93/</id>
    <published>2020-05-18T07:50:17.000Z</published>
    <updated>2020-05-18T08:12:25.224Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/blogImg/202005181606.jpg" alt></p><p><strong>一辈子不长，过好自己的生活。</strong></p><p>漫漫人生，得与失，苦与乐，爱与恨，相遇与离别，来回反复，交替更迭。</p><p>有时候，竟让人看不清也想不透：到底什么才是最重要的，什么才能让人最欢喜？</p><p>是久旱逢甘露？还是他乡遇故知？是洞房花烛夜？还是金榜题名时？</p><a id="more"></a><p>也许都不是，因为人生不像是在夜空中绽放的烟花，只追求一时的绚烂璀璨。</p><p>生活更多的是，三餐与四季的平凡恬淡、心满意足。</p><p>其实对于大多数人来说，把自己的日子过好，比什么都重要。</p><p>这让人不禁想起一首打油诗，句句不离生活小事，却平淡而有味。</p><p>“早起提笼去遛鸟，晚来种花又养草。开心吃好三餐饭，烦恼不赶自己跑。”</p><p>不知你是否也有过这样的感受：</p><p>有时候觉得生活挺不容易的，总有一些烦恼，把自己困住了。有些烦恼，在别人看来小到不值一提，对自己来说，却被压得喘不过气。想挣脱却深深感到无力，甚至因此茶饭不思。</p><p>然而，一味地放任自己沉沦于这种情绪中，往往无济于事。</p><p>不如打起精神，做些其他小事情，让自己先走出不良情绪的怪圈，再去想办法解决。</p><p>就算只是先静下来，好好睡上一觉，醒后，心中忧烦之事自然也释怀了几分。</p><p>或是去散散步，看看花开，听听鸟叫，在鸟语花香的小惬意中，偷得浮生半日闲，忘却世态的炎凉。</p><p>即便难题还是摆在那里，不会自动消失，但心态已然不同，心大了，问题就小了。</p><p><img src="/assets/blogImg/202005181608.jpg" alt></p><p><strong>生活从来都是如人饮水，冷暖自知。</strong></p><p>每个人都有自己的活法，幸福不需要攀比，美好与否也无需别人下结论。</p><p>别活在别人的眼里，也别活在世俗的目光里，自己内心的富足和愉悦才是最重要的。</p><p>曾有一位画家，想画出一幅人见人夸的画，于是他将自己的一幅画和一支笔挂在街边，并附上一行文字：若觉得有欠佳之笔，请不吝赐教。</p><p>隔天，他过来取画，看到的是一幅被圈圈点点的画，几乎没有一笔不被指责。</p><p>画家顿时心灰意冷，垂头丧气地走向回家的路。</p><p>拐进一个巷子时，画家看到了一位老者在巷角中作画，引得众人围观。</p><p>只见老者脸上怡然自得，画家于是上前，跟老者讨教画画之道。</p><p>老者听闻画家的经历后，笑着说：“我没什么技巧，但每次画完一幅画，我心中已经十分欢喜，无须他人半句夸赞。”</p><p>画家恍然大悟，原来，自己才是人生的主角，与他人无关，不必总活在别人的眼里。</p><p>立身于世，若烹小鲜，难调众口。</p><p>你善良，有人会说这是虚情假意；你优秀，有人会说这是运气而已；你感恩，有人会说这是卑躬屈膝……</p><p>活在别人眼里，就容易因别人而乱了心神，将自己置于乱麻之中。</p><p>想把日子过好，就别把自己的快乐建立在别人的目光上。</p><p>一辈子不长，就算无人欣赏，也要懂得自寻乐趣，过好自己的生活。</p><p><img src="/assets/blogImg/202005181609.jpg" alt></p><p><strong>生活虽淡，知足就好。</strong></p><p>心神安定，身体健康，试问这世间还有什么比这更珍贵的呢？</p><p>广厦千间，腰缠万贯，都不如健康无忧。</p><p>健康地活着，本身就已是最大的拥有，这样一想，心里便觉得安稳快乐了许多。</p><p>生活总是倒逼着我们在追求各种各样的东西，有时明明已经拥有很多，却还是不想停下来。</p><p>一路走，一路丢，待某天蓦然回首，才发现最珍贵的东西曾握在自己手中。</p><p>历尽磨难，方知平安珍贵；历尽险恶，方知坦荡难得；历尽争吵，方知相伴就好；历尽繁华，方知知足可贵。</p><p>人生最累的，莫过于站在幸福里找幸福，身在福中不知福。</p><p>人不可能事事如意，心却可以知足常乐。</p><p>哲学家苏格拉底，一开始和几个朋友住在七八平米的房间，很拥挤但他仍觉得很快乐，因为有志同道合的朋友一起，可以随时交流聊天。</p><p>后来，朋友一个个搬了出去，只剩他一人，他也乐呵，因为还有很多书陪伴他。</p><p>再后来，他搬进了七层高的大楼，住在最底层，环境潮湿而吵闹，他倒觉得搬东西和进进出出很方便。</p><p>一年后，他把房子让给了一位身有残疾的老人，自己住上了最高那一层，他觉得爬上爬下可以锻炼身体，光照也好，一切都挺好。</p><p>世事无常，拥有小河，就为小河的细水长流而欢喜，别只因得不到大海的波澜壮阔而闷闷不乐。</p><p>拥有绿叶，就为绿叶的勃勃生机而欣然，别只因为得不到花朵的妩媚动人而郁郁寡欢。</p><p>并不是因为命好才一生顺遂，是因为懂得知足，才能常常感到心满意足。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/blogImg/202005181606.jpg&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一辈子不长，过好自己的生活。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;漫漫人生，得与失，苦与乐，爱与恨，相遇与离别，来回反复，交替更迭。&lt;/p&gt;
&lt;p&gt;有时候，竟让人看不清也想不透：到底什么才是最重要的，什么才能让人最欢喜？&lt;/p&gt;
&lt;p&gt;是久旱逢甘露？还是他乡遇故知？是洞房花烛夜？还是金榜题名时？&lt;/p&gt;
    
    </summary>
    
    
      <category term="致自己" scheme="https://blogs.zhaozf.site/tags/%E8%87%B4%E8%87%AA%E5%B7%B1/"/>
    
      <category term="心灵鸡汤" scheme="https://blogs.zhaozf.site/tags/%E5%BF%83%E7%81%B5%E9%B8%A1%E6%B1%A4/"/>
    
  </entry>
  
  <entry>
    <title>【致自己-心灵鸡汤】最好的社交状态，藏在这四个细节里</title>
    <link href="https://blogs.zhaozf.site/1046f855/"/>
    <id>https://blogs.zhaozf.site/1046f855/</id>
    <published>2020-05-18T07:45:31.000Z</published>
    <updated>2020-05-18T08:03:07.399Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/blogImg/202005181403.jpg" alt></p><p>人与人之间保持一杯水的距离。</p><p>有人说：“人生如尺，必须有度。感情如面，最忌越界。”</p><a id="more"></a><p>有这样一个小常识：</p><p>如果地球和太阳的距离再近一些，地球就会变成“火焰山”，瞬间生灵涂炭；但如果再远一些，地球就是“广寒宫”，几乎所有生命都无法存活。</p><p>而现在，它们的距离恰到好处的。这不远不近的距离给我们带来了富饶的物产、宜人的气候，让地球不像其他星球那样，荒芜、孤独。</p><p>人与人之间的距离也同样如此。一杯水，就是你们之间最好的距离。</p><p>梁实秋的《谈友谊》里写道：“君子之交淡如水，因为淡所以才能不腻，才能持久。”</p><p>好的友谊就像一杯清水，看似平淡无味，实则解渴清凉，平凡却不可或缺。</p><p>而失去距离感的友谊，就像一杯糖水，过甜、过腻，无法解渴，也无益于身体。</p><p><img src="/assets/blogImg/201907122051.jpg" alt></p><p>人生就像一张很大的拼图，开始时都是一张白纸。 你所遇到的人、经历的故事就是这张拼图中的一片，都有专属的位置，放对了便能使图案逐渐丰富起来。 </p><p>但若是放错了，把不属于这张图的那片强行放进去，那你也得不到最终的完整。</p><p>人与人之间，亦是如此，那些让你感到消耗精力、劳心伤神的关系，也许是错的。</p><p>真正舒服的关系，相处起来应该是容易的，快乐的。</p><p>和相处舒服的人在一起是什么样？ </p><p>几十年来，杨绛和钱钟书的故事一直让众人羡慕不已：二人都喜欢读书，时常在学习之余，展开读书竞赛，比谁读的书多，然后再交流心得。 闲暇时光，各自写作，互相鼓励，彼此成就，平淡日子里，总少不了温情时刻。</p><p>能让你相处舒服、放下防备的，是能伴你走过一生的人。</p><p><img src="/assets/blogImg/202005181415.jpg" alt></p><p>总有人会问：“怎么才能认识更多优秀的人？”</p><p>普遍的回答都是：你要努力让自己变优秀。</p><p>一位青年自诩自己擅长社交，懂得积累人脉，手机里有很多商业大佬的电话。</p><p>在众人的质疑下，主持人提议让青年现场打电话，证明一下自己。</p><p>令人尴尬的是，青年连拨了好几个电话，却没有一位商业大佬接他的电话。</p><p>当你不够强大时，结交再多人脉都是无效的。</p><p>你还是你，他还是他，除了手中多了一张名片外，一切都未改变。</p><p>天下没有免费的午餐，唯有脚踏实地的努力，才是根本。</p><p>你若盛开，清风自来。</p><p>踏踏实实耕耘人生，才能绽放不一样的烟火。</p><p><img src="/assets/blogImg/201907122049.jpg" alt></p><p>在《世说新语》中有一段这样的记载：</p><p>管宁和华歆曾是一对好友，他们同在园中锄草，看见地上有一片金。</p><p>管宁仍然挥动着锄头，视金子如同瓦石，但华歆却高兴地拾起金片，看了看又扔了它。</p><p>又有一次，两人同坐在一张席上读书。有达官贵人坐车经过，管宁照旧读书，但华歆却放下书出去观看。</p><p>等到华歆回来后，管宁就割开席子说道：“你不再是我的朋友。”</p><p>欣赏一个人，始于颜值，敬于才华，合于性格，久于善良，终于人品。</p><p>懂得保持朋友圈的纯净，于千万人之中，寻得良师益友。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/blogImg/202005181403.jpg&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;人与人之间保持一杯水的距离。&lt;/p&gt;
&lt;p&gt;有人说：“人生如尺，必须有度。感情如面，最忌越界。”&lt;/p&gt;
    
    </summary>
    
    
      <category term="致自己" scheme="https://blogs.zhaozf.site/tags/%E8%87%B4%E8%87%AA%E5%B7%B1/"/>
    
      <category term="心灵鸡汤" scheme="https://blogs.zhaozf.site/tags/%E5%BF%83%E7%81%B5%E9%B8%A1%E6%B1%A4/"/>
    
  </entry>
  
  <entry>
    <title>【致自己-心灵鸡汤】三十岁前，一定要坚持的几件事</title>
    <link href="https://blogs.zhaozf.site/f033f067/"/>
    <id>https://blogs.zhaozf.site/f033f067/</id>
    <published>2020-05-18T07:17:54.000Z</published>
    <updated>2020-05-18T07:41:14.646Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/blogImg/202005181355.jpg" alt></p><center> <h1>1</h1></center><p>　　<font color="blue">第一件事是，别丧。</font></p><p>　　丧是容易习惯的，积极也一样，都能养成习惯。</p><p>　　曾看过这样一段话：好习惯对人有益，可以增加人生的乐趣并赋予其充盈的力量，而坏习惯只能让人感觉到不安、不悦，一事无成。习惯是人们不假思索就做的事，是人们日常的行为方式，或是经由不断重复而形成的行为模式。</p><a id="more"></a><p>　　遇到一件好事，丧的思维习惯是：那谁竟然得到的比我多；而积极的思维习惯是：我今天获得的比昨天多。</p><p>　　遇到挫折，丧的思维习惯是：弄垮我算了；而积极的思维习惯是：打不死我的只会让我变得更强。</p><p>　　遇到失败，丧的思维习惯是：我倒在地上，不起来了；而积极的思维习惯是：这都是经历，会让我的未来越来越好。</p><p>　　因为不同的习惯，久而久之，人和人就不一样了。</p><center> <h1>2</h1></center><p>　<font color="blue">　第二件事是，多读书。</font></p><p>　　永远不要连续三天不读书，否则人会很容易变得很笨很笨的。</p><p>　　读书是自己和自己的交流，也是自己和作者的交流。</p><p>　　外出时，包里习惯性地装上一本书，堵车的时候、闲暇的时候、无聊的时候拿出来翻两页，翻着翻着就读完了一本书。</p><center> <h1>3</h1></center><font color="blue">　　第三件事是，运动。　</font><p>　　高中时，我们最爱的是体育课；上了大学，我们逃得最多的还是体育课。但是，别小看锻炼。年轻时不坚持运动，等年纪大些，病痛便很容易找上门来。</p><p>　　其实，谁都知道运动有好处，在合理的范围内，运动越多则效果更佳。二十多岁积累的身体素质，都是为三十岁以后更好地工作和享受生活打下夯实的基础。</p><p>　　除了运动，也请坚持健康的饮食，少糖、少油；坚持体检。身体是灵魂的载体，再有趣的灵魂也经不起多病的身躯折腾。</p><center> <h1>4</h1></center><font color="blue">　　第四件事是，定期给父母打电话。　</font><p>　　尤其是远行的年轻人，更要多了解父母的生活作息和他们的身体状况，也帮助他们熟悉互联网世界的生活，比如教他们使用在线支付、外卖、视频等软件。</p><p>　　我们与父母之间，一定要多沟通，多互相了解。</p><center> <h1>5</h1></center><p>　<font color="blue">　第五件事是，每年至少去一个陌生的地方。</font></p><p>　　出不了国可以出省，出不了省至少要走出自己的城市和村庄，要在路上思考、寻找、发问。</p><p>　　见识很重要，跨出舒适区，外面的世界更大。</p><p>　　如果实在去不了远方，也别忘了，书里也有远方。</p><center> <h1>6</h1></center><p>　<font color="blue">     第六件事是，存一点钱。　</font></p><p>　　如果你刚开始工作，还没有太多收入，也尽量别做“月光族”。人们在年轻时很容易大手大脚，记得定下一个比例，从工资里拿出这部分，不要动。把这些钱积累起来，做自己的备用资金，它们会变成只属于你自己的安全感。</p><p>　　还应该拿出一定的比例来自我投资——去学习。请记住，这正是创造的黄金年龄，打拼的最好岁月。二十多岁的时候，投资自己是最聪明的举动。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/blogImg/202005181355.jpg&quot; alt&gt;&lt;/p&gt;
&lt;center&gt; &lt;h1&gt;1&lt;/h1&gt;&lt;/center&gt;



&lt;p&gt;　　&lt;font color=&quot;blue&quot;&gt;第一件事是，别丧。&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;　　丧是容易习惯的，积极也一样，都能养成习惯。&lt;/p&gt;
&lt;p&gt;　　曾看过这样一段话：好习惯对人有益，可以增加人生的乐趣并赋予其充盈的力量，而坏习惯只能让人感觉到不安、不悦，一事无成。习惯是人们不假思索就做的事，是人们日常的行为方式，或是经由不断重复而形成的行为模式。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>【致自己-心灵鸡汤】万物静观皆自得，人生宁静方致远</title>
    <link href="https://blogs.zhaozf.site/ef203a33/"/>
    <id>https://blogs.zhaozf.site/ef203a33/</id>
    <published>2020-05-16T07:16:52.000Z</published>
    <updated>2020-05-18T07:43:08.990Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/blogImg/202005181359.jpg" alt></p><p>自古以来的贤圣之人，多是大气之人，越是遇到惊天动地之事，越能心静如水，沉着应对。</p><p>静气是一种应急的态度。重大事件发生时，不紧张慌乱，自乱阵脚，而是情急智生或从容应对。</p><a id="more"></a><p>在生活中，有许多人总是为别人的评价而生活，在被动中死要面子活受罪。而有的人则不然，走自己选择的路，这样的人则最能成功。</p><p>″宠辱不惊，看亭前花开花落。去留无意，望天上云卷云舒″。这就是一种处世态度所产生的人生境界，在失意和迷茫时细细品味，会豁然开朗的。</p><p>宁静才能致远，平心才能静气，静气才能干事，干事才能成事。</p><p><img src="/assets/blogImg/202005181403.jpg" alt></p><p>胸怀静气才能保持清醒头脑，深谋远虑，鉴天地之精微，察万物之规律；真正淡泊名利，心态平衡，不为进退滋扰，宠辱泰然不惊；志存高远，心忧天下，不为成绩骄傲，不为挫折沮丧；</p><p>明白事理，可以知荣明辱，可以心无旁骛；不计名利，追求卓越，高不孤方自赏，低不自抱自弃；<br>　　<br>遇事时从容不迫，举重若轻；不骄不躁、不卑不亢、不偏不倚，杂气自去，静气自来。</p><p>诸葛亮言：“夫君子之行，静以修身，俭以养德，非淡泊无以明志，非宁静无以致远。夫学，须静也；才，须学也。非学无以广才，非志无以成学。”</p><p>在当今，激烈的竞争，快节奏的生活，纷繁复杂的社会现象、强烈追求物质生活的欲望给人们增加了无形的压力。使一些人的心态浮躁得宛若汤煮，身上或多或少充斥着俗气、躁气。</p><p>心烦意乱者有之，神不守舍者有之，着急上火者有之……归根结底就是缺少此静气。<br>　　<br>凡大事面前有静气者，反映出他修炼道行的深邃，大事且能以静制动，小事更是拿得起放得下。<br>　　<br>“静气”说起来容易,做起来难，人非草木，孰能无情？每个人都有喜怒哀乐爱恶憎，在一定的环境中某种情绪总是要表露出来的，这是人的秉性。</p><p><img src="/assets/blogImg/202005181355.jpg" alt></p><p>静气源于定力，道家强调修心，心定、身定、都强调的是定力。《大学》教以：“定后而能静，静后而能安，安后而能虑，虑而后能得”。</p><p>“静气”需要修养，需要自己去历练和积累，它不是与生俱来的,是每个人后天成长的产物。所以，境界有高有低。</p><p>浮躁的社会，心静者胜出。万物静观皆自得，人生宁静方致远。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/blogImg/202005181359.jpg&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;自古以来的贤圣之人，多是大气之人，越是遇到惊天动地之事，越能心静如水，沉着应对。&lt;/p&gt;
&lt;p&gt;静气是一种应急的态度。重大事件发生时，不紧张慌乱，自乱阵脚，而是情急智生或从容应对。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>【致自己-心灵鸡汤】人能相遇，已是不易；心灵若相知，更要珍惜</title>
    <link href="https://blogs.zhaozf.site/320a4b7/"/>
    <id>https://blogs.zhaozf.site/320a4b7/</id>
    <published>2020-05-15T05:28:02.000Z</published>
    <updated>2020-05-18T07:42:43.793Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/blogImg/202005181342.jpg" alt></p><p><strong><em>时光</em></strong>，留不住昨天; <strong><em>缘分</em></strong>，停不在初见。</p><p><em>感情</em>，需要的是理解;<em>相处</em>，需要的是默契;<em>陪伴</em>，需要的是耐心。</p><p>人生能相遇，已是不易;心灵若相知，更要珍惜!</p><p><strong><em>人与人，一场缘：心与心，一段情。</em></strong></p><a id="more"></a><p>人活着，一份自然再加一份真，真正的朋友不是不离左右，而是默默关注，一句贴心的问候，一句有力的鼓励。</p><p>友不友情，要看相处;永不永恒，要看时间。</p><p>日子久了，与你无缘的自会走远，与你有缘的自会留下。</p><p><img src="/assets/blogImg/202005181415.jpg" alt></p><p>不要拒绝真诚的话，更不要拒绝一颗真诚的心。</p><p>有时候，人需要的不是物质的富有，而是心灵的慰籍;不是甜言蜜语的左右，而是相通的懂得。</p><p>关乎于情，因为动心;感动于心，因为认真。</p><p>一段话入心，只因触碰心灵;一行泪流下，只因瓦解脆弱。</p><p>人生中有朋友是幸福，有知己是难得，有知心是难求难得。</p><p>风雨时，才能见真情;平淡中，才能见真心 。</p><p>有所珍惜，才有有所真心;有所懂得，才有有所值得。</p><p><img src="/assets/blogImg/202005181414.jpg" alt></p><p>不相对，已然在心;不诉情，已然懂得。</p><p>真心见真情，真情见真人。</p><p>人活着，圈子不要太大，容得下自己和一部分人就好;朋友不在于多少，自然随意就好。</p><p>有些人，只可远观不可近瞧;有些话，只可慢言不可说尽。</p><p>朋友，淡淡交，慢慢处，才能长久;感情，浅浅尝，细细品，才有回味。</p><p>朋友如茶，需品;相交如水，需淡。</p><p>一份好的缘分，是随缘;一份好的感情，是随性。</p><p>相交莫强求，强求不香;相伴莫若惜，珍惜才久。</p><p>人心都是相对的，以真换真;感情都是相互的，用心暖心!</p><p>有多少人半路就离去，有多少人中途就转移;有几颗心能专心专意，有几份情会不离不弃。</p><p>历经风雨，才能看透人心真假;患难与共，才能领悟感情冷暖。</p><p><img src="/assets/blogImg/202005181412.jpg" alt></p><p>虚情留不住，真心总会在。</p><p>一份情，因为真诚而存在;一颗心，因为疼惜而从未走开。</p><p>一生中，能成为朋友的也就那么几个，好好珍惜那些在很久以后还称为朋友的人，真的很难得。</p><p>任何感情都需要用心呵护，好好珍惜。</p><p>朋友，或许不能朝朝暮暮，或许没有甜言蜜语，但一定要真心、真情、真爱。</p><p>不要轻易试探朋友的心，更不要怀疑朋友的情，再好的感情，都经不起一颗猜疑的心。</p><p>人，总会在乎一份情，在乎在对方心中的位置。</p><p>缘分不在于长短，而在于交心。　一生中，能成为真正朋友的不多。</p><p>珍惜该珍惜的，拥有该拥有的。</p><p>如此，安暖、安好……</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/blogImg/202005181342.jpg&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;时光&lt;/em&gt;&lt;/strong&gt;，留不住昨天; &lt;strong&gt;&lt;em&gt;缘分&lt;/em&gt;&lt;/strong&gt;，停不在初见。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;感情&lt;/em&gt;，需要的是理解;&lt;em&gt;相处&lt;/em&gt;，需要的是默契;&lt;em&gt;陪伴&lt;/em&gt;，需要的是耐心。&lt;/p&gt;
&lt;p&gt;人生能相遇，已是不易;心灵若相知，更要珍惜!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;人与人，一场缘：心与心，一段情。&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="致自己" scheme="https://blogs.zhaozf.site/tags/%E8%87%B4%E8%87%AA%E5%B7%B1/"/>
    
      <category term="心灵鸡汤" scheme="https://blogs.zhaozf.site/tags/%E5%BF%83%E7%81%B5%E9%B8%A1%E6%B1%A4/"/>
    
  </entry>
  
  <entry>
    <title>【致自己-心灵鸡汤】多与高人来往，勤与能人共事</title>
    <link href="https://blogs.zhaozf.site/f8c10afd/"/>
    <id>https://blogs.zhaozf.site/f8c10afd/</id>
    <published>2020-05-10T06:17:27.000Z</published>
    <updated>2020-05-18T07:43:20.157Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://app.yinxiang.com/shard/s41/res/57465112-4f2e-4e9b-8124-18d0d6afbc70/%E5%9B%BE%E7%89%87.jpg" alt="img"></p><p>《荀子》中说，蓬生麻中，不扶而直。</p><p>常常与高人往来，你会发觉自己的学识和境界也在不断提升。</p> <a id="more"></a><p><strong>1、</strong>  <strong>多与高人来往</strong></p><p>　　与高人往来，能让我们的人生之路更丰富有趣。</p><p>　　水就湿，火就燥，物各从其类也。《荀子》中说，蓬生麻中，不扶而直。常常与高人往来，你会发觉自己的学识和境界也在不断提升。</p><p><img src="https://app.yinxiang.com/shard/s41/res/34a72a95-7747-41c4-97fc-bd4236f55ec5/图片.webp" alt></p><p><strong>2、</strong> <strong>勤与能人共事</strong></p><p>　　普通人的圈子，谈论的是茶余饭后的闲事，赚的是屈指可数的工资，想的是明天干什么。</p><p>　　生意人的圈子，谈论的是项目，赚的是利润，想的是下一年。事业人的圈子，谈论的是机会，赚的是财富，想到的是未来和保障。</p><p>　　智慧人的圈子，谈论是给予，交流是的奉献，遵道而行，一切将会自然富足。</p><p>　　现实生活中，您和谁在一起的确很重要，甚至能改变您的成长轨迹，决定您的人生成败。和什么样的人在一起,就会有什么样的人生。和勤奋的人在一起，您不会懒惰。和积极的人在一起，您不会消沉。</p><p>　　与智者同行，你会不同凡响。与高人为伍，您能登上巅峰。生活中最不幸的是：由于您身边缺乏积极进取的人,缺少远见卓识的人，使您的人生变得平平庸庸，黯然失色。</p><p><img src="https://app.yinxiang.com/shard/s41/res/0d97172e-79a5-403a-b65f-77a6a61db504/图片.webp" alt></p><p><strong>3、</strong> <strong>乐与众人分享</strong></p><p>　　孟子说，独乐乐不如众乐乐。幸福越与人共享，它的价值越增加。如果你把快乐告诉一个朋友，你将得到两个快乐。</p><p>　　特别是在利益面前，切记要学会分享。曾国藩有句名言说，利不可独自。有利益好处的地方，往往大家都盯着。如果有人独占了利益而不与大家分享，那么一定会招致怨恨，甚至成为众矢之的，带来后患，结果就是通常说的“独利则败”。</p><p><img src="https://app.yinxiang.com/shard/s41/res/11c9377a-fae1-4740-89cb-214390db2ef5/图片.webp" alt></p><p><strong>4、</strong>  <strong>常与亲人相伴</strong></p><p>　　人生短短几十年，亲人是我们最近的人。中国人有很多有道理的话，打断骨头连着筋，血浓于水。这都是指亲情的坚固。</p><p>　　但是，人生往往最容易忽略的就是亲情。有多少父母忙于工作和应酬，甚至没能在孩子小的时候痛痛快快地陪他玩一场；有多父母没能等到子女在膝下尽孝，没有享受到天伦之乐就撒手人寰。</p><p>　　人生，像路上急行的车子一样，时间匆匆流逝，失去的不再重来，趁现在一切都尚早，而不是当失去了才来跪地大哭。现在有着不少人，像是被手机捆上了锁链，放下手机吧，多陪陪亲人。</p><p>　　一个人如何对待家人的态度，代表着真实的品格，因为这是最最真实的本相。家人的陪伴就是最简单的幸福。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://app.yinxiang.com/shard/s41/res/57465112-4f2e-4e9b-8124-18d0d6afbc70/%E5%9B%BE%E7%89%87.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;p&gt;《荀子》中说，蓬生麻中，不扶而直。&lt;/p&gt;
&lt;p&gt;常常与高人往来，你会发觉自己的学识和境界也在不断提升。&lt;/p&gt;
    
    </summary>
    
    
      <category term="致自己" scheme="https://blogs.zhaozf.site/tags/%E8%87%B4%E8%87%AA%E5%B7%B1/"/>
    
      <category term="心灵鸡汤" scheme="https://blogs.zhaozf.site/tags/%E5%BF%83%E7%81%B5%E9%B8%A1%E6%B1%A4/"/>
    
  </entry>
  
  <entry>
    <title>前端工程师技能图谱</title>
    <link href="https://blogs.zhaozf.site/6dede921/"/>
    <id>https://blogs.zhaozf.site/6dede921/</id>
    <published>2020-05-05T06:41:04.000Z</published>
    <updated>2020-05-05T07:00:48.876Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/blogImg/20200505.jpg" alt></p><a id="more"></a><p><img src="/assets/blogImg/202005051452.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/blogImg/20200505.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端工程师" scheme="https://blogs.zhaozf.site/tags/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%88/"/>
    
      <category term="技能图谱" scheme="https://blogs.zhaozf.site/tags/%E6%8A%80%E8%83%BD%E5%9B%BE%E8%B0%B1/"/>
    
  </entry>
  
  <entry>
    <title>前端开发学习路线-WEB基础</title>
    <link href="https://blogs.zhaozf.site/40c140c1/"/>
    <id>https://blogs.zhaozf.site/40c140c1/</id>
    <published>2020-03-10T12:53:35.000Z</published>
    <updated>2020-03-10T14:11:11.629Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/blogImg/202003102128.jpg" alt="WEB基础"></p><h1 id="web基础"><a href="#web基础" class="headerlink" title="web基础"></a>web基础</h1><h3 id="常见浏览器"><a href="#常见浏览器" class="headerlink" title="常见浏览器"></a>常见浏览器</h3><ol><li>IE浏览器 </li><li>Edge浏览器</li><li>火狐浏览器（Firefox）</li><li>谷歌浏览器（google Chrome）</li><li>Safari浏览器</li><li>Opera浏览器</li></ol><h3 id="浏览器内核"><a href="#浏览器内核" class="headerlink" title="浏览器内核"></a>浏览器内核</h3><p>浏览器内核有可以分成两部分：渲染引擎（layout engineer 或者 Rendering Engine）和JS引擎。</p><p>(1). <code>Trident</code>（IE内核）<br>(2). <code>Gecko</code>（Firefox）<br>(3). <code>webkit</code>(Safari)<br>(4). <code>Chromium/Blink</code>(chrome)<br>(5). <code>Presto</code>(Opera) blink<br><a id="more"></a></p><h3 id="web标准"><a href="#web标准" class="headerlink" title="web标准"></a>web标准</h3><p>结构标准：结构用于对网页元素进行整理和分类，主要包括XML和XHTML两个部分。<br>样式标准：表现用于设置网页元素的板式、颜色、大小等外观样式，主要指CSS。<br>行为标准：行为是指网页模型的定义及交互的编写，主要包括DOM和ECMAScript两个部分。</p><h1 id="HTML入门"><a href="#HTML入门" class="headerlink" title="HTML入门"></a>HTML入门</h1><h3 id="HTML初识"><a href="#HTML初识" class="headerlink" title="HTML初识"></a>HTML初识</h3><p>HTML(Hyper Text Markup Language的缩写)中文译为“超文本标签语言”，主要是通过HTML标签对网页中的文本、图片、声音等内容进行描述。</p><h3 id="HTML骨架"><a href="#HTML骨架" class="headerlink" title="HTML骨架"></a>HTML骨架</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">&lt;html&gt;</span></span><br><span class="line">    <span class="section">&lt;head&gt;</span></span><br><span class="line">        <span class="section">&lt;title&gt;</span><span class="section">&lt;/title&gt;</span></span><br><span class="line">    <span class="section">&lt;/head&gt;</span></span><br><span class="line">    <span class="section">&lt;body&gt;</span></span><br><span class="line">    <span class="section">&lt;/body&gt;</span></span><br><span class="line"><span class="section">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><p>在HTML页面中，带有<code>&lt;&gt;</code>符号的元素被称为HTML标签，如<code>&lt;html&gt;</code> 、<code>&lt;head&gt;</code> 、<code>&lt;body&gt;</code>等。</p><ol><li>双标签<br>&lt;标签名&gt;内容&lt;/标签名&gt;<br><code>&lt;body&gt;&lt;/body&gt;</code></li><li>单标签<br>&lt;标签名 /&gt;<br><code>&lt;br /&gt;</code></li></ol><p>HTML标签：作用所有HTML中标签的一个根节点。<br>head标签：用于存放title，meta，base，style，script，link 注意在head标签中我们必须要设置的标签是title<br>body标签：页面的主体部分。<br>title标签：让页面拥有一个属于自己的标题.</p><h4 id="排版标签"><a href="#排版标签" class="headerlink" title="排版标签"></a>排版标签</h4><ol><li><p>标题标签：<br> <code>&lt;h1&gt;&lt;h2&gt;&lt;h3&gt;&lt;h4&gt;&lt;h5&gt;&lt;h6&gt;</code></p></li><li><p>段落标签<br>  <code>&lt;p&gt;段落标签&lt;/p&gt;</code></p></li><li><p>水平线标签<br> <code>&lt;hr /&gt;</code></p></li><li><p>换行标签<br> <code>&lt;br /&gt;</code></p></li><li><p>div span 布局标签 没有语义<br> <code>&lt;div&gt;&lt;/div&gt;</code><br> <code>&lt;span&gt;&lt;/span&gt;</code></p></li></ol><h4 id="文本格式化标签"><a href="#文本格式化标签" class="headerlink" title="文本格式化标签"></a>文本格式化标签</h4><table><thead><tr><th>标签</th><th style="text-align:center">显示效果</th></tr></thead><tbody><tr><td><code>&lt;b&gt;&lt;/b&gt;&lt;strong&gt;&lt;/strong&gt;</code></td><td style="text-align:center">文字以粗体方式显示（XHTML推荐使用strong）</td></tr><tr><td><code>&lt;i&gt;&lt;/i&gt;</code>和<code>&lt;em&gt;&lt;/em&gt;</code></td><td style="text-align:center">文字以斜体方式显示（XHTML推荐使用em）</td></tr><tr><td><code>&lt;s&gt;&lt;/s&gt;</code>和<code>&lt;del&gt;&lt;/del&gt;</code></td><td style="text-align:center">文字以加删除线方式显示（XHTML推荐使用del）</td></tr><tr><td><code>&lt;u&gt;&lt;/u&gt;</code>和<code>&lt;ins&gt;&lt;/ins&gt;</code></td><td style="text-align:center">文字以加下划线方式显示（XHTML不赞成使用u）</td></tr></tbody></table><h4 id="图片标签"><a href="#图片标签" class="headerlink" title="图片标签"></a>图片标签</h4><p><code>&lt;img src=&quot;图像URL&quot; /&gt;</code></p><p>属性：<br>src：图像URL<br>alt：图像不能显示时的替换文本<br>title：鼠标悬停时显示的内容<br>width：设置图像的宽度<br>height：设置图像的高度<br>border：设置图像边框的宽度</p><h4 id="链接标签"><a href="#链接标签" class="headerlink" title="链接标签"></a>链接标签</h4><p><code>&lt;a href=&quot;跳转目标&quot; target=&quot;目标窗口的弹出方式&quot;&gt;&lt;/a&gt;</code></p><p>href：用于指定链接目标的URL地址<br>target: 用于打开指定链接页面的打开方式，其值有self和black两种<br>        self为默认值，black为在新窗口中打开。</p><h4 id="base标签"><a href="#base标签" class="headerlink" title="base标签"></a>base标签</h4><p><code>&lt;base target=&quot;_black_&quot; /&gt;</code><br>base 可以设置整体链接的打开状态</p><h4 id="特殊字符标签"><a href="#特殊字符标签" class="headerlink" title="特殊字符标签"></a>特殊字符标签</h4><table><thead><tr><th>特殊字符</th><th style="text-align:center">描述</th><th style="text-align:right">字符代码</th></tr></thead><tbody><tr><td> <code></code></td><td style="text-align:center">空格符</td><td style="text-align:right"><code>&amp;nbsp;</code></td></tr><tr><td> <code>&lt;</code></td><td style="text-align:center">小于号</td><td style="text-align:right"><code>&amp;lt;</code></td></tr><tr><td> <code>&gt;</code></td><td style="text-align:center">大于号</td><td style="text-align:right"><code>&amp;gt;</code></td></tr><tr><td> <code>&amp;</code></td><td style="text-align:center">和号</td><td style="text-align:right"><code>&amp;amp;</code></td></tr><tr><td> <code>￥</code></td><td style="text-align:center">人民币</td><td style="text-align:right"><code>&amp;yen;</code></td></tr><tr><td> <code>©</code></td><td style="text-align:center">版权</td><td style="text-align:right"><code>&amp;copy;</code></td></tr><tr><td> <code>®</code></td><td style="text-align:center">商标</td><td style="text-align:right"><code>&amp;reg;</code></td></tr><tr><td> <code>℃</code></td><td style="text-align:center">摄氏度</td><td style="text-align:right"><code>&amp;deg;</code></td></tr><tr><td> <code>±</code></td><td style="text-align:center">正负号</td><td style="text-align:right"><code>&amp;plusmn</code></td></tr><tr><td> <code>×</code></td><td style="text-align:center">乘号</td><td style="text-align:right"><code>&amp;times</code></td></tr><tr><td> <code>÷</code></td><td style="text-align:center">除号</td><td style="text-align:right"><code>&amp;divide</code></td></tr><tr><td> <code>²</code></td><td style="text-align:center">平方（上标2）</td><td style="text-align:right"><code>&amp;sup2</code></td></tr><tr><td> <code>³</code></td><td style="text-align:center">立方（上标3）</td><td style="text-align:right"><code>&amp;sup3</code></td></tr></tbody></table><h4 id="注释标签"><a href="#注释标签" class="headerlink" title="注释标签"></a>注释标签</h4><p><code>&lt;!--注释标签--&gt;</code></p><h3 id="文档类型"><a href="#文档类型" class="headerlink" title="文档类型"></a>文档类型</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br></pre></td></tr></table></figure><p>这句话告诉我们使用的是html5的版本。</p><h3 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta <span class="attribute">charset</span>=<span class="string">"UTF-8"</span>&gt;</span><br></pre></td></tr></table></figure><p>utf-8是目前最常用的字符集编码方式。包含去世界所有国家需要用到的字符。<br>GB231 简单中文 ，包含6763个汉字。<br>BIG5 繁体中文<br>GBK 包含全部中文字符，是GB2312的扩展，加入对繁体字的支持，兼容GB2312。</p><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>使用HTML制作网页时，可以使用HTML标签属性加以设置，语法格式：<br><code>&lt;标签名 属性1=&quot;属性值&quot; 属性2=&quot;属性值2&quot; ...&gt;</code> 内容<code>&lt;/标签&gt;</code></p><p>1.标签可以拥有多个属性，必须写在开始标签中，位于标签名后面。<br>2.属性之间不分先后顺序，标签名与属性、属性与属性之间均以空格分开。<br>3.任何标签的属性都有默认值，省略该属性则取默认值。<br>采取 键值对 的格式 key=”value“ 的格式。<br>比如：<code>&lt;hr width=&quot;400px&quot;&gt;</code></p><h3 id="锚定定位"><a href="#锚定定位" class="headerlink" title="锚定定位"></a>锚定定位</h3><p>1.使用<code>&lt;a href=&quot;#id名&quot;&gt;&lt;/a&gt;</code>创建链接文本。<br>2.使用相应的id名标注跳转目标的位置。<code>id=&quot;live&quot;</code></p><h3 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h3><p>1.图像文件和HTML文件位于同一文件夹，只需输入图像文件名称即可，如<code>&lt;img src=&quot;logo.gif&quot; /&gt;</code><br>2.图像文件位于Html文件的下一级文件夹：输入文件夹名和文件名，之间用“/”隔开，如<code>&lt;img src=&quot;img/img01/logo.gif&quot; /&gt;</code><br>3.图像文件位于HTML文件的上一级文件夹；在文件名之前加入“../”,如果是上两级，则需要使用“../../” 以此类推，如<code>&lt;img src=&quot;../logo.gif&quot; /&gt;</code></p><h3 id="无序列表ul"><a href="#无序列表ul" class="headerlink" title="无序列表ul"></a>无序列表ul</h3><p>无序列表的各个列表项之间没有顺序级别之分，是并列的。其基本语法格式如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span> 列表项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span> 列表项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span> 列表项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    ......</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>注意：</p><ol><li><code>&lt;ul&gt;&lt;/ul&gt;</code>中只能嵌套<code>&lt;li&gt;&lt;/li&gt;</code>,直接在<code>&lt;ul&gt;&lt;/ul&gt;</code>标签中输入其他标签或者文字的做法是不被允许的。</li><li><code>&lt;li&gt;</code>与<code>&lt;/li&gt;</code>之间相当于一个容器，可以容纳所有元素。</li><li>无序列表会有自己样式属性，放下那个样式，让css来！</li></ol><h3 id="有序列表ol"><a href="#有序列表ol" class="headerlink" title="有序列表ol"></a>有序列表ol</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span> 中国<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span> 中国<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/blogImg/202003102128.jpg&quot; alt=&quot;WEB基础&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;web基础&quot;&gt;&lt;a href=&quot;#web基础&quot; class=&quot;headerlink&quot; title=&quot;web基础&quot;&gt;&lt;/a&gt;web基础&lt;/h1&gt;&lt;h3 id=&quot;常见浏览器&quot;&gt;&lt;a href=&quot;#常见浏览器&quot; class=&quot;headerlink&quot; title=&quot;常见浏览器&quot;&gt;&lt;/a&gt;常见浏览器&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;IE浏览器 &lt;/li&gt;
&lt;li&gt;Edge浏览器&lt;/li&gt;
&lt;li&gt;火狐浏览器（Firefox）&lt;/li&gt;
&lt;li&gt;谷歌浏览器（google Chrome）&lt;/li&gt;
&lt;li&gt;Safari浏览器&lt;/li&gt;
&lt;li&gt;Opera浏览器&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;浏览器内核&quot;&gt;&lt;a href=&quot;#浏览器内核&quot; class=&quot;headerlink&quot; title=&quot;浏览器内核&quot;&gt;&lt;/a&gt;浏览器内核&lt;/h3&gt;&lt;p&gt;浏览器内核有可以分成两部分：渲染引擎（layout engineer 或者 Rendering Engine）和JS引擎。&lt;/p&gt;
&lt;p&gt;(1). &lt;code&gt;Trident&lt;/code&gt;（IE内核）&lt;br&gt;(2). &lt;code&gt;Gecko&lt;/code&gt;（Firefox）&lt;br&gt;(3). &lt;code&gt;webkit&lt;/code&gt;(Safari)&lt;br&gt;(4). &lt;code&gt;Chromium/Blink&lt;/code&gt;(chrome)&lt;br&gt;(5). &lt;code&gt;Presto&lt;/code&gt;(Opera) blink&lt;br&gt;
    
    </summary>
    
      <category term="前端开发学习路线" scheme="https://blogs.zhaozf.site/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"/>
    
    
      <category term="HTML" scheme="https://blogs.zhaozf.site/tags/HTML/"/>
    
      <category term="前端开发" scheme="https://blogs.zhaozf.site/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>yarn 安装与使用</title>
    <link href="https://blogs.zhaozf.site/2d1e74c1/"/>
    <id>https://blogs.zhaozf.site/2d1e74c1/</id>
    <published>2020-02-04T04:01:00.000Z</published>
    <updated>2020-02-04T06:07:10.094Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/blogImg/20200204.png" alt="yarn包管理器"></p><h1 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1 - Introduction"></a>1 - Introduction</h1><p>Yarn 对你的代码来说是一个包管理器， 你可以通过它使用全世界开发者的代码， 或者分享自己的代码。yarn可以快速、安全、可靠地做到这一点，所以你永远不必担心。</p><p>通过Yarn你可以使用其他开发者针对不同问题的解决方案，使自己的开发过程更简单。</p><p>代码通过 包（package） (或者称为 模块（module）) 的方式来共享。 一个包里包含所有需要共享的代码，以及描述包信息的文件，称为 package.json 。</p><a id="more"></a><h1 id="2-Installation"><a href="#2-Installation" class="headerlink" title="2 - Installation"></a>2 - Installation</h1><p>注意：当前，Yarn 2仅可通过npm安装。以前在Yarn 1中可用的安装方法（Windows安装程序，Chocolatey，Debian / Ubuntu软件包，Homebrew和RPM软件包）将很快再次可用。</p><p>1.安装Node.js</p><p>2.安装yarn</p><p><code>npm install -g yarn@berry</code></p><p>3.通过运行以下命令测试Yarn 2是否已正确安装，其结果应为“ v2.0.0”或类似的结果：</p><p><code>yarn --version</code></p><h2 id="每个项目的安装"><a href="#每个项目的安装" class="headerlink" title="每个项目的安装"></a>每个项目的安装</h2><p>1.遵循全局安装说明</p><p>2.移至您的项目文件夹：</p><p><code>cd ~/path/to/project</code></p><p>3.运行以下命令：</p><p><code>yarn set version berry</code></p><p>4.提交.yarn和.yarnrc.yml更改</p><h1 id="3-Usage"><a href="#3-Usage" class="headerlink" title="3 - Usage"></a>3 - Usage</h1><p>现在，您已经安装了 Yarn ，可以开始使用Yarn了。这是您需要的一些最常见的命令。</p><p>访问命令列表</p><p><code>yarn help</code></p><p>开始一个新项目</p><p><code>yarn init</code></p><p>安装所有依赖项</p><p>yarn<br><code>yarn install</code></p><p>添加依赖</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn <span class="keyword">add</span><span class="bash"> [package]</span></span><br><span class="line">yarn <span class="keyword">add</span><span class="bash"> [package]@[version]</span></span><br><span class="line">yarn <span class="keyword">add</span><span class="bash"> [package]@[tag]</span></span><br></pre></td></tr></table></figure><p>将依赖项添加到不同类别的依赖项中<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yarn <span class="builtin-name">add</span> [package] --dev  # dev dependencies</span><br><span class="line">yarn <span class="builtin-name">add</span> [package] --peer #<span class="built_in"> peer </span>dependencies</span><br></pre></td></tr></table></figure></p><p>升级依赖</p><p>yarn up [package]<br>yarn up [package]@[version]<br>yarn up [package]@[tag]</p><p>删除依赖</p><p><code>yarn remove [package]</code></p><p>升级yarn本身</p><p><code>yarn set version 2.0.0</code><br><code>yarn set version from sources</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/blogImg/20200204.png&quot; alt=&quot;yarn包管理器&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;1-Introduction&quot;&gt;&lt;a href=&quot;#1-Introduction&quot; class=&quot;headerlink&quot; title=&quot;1 - Introduction&quot;&gt;&lt;/a&gt;1 - Introduction&lt;/h1&gt;&lt;p&gt;Yarn 对你的代码来说是一个包管理器， 你可以通过它使用全世界开发者的代码， 或者分享自己的代码。yarn可以快速、安全、可靠地做到这一点，所以你永远不必担心。&lt;/p&gt;
&lt;p&gt;通过Yarn你可以使用其他开发者针对不同问题的解决方案，使自己的开发过程更简单。&lt;/p&gt;
&lt;p&gt;代码通过 包（package） (或者称为 模块（module）) 的方式来共享。 一个包里包含所有需要共享的代码，以及描述包信息的文件，称为 package.json 。&lt;/p&gt;
    
    </summary>
    
      <category term="包管理器" scheme="https://blogs.zhaozf.site/categories/%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8/"/>
    
    
      <category term="yarn" scheme="https://blogs.zhaozf.site/tags/yarn/"/>
    
  </entry>
  
  <entry>
    <title>uni-app 跨平台框架学习笔记【一】</title>
    <link href="https://blogs.zhaozf.site/629227f3/"/>
    <id>https://blogs.zhaozf.site/629227f3/</id>
    <published>2020-01-14T01:43:22.000Z</published>
    <updated>2020-02-14T04:21:45.817Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/blogImg/201001141036.jpg" alt="uni-app学习笔记"></p><p>uni-app 是一个使用 Vue.js 开发所有前端应用的框架，</p><p>开发者编写一套代码，可发布到iOS、Android、H5、</p><p>以及各种小程序（微信/支付宝/百度/头条/QQ/钉钉）等多个平台。</p><p>uni-app 使用vue的语法+小程序的标签和API。功能架构如下图：<br><a id="more"></a></p><p><img src="/assets/blogImg/202001141040.png" alt="uni-app功能框架图"></p><h2 id="uni-app-约定了如下开发规范："><a href="#uni-app-约定了如下开发规范：" class="headerlink" title="uni-app 约定了如下开发规范："></a>uni-app 约定了如下开发规范：</h2><ul><li>页面文件遵循 Vue <a href="https://vue-loader.vuejs.org/zh/spec.html#%E7%AE%80%E4%BB%8B" target="_blank" rel="noopener">单文件组件 (SFC) 规范</a></li><li>组件标签靠近小程序规范，详见<a href="https://uniapp.dcloud.io/component/README" target="_blank" rel="noopener">官网uni-app 组件规范</a></li><li>接口能力（JS API）靠近微信小程序规范，但需将前缀 wx 替换为 uni，详见uni-app接口规范</li><li>数据绑定及事件处理同 Vue.js 规范，同时补充了App及页面的生命周期</li><li>为兼容多端运行，建议使用flex布局进行开发</li></ul><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p>一个uni-app工程，默认包含如下目录及文件：</p><p>┌─components            uni-app组件目录<br>│  └─comp-a.vue         可复用的a组件<br>├─hybrid                存放本地网页的目录<br>├─platforms             存放各平台专用页面的目录<br>├─pages                 业务页面文件存放的目录<br>│  ├─index<br>│  │  └─index.vue       index页面<br>│  └─list<br>│     └─list.vue        list页面<br>├─static                存放应用引用静态资源（如图片、视频等）的目录，注意：静态资源只能存放于此<br>├─wxcomponents          存放小程序组件的目录<br>├─main.js               Vue初始化入口文件<br>├─App.vue               应用配置，用来配置App全局样式以及监听 应用生命周期<br>├─manifest.json         配置应用名称、appid、logo、版本等打包信息<br>└─pages.json            配置页面路由、导航条、选项卡等页面类信息</p><p>注意：<br>    static 目录下的 js 文件不会被编译，如果里面有 es6 的代码，不经过转换直接运行，在手机设备上会报错。<br>    css、less/scss 等资源同样不要放在 static 目录下，建议这些公用的资源放在 common 目录下。</p><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><h3 id="应用生命周期"><a href="#应用生命周期" class="headerlink" title="应用生命周期"></a>应用生命周期</h3><table><thead><tr><th>函数名</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td>onLaunch</td><td style="text-align:center">当uni-app 初始化完成时触发（全局只触发一次）</td></tr><tr><td>onShow</td><td style="text-align:center">当 uni-app 启动，或从后台进入前台显示</td></tr><tr><td>onHide</td><td style="text-align:center">当 uni-app 从前台进入后台</td></tr><tr><td>onError</td><td style="text-align:center">当 uni-app 报错时触发</td></tr><tr><td>onUniNViewMessage</td><td style="text-align:center">对 nvue 页面发送的数据进行监听，可参考 nvue 向 vue 通讯</td></tr></tbody></table><h3 id="页面生命周期"><a href="#页面生命周期" class="headerlink" title="页面生命周期"></a>页面生命周期</h3><ul><li>onLoad    监听页面加载，其参数为上个页面传递的数据，参数类型为Object（用于页面传参）</li><li>onShow    监听页面显示。页面每次出现在屏幕上都触发，包括从下级页面点返回露出当前页面        </li><li>onReady    监听页面初次渲染完成。注意如果渲染速度快，会在页面进入动画完成前触发        </li><li>onHide    监听页面隐藏        </li><li>onUnload    监听页面卸载        </li><li>onResize    监听窗口尺寸变化        </li><li>onPullDownRefresh    监听用户下拉动作，一般用于下拉刷新</li><li>onReachBottom    页面上拉触底事件的处理函数        </li><li>onTabItemTap    点击 tab 时触发，参数为Object，具体见官方文档        </li><li>onShareAppMessage    用户点击右上角分享        </li><li>onPageScroll    监听页面滚动，参数为Object        </li><li>onNavigationBarButtonTap    监听原生标题栏按钮点击事件，参数为Object    </li><li>onBackPress    监听页面返回，返回 event = {from:backbutton、 navigateBack} ，backbutton 表示来源是左上角返回按钮或 android 返回键；navigateBack表示来源是 uni.navigateBack ；详细说明及使用：onBackPress 详解    </li><li>onNavigationBarSearchInputChanged    监听原生标题栏搜索输入框输入内容变化事件    </li><li>onNavigationBarSearchInputConfirmed    监听原生标题栏搜索输入框搜索事件，用户点击软键盘上的“搜索”按钮时触发。    </li><li>onNavigationBarSearchInputClicked    监听原生标题栏搜索输入框点击事件</li></ul><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><p>uni-app页面路由为框架统一管理，开发者需要在pages.json里配置每个路由页面的路径及页面样式。类似小程序在app.json中配置页面路由一样。所以 uni-app 的路由用法与 Vue Router 不同，如仍希望采用 Vue Router 方式管理路由，可在插件市场搜索 Vue-Router。</p><h3 id="路由跳转"><a href="#路由跳转" class="headerlink" title="路由跳转"></a>路由跳转</h3><p>uni-app 有两种页面路由跳转方式：使用navigator组件跳转、调用API跳转。</p><h2 id="运行环境判断"><a href="#运行环境判断" class="headerlink" title="运行环境判断"></a>运行环境判断</h2><p>开发环境和生产环境<br>uni-app 可通过 process.env.NODE_ENV 判断当前环境是开发环境还是生产环境。一般用于连接测试服务器或生产服务器的动态切换。</p><p>cli模式下，是通行的编译环境处理方式。<br><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(process.<span class="keyword">env</span>.NODE_ENV === <span class="string">'development'</span>)&#123;</span><br><span class="line">    console.<span class="keyword">log</span>(<span class="string">'开发环境'</span>)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    console.<span class="keyword">log</span>(<span class="string">'生产环境'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="页面样式与布局"><a href="#页面样式与布局" class="headerlink" title="页面样式与布局"></a>页面样式与布局</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/blogImg/201001141036.jpg&quot; alt=&quot;uni-app学习笔记&quot;&gt;&lt;/p&gt;
&lt;p&gt;uni-app 是一个使用 Vue.js 开发所有前端应用的框架，&lt;/p&gt;
&lt;p&gt;开发者编写一套代码，可发布到iOS、Android、H5、&lt;/p&gt;
&lt;p&gt;以及各种小程序（微信/支付宝/百度/头条/QQ/钉钉）等多个平台。&lt;/p&gt;
&lt;p&gt;uni-app 使用vue的语法+小程序的标签和API。功能架构如下图：&lt;br&gt;
    
    </summary>
    
      <category term="跨平台框架" scheme="https://blogs.zhaozf.site/categories/%E8%B7%A8%E5%B9%B3%E5%8F%B0%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="uni-app" scheme="https://blogs.zhaozf.site/tags/uni-app/"/>
    
      <category term="微信小程序" scheme="https://blogs.zhaozf.site/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>身份证最后一位校验算法(ISO 7064:1983.MOD 11-2)</title>
    <link href="https://blogs.zhaozf.site/1bca26fc/"/>
    <id>https://blogs.zhaozf.site/1bca26fc/</id>
    <published>2019-12-18T03:35:20.000Z</published>
    <updated>2019-12-20T04:06:12.608Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/blogImg/201912181143.jpg" alt></p><p>在生活中，有一些游戏账号的实名认证和申请<br>或者某些网站的注册会用到身份证号。</p><p>当输入错误的身份证号时会提示出错<br>给人的感觉是他们真的能识别身份证信息一样。<br>当然，除了一些政府、银行、证券、保险等行业接入的是NCIIC（全国公民身份证号码查询服务中心）<br>其他的大多数都是根据最后一位校验位来判断该身份证号码是否有效。</p><a id="more"></a><p>目前国内最权威的渠道肯定是全国公民身份证号码查询服务中心，简称NCIIC，<br>也就是很多实名认证服务商所声称采用的公安部接口。<br>实际上由于公安网跟外网是隔绝的，所以公安部的接口绝对是不会直接对外的提供的。<br>NCIIC是隶属于公安部的一个事业单位，可以直连国家人口基础信息库，<br>其数据权威性主要表现在：数据更新准确，公民的出生、死亡、 姓名变更等信息都会第一时间更新，<br>可以满足政府、金融等机构的对数据质量的高要求。<br>所以NCIIC的授权范围，也主要集中在政府、银行、证券、保险等行业。</p><h4 id="结构和形式"><a href="#结构和形式" class="headerlink" title="结构和形式"></a>结构和形式</h4><p>1．号码的结构<br>　　公民身份号码是特征组合码，由十七位数字本体码和一位校验码组成。排列顺序从左至右依次为：六位数字地址码，八位数字出生日期码，三位数字顺序码和一位数字校验码。<br>2．地址码<br>　　表示编码对象常住户口所在县（县级市、旗、区）的行政区划代码，按GB/T2260的规定执行。<br>3．出生日期码<br>　　表示编码对象出生的年、月、日，按GB/T7408的规定执行，年、月、日代码之间不用分隔符。<br>4．顺序码<br>　　表示在同一地址码所标识的区域范围内，对同年、同月、同日出生的人编定的顺序号，顺序码的奇数分配给男性，偶数分配给女性。<br>5．校验码<br>　　根据前面十七位数字码，按照ISO 7064:1983.MOD 11-2校验码计算出来的检验码。</p><p>地址码：<br>华北地区：北京市|110000，天津市|120000，河北省|130000，山西省|140000，内蒙古自治区|150000<br>东北地区： 辽宁省|210000，吉林省|220000，黑龙江省|230000<br>华东地区： 上海市|310000，江苏省|320000，浙江省|330000，安徽省|340000，福建省|350000，江西省|360000，山东省|370000<br>华中地区： 河南省|410000，湖北省|420000，湖南省|430000<br>华南地区：广东省|440000，广西壮族自治区|450000，海南省|460000<br>西南地区：重庆市|500000，四川省|510000，贵州省|520000，云南省|530000，西藏自治区|540000<br>西北地区： 陕西省|610000，甘肃省|620000，青海省|630000，宁夏回族自治区|640000，新疆维吾尔自治区|650000<br>特别地区：台湾地区(886)|830000，香港特别行政区（852)|810000，澳门特别行政区（853)|820000</p><p>中国大陆居民身份证号码中的地址码的数字编码规则为：<br>第一、二位表示省（自治区、直辖市、特别行政区）。<br>第一位数字是以前的大区制代码。第二位是大区所在省市编码。全国共分为6个大区：华北局（1）、东北局（2）、华东局（3）、中南局（4）、西南局（5）和西北局（6）<br>第三、四位表示市（地级市、自治州、盟及国家直辖市所属市辖区和县的汇总码）。其中，01-20，51-70表示省直辖市；21-50表示地区（自治州、盟）。<br>第五、六位表示县（市辖区、县级市、旗）。01-18表示市辖区或地区（自治州、盟）辖县级市；21-80表示县（旗）；81-99表示省直辖县级市。</p><p>其中第十七位奇数分给男性，偶数分给女性。<br>作为尾号的校验码，是由号码编制单位按统一的公式计算出来的，如果某人的尾号是0-9，都不会出现X，但如果尾号是10，那么就得用X来代替</p><h4 id="ISO-7064-1983-MOD-11-2计算方法"><a href="#ISO-7064-1983-MOD-11-2计算方法" class="headerlink" title="ISO 7064:1983.MOD 11-2计算方法"></a>ISO 7064:1983.MOD 11-2计算方法</h4><p>1、将前面的身份证号码17位数分别乘以不同的系数。从第一位到第十七位的系数分别为：7－9－10－5－8－4－2－1－6－3－7－9－10－5－8－4－2。<br>2、将这17位数字和系数相乘的结果相加。<br>3、用加出来和除以11，看余数是多少？<br>4、余数只可能有0－1－2－3－4－5－6－7－8－9－10这11个数字。其分别对应的最后一位身份证的号码为1－0－X －9－8－7－6－5－4－3－2。(即余数0对应1，余数1对应0，余数2对应X…)<br>5、通过上面得知如果余数是3，就会在身份证的第18位数字上出现的是9。如果对应的数字是2，身份证的最后一位号码就是罗马数字X。<br>例如：某男性的身份证号码为【53010219200508011X】， 我们看看这个身份证是不是符合计算规则的身份证。<br>首先我们得出前17位的乘积和【<code>(5*7)+(3*9)+(0*10)+(1*5)+(0*8)+(2*4)+(1*2)+(9*1)+(2*6)+(0*3)+(0*7)+(5*9)+(0*10)+(8*5)+(0*8)+(1*4)+(1*2)</code>】是189，然后用189除以11得出的结果是189÷11=17余下2，187÷11=17，还剩下2不能被除尽，也就是说其余数是2。最后通过对应规则就可以知道余数2对应的检验码是X。所以，可以判定这是一个正确的身份证号码。</p><p>JavaScript代码如下：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">//验证方法</span><br><span class="line">function verifyCode(id)&#123;</span><br><span class="line"> <span class="keyword">if</span>(id.<span class="built_in">length</span> !=<span class="number">18</span> )</span><br><span class="line">  <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line"> <span class="comment">/*1、从第一位到第十七位的系数分别为：</span></span><br><span class="line"><span class="comment">   7,9,10,5,8,4,2,1,6,3,7,9,10,5,8,4,2</span></span><br><span class="line"><span class="comment">   将这17位数字和系数相乘的结果相加。 */</span></span><br><span class="line"> <span class="built_in">var</span> arr = [<span class="number">7</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">2</span>];</span><br><span class="line"> <span class="built_in">var</span> <span class="built_in">sum</span> = <span class="number">0</span>;</span><br><span class="line"> <span class="keyword">for</span>(<span class="built_in">var</span> i=<span class="number">0</span>; i&lt;arr.<span class="built_in">length</span>; i++)&#123;</span><br><span class="line">  <span class="built_in">sum</span> += parseInt(id.charAt(i)) * arr[i];</span><br><span class="line"> &#125;</span><br><span class="line"> //<span class="number">2</span>、用加出来和除以<span class="number">11</span>，看余数，</span><br><span class="line"> <span class="built_in">var</span> c = sum%<span class="number">11</span>;</span><br><span class="line"> //<span class="number">3</span>、分别对应的最后一位身份证的号码为：<span class="number">1</span>－<span class="number">0</span>－X－<span class="number">9</span>－<span class="number">8</span>－<span class="number">7</span>－<span class="number">6</span>－<span class="number">5</span>－<span class="number">4</span>－<span class="number">3</span>－<span class="number">2</span></span><br><span class="line"> <span class="built_in">var</span> ch = [‘<span class="number">1</span>‘, ‘<span class="number">0</span>‘, ‘X‘, ‘<span class="number">9</span>‘, ‘<span class="number">8</span>‘, ‘<span class="number">7</span>‘, ‘<span class="number">6</span>‘, ‘<span class="number">5</span>‘, ‘<span class="number">4</span>‘, ‘<span class="number">3</span>‘, ‘<span class="number">2</span>‘];</span><br><span class="line"> <span class="built_in">var</span> code = ch[c];</span><br><span class="line"> <span class="built_in">var</span> <span class="built_in">last</span> = id.charAt(<span class="number">17</span>);</span><br><span class="line"> <span class="built_in">last</span> = <span class="built_in">last</span>==‘x‘ ? ‘X‘: <span class="built_in">last</span>;</span><br><span class="line"> <span class="built_in">return</span> <span class="built_in">last</span> == code;</span><br><span class="line"> &#125;</span><br><span class="line">```</span><br></pre></td></tr></table></figure><p>var id = “34052419800101001X”;<br> console.log(verifyCode(id));<br><code>`</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/blogImg/201912181143.jpg&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;在生活中，有一些游戏账号的实名认证和申请&lt;br&gt;或者某些网站的注册会用到身份证号。&lt;/p&gt;
&lt;p&gt;当输入错误的身份证号时会提示出错&lt;br&gt;给人的感觉是他们真的能识别身份证信息一样。&lt;br&gt;当然，除了一些政府、银行、证券、保险等行业接入的是NCIIC（全国公民身份证号码查询服务中心）&lt;br&gt;其他的大多数都是根据最后一位校验位来判断该身份证号码是否有效。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="https://blogs.zhaozf.site/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://blogs.zhaozf.site/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="身份证校验" scheme="https://blogs.zhaozf.site/tags/%E8%BA%AB%E4%BB%BD%E8%AF%81%E6%A0%A1%E9%AA%8C/"/>
    
  </entry>
  
</feed>
