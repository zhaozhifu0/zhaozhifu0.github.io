<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>无聊才读书 | 无聊才读书的个人网站</title>
  
  <subtitle>道虽迩，不行不至；事虽小，不为不成。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blogs.zhaozf.site/"/>
  <updated>2021-03-31T14:36:32.668Z</updated>
  <id>https://blogs.zhaozf.site/</id>
  
  <author>
    <name>无聊才读书</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【Python】爬取必应每日图片并实现Windows壁纸自动切换</title>
    <link href="https://blogs.zhaozf.site/f48b09c5/"/>
    <id>https://blogs.zhaozf.site/f48b09c5/</id>
    <published>2021-03-31T14:15:33.000Z</published>
    <updated>2021-03-31T14:36:32.668Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/blogImg/202103312233.jpg"></p><p>下面用python脚本抓取必应每日图片，并实现桌面壁纸的每天自动切换。</p><a id="more"></a><p><strong>思路整理</strong> </p><p>**<br>**</p><p>1、通过网页，获取图片地址</p><p>2、保存图片到绝对路径</p><p>3、设置该绝对路径所指向的图片为壁纸</p><p>4、批处理壁纸自动切换</p><p>需要用到的模块如下：</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> os.<span class="built_in">path</span></span><br><span class="line"><span class="keyword">import</span> ctypes</span><br></pre></td></tr></table></figure><p><strong>第一、</strong></p><p><strong>获取图片地址</strong> </p><p>这个函数主要通过requests模块，根据必应的网页地址，获取到当日图片的最终img地址。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 请求网页，跳转到最终 img 地址</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_img_url</span>(<span class="params">raw_img_url=<span class="string">&quot;https://area.sinaapp.com/bingImg/&quot;</span></span>):</span></span><br><span class="line">    r = requests.get(raw_img_url)</span><br><span class="line">    img_url = r.url  <span class="comment"># 得到图片文件的网址</span></span><br><span class="line">    print(<span class="string">&#x27;img_url:&#x27;</span>, img_url)</span><br><span class="line">    <span class="keyword">return</span> img_url</span><br></pre></td></tr></table></figure><p><strong>第二、</strong></p><p><strong>保存图片到本地</strong> </p><p>这个函数的作用就是把图片保存到你自己设置的一个目录下，并返回当前目录的绝对地址。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_img</span>(<span class="params">img_url, dirname</span>):</span></span><br><span class="line">    <span class="comment"># 保存图片到磁盘文件夹dirname中</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(dirname):</span><br><span class="line">            print(<span class="string">&#x27;文件夹&#x27;</span>, dirname, <span class="string">&#x27;不存在，重新建立&#x27;</span>)</span><br><span class="line">            <span class="comment"># os.mkdir(dirname)</span></span><br><span class="line">            os.makedirs(dirname)</span><br><span class="line">        <span class="comment"># 获得图片文件名，包括后缀</span></span><br><span class="line">        basename = <span class="string">&quot;bing.jpg&quot;</span></span><br><span class="line">        <span class="comment"># 拼接目录与文件名，得到图片路径</span></span><br><span class="line">        filepath = os.path.join(dirname, basename)</span><br><span class="line">        <span class="comment"># 下载图片，并保存到文件夹中</span></span><br><span class="line">        urllib.request.urlretrieve(img_url, filepath)</span><br><span class="line">    <span class="keyword">except</span> IOError <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">&#x27;文件操作失败&#x27;</span>, e)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">&#x27;错误 ：&#x27;</span>, e)</span><br><span class="line">    print(<span class="string">&quot;Save&quot;</span>, filepath, <span class="string">&quot;successfully!&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> filepath</span><br></pre></td></tr></table></figure><p><strong>第三、</strong></p><p><strong>设置该绝对路径所指向的图片为壁纸</strong> </p><p>通过之前获得的图片所在的绝对路径，把该图片设置为桌面壁纸。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">def</span> set_img_as_wallpaper(filepath):</span><br><span class="line">    <span class="attribute">ctypes</span>.windll.user<span class="number">32</span>.SystemParametersInfoW(<span class="number">20</span>, <span class="number">0</span>, filepath, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>**第四、<br>**</p><p><strong>运行代码的main函数</strong> </p><p>**<br>**</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def main<span class="literal">()</span>:</span><br><span class="line">    dirname = <span class="string">&quot;D:\\bingImg&quot;</span>  # 图片要被保存在的位置</span><br><span class="line">    img_url = get<span class="constructor">_img_url()</span></span><br><span class="line">    filepath = save<span class="constructor">_img(<span class="params">img_url</span>, <span class="params">dirname</span>)</span>  # 图片文件的路径</span><br><span class="line">    set<span class="constructor">_img_as_wallpaper(<span class="params">filepath</span>)</span></span><br></pre></td></tr></table></figure><p>运行</p><p>**第五、<br>**</p><p><strong>批处理自动更换壁纸</strong> </p><p>此时，可以在python脚本的同一目录下创建名为py_bingying.bat的批处理文件，批处理内容如下：</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@echo <span class="literal">off</span></span><br><span class="line">del g:<span class="string">\bingImg\*.jpg</span></span><br><span class="line">python SetBingImgAsWallpaper.py</span><br></pre></td></tr></table></figure><p>第二行在运行python脚本前先删除前一天下载的必应图片，这样就实现了旧壁纸的每日清理，最大限度节省了存储空间。第三行为运行上面的python脚本。</p><p>如何实现壁纸的自动切换呢，这里采用开机运行上面的批处理程序的方法。</p><p>复制上面创建的批处理文件，到下方目录下，右键-粘贴为快捷方式。这样就实现了开机启动批处理程序，自动清除和更新壁纸。</p><p>C:\User\yourname\AppData\Roaming\Microsoft\Windows\开始菜单\程序\启动</p><p>每次开机都执行一遍更换壁纸的操作还不够完美的话，可以用Windows任务计划程序来添加任务，设置每天指定时间点运行批处理程序。</p><p>完整代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os.path</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_img</span>(<span class="params">img_url, dirname</span>):</span></span><br><span class="line"></span><br><span class="line">  \<span class="comment"># 保存图片到磁盘文件夹dirname中</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(dirname):</span><br><span class="line"></span><br><span class="line">​      print(<span class="string">&#x27;文件夹&#x27;</span>, dirname, <span class="string">&#x27;不存在，重新建立&#x27;</span>)</span><br><span class="line"></span><br><span class="line">​      \<span class="comment"># os.mkdir(dirname)</span></span><br><span class="line"></span><br><span class="line">​      os.makedirs(dirname)</span><br><span class="line"></span><br><span class="line">​    \<span class="comment"># 获得图片文件名，包括后缀</span></span><br><span class="line"></span><br><span class="line">​    basename = <span class="string">&quot;bing.jpg&quot;</span></span><br><span class="line"></span><br><span class="line">​    \<span class="comment"># 拼接目录与文件名，得到图片路径</span></span><br><span class="line"></span><br><span class="line">​    filepath = os.path.join(dirname, basename)</span><br><span class="line"></span><br><span class="line">​    \<span class="comment"># 下载图片，并保存到文件夹中</span></span><br><span class="line"></span><br><span class="line">​    urllib.request.urlretrieve(img_url, filepath)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">except</span> IOError <span class="keyword">as</span> e:</span><br><span class="line"></span><br><span class="line">​    print(<span class="string">&#x27;文件操作失败&#x27;</span>, e)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line"></span><br><span class="line">​    print(<span class="string">&#x27;错误 ：&#x27;</span>, e)</span><br><span class="line"></span><br><span class="line">  print(<span class="string">&quot;Save&quot;</span>, filepath, <span class="string">&quot;successfully!&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> filepath</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 请求网页，跳转到最终 img 地址</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_img_url</span>(<span class="params">raw_img_url=<span class="string">&quot;https://area.sinaapp.com/bingImg/&quot;</span></span>):</span></span><br><span class="line"></span><br><span class="line">  r = requests.get(raw_img_url)</span><br><span class="line"></span><br><span class="line">  img_url = r.url <span class="comment"># 得到图片文件的网址</span></span><br><span class="line"></span><br><span class="line">  print(<span class="string">&#x27;img_url:&#x27;</span>, img_url)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> img_url</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 设置图片绝对路径 filepath 所指向的图片为壁纸</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_img_as_wallpaper</span>(<span class="params">filepath</span>):</span></span><br><span class="line"></span><br><span class="line">  ctypes.windll.user32.SystemParametersInfoW(<span class="number">20</span>, <span class="number">0</span>, filepath, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line"></span><br><span class="line">  dirname = <span class="string">&quot;D:\\bingImg&quot;</span> <span class="comment"># 图片要被保存在的位置</span></span><br><span class="line"></span><br><span class="line">  img_url = get_img_url()</span><br><span class="line"></span><br><span class="line">  filepath = save_img(img_url, dirname) <span class="comment"># 图片文件的路径</span></span><br><span class="line"></span><br><span class="line">  set_img_as_wallpaper(filepath)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">  main()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/blogImg/202103312233.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;下面用python脚本抓取必应每日图片，并实现桌面壁纸的每天自动切换。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://blogs.zhaozf.site/categories/Python/"/>
    
    
      <category term="爬取必应每日一图" scheme="https://blogs.zhaozf.site/tags/%E7%88%AC%E5%8F%96%E5%BF%85%E5%BA%94%E6%AF%8F%E6%97%A5%E4%B8%80%E5%9B%BE/"/>
    
      <category term="bing 必应" scheme="https://blogs.zhaozf.site/tags/bing-%E5%BF%85%E5%BA%94/"/>
    
      <category term="Windows壁纸" scheme="https://blogs.zhaozf.site/tags/Windows%E5%A3%81%E7%BA%B8/"/>
    
  </entry>
  
  <entry>
    <title>基于 Docker 容器部署discuz q论坛程序</title>
    <link href="https://blogs.zhaozf.site/1e39b68a/"/>
    <id>https://blogs.zhaozf.site/1e39b68a/</id>
    <published>2021-03-06T02:12:01.000Z</published>
    <updated>2021-03-06T04:21:14.022Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/blogImg/202103061218.jpg"></p><h4 id="操作场景"><a href="#操作场景" class="headerlink" title="操作场景"></a>操作场景</h4><p>本文档将指导您如何在已安装 docker-ce 运行环境的 Linux 服务器上安装部署 Discuz! Q。</p><blockquote><p>TIP</p><p>如果您的服务器还未安装 docker-ce 运行环境，腾讯云提供了 <a href="https://mirrors.tencent.com/docker-ce/">docker 镜像 (opens new window)</a>，您可直接下载安装。</p></blockquote><h4 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h4><p>已成功登录 Linux 服务器。</p><h4 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h4><h4 id="步骤一：安装-Discuz-Q"><a href="#步骤一：安装-Discuz-Q" class="headerlink" title="步骤一：安装 Discuz! Q"></a>步骤一：安装 Discuz! Q</h4><a id="more"></a><ol><li>在终端中，请输入以下命令。docker 将会自动下载并运行最新版本的 Discuz! Q。如下所示：</li></ol><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 80:80 -p 443:443 ccr.ccs.tencentyun.com/discuzq/dzq:latest</span><br></pre></td></tr></table></figure><blockquote><p>WARNING</p><ul><li>容器基于 Ubuntu 18.04，其中已安装 Nginx 1.14, PHP 7.2, MySQL 5.7 和所有的相关依赖，并且已经完成 Web 服务器配置和计划任务配置。</li><li>安装时警告 <code>WARNING: IPv4 forwarding is disabled. Networking will not work.</code>。可使用命令 <code>vim /etc/sysctl.conf</code> 编辑配置文件。修改 <code>net.ipv4.ip_forward</code>字段值为 <code>1</code> 开启转发并使用命令 <code>systemctl restart network</code> 重启网络服务。</li><li>以上命令用于快速启动并测试 Discuz! Q，数据库和站点数据都将保存在容器内部，容器被删除将会造成数据丢失。</li><li>如果您想基于容器长期运行Discuz! Q，建议将数据库和站点数据保存于容器外部，请参考<a href="https://discuz.com/docs/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98.html#%E5%AE%B9%E5%99%A8%E7%9A%84%E6%9B%B4%E5%A4%9A%E9%85%8D%E7%BD%AE%E8%AF%B4%E6%98%8E">容器的更多配置说明进行配置 (opens new window)</a>。</li></ul></blockquote><h4 id="步骤二：初始化安装-Discuz-Q"><a href="#步骤二：初始化安装-Discuz-Q" class="headerlink" title="步骤二：初始化安装 Discuz! Q"></a>步骤二：初始化安装 Discuz! Q</h4><ol><li>打开本地浏览器，访问 <code>http://&lt;服务器外网 IP 地址&gt;/install</code> 并配置网站相关信息。如下图所示：</li></ol><p><img src="/assets/blogImg/202103061017.png"></p><ul><li><strong>站点名称</strong>：请输入您的站点名称信息，可自定义。</li><li><strong>MySQL Host</strong>：请输入您的 MySQL 服务器地址，如您使用 docker 创建的本地数据库，请输入<code>127.0.0.1</code>即可。</li><li><strong>MySQL 数据库</strong>：请输入您的数据库名称。如您使用 docker 创建的本地数据库，请输入<code>root</code>即可。</li><li><strong>MySQL 用户名</strong>：请输入您的数据库用户名。如您使用 docker 创建的本地数据库，请输入<code>root</code>即可。</li><li><strong>MySQL 密码</strong>：如您使用 docker 创建的本地数据库，请输入<code>root</code>即可。</li><li><strong>表前缀</strong>：可选，可自定义数据库表前缀名称。默认不填。</li><li><strong>管理员 用户名</strong>：请输入您 Discuz! Q 站点的管理员用户名。</li><li><strong>管理员 密码</strong>：请输入您 Discuz! Q 站点的管理员密码。</li><li><strong>管理员 确认密码</strong>：请再次输入您 Discuz! Q 站点的管理员密码。</li></ul><blockquote><p>TIP</p><ul><li>如果您想基于容器长期运行 Discuz! Q，建议将数据库和站点数据保存于容器外部，请参考 <a href="https://discuz.com/docs/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98.html#%E5%AE%B9%E5%99%A8%E7%9A%84%E6%9B%B4%E5%A4%9A%E9%85%8D%E7%BD%AE%E8%AF%B4%E6%98%8E">容器的更多配置说明进行配置 (opens new window)</a>。</li></ul></blockquote><h4 id="1-1-容器的更多配置说明"><a href="#1-1-容器的更多配置说明" class="headerlink" title="1.1 容器的更多配置说明"></a>1.1 容器的更多配置说明</h4><p><strong>如何将数据保存到容器外部</strong> 本容器支持以下三个外部映射目录：</p><ul><li>数据库文件，映射到 <code>/var/lib/mysqldb/</code>。</li><li>Discuz! Q的配置与存储目录，映射到 <code>/var/lib/discuz/</code>。</li><li>SSL证书文件，映射到 <code>/etc/nginx/certs/</code>，其中<strong>要求</strong>存在两个文件 <code>discuz.crt</code> 和 <code>discuz.key</code>。如果不使用SSL协议，请不要配置此目录，并且不映射 443 端口。</li></ul><p>因此，如果如果您想长期使用容器来运行 Discuz! Q，建议在启动容器的时候加入这三个参数进行映射。</p><p>例如数据库文件，在本地(宿主机)上，想保存到 <code>/data/mysql-data</code>，Discuz! Q的运行数据，保存到 <code>/data/discuz</code>，SSL证书文件放在 <code>/data/certs/discuz.crt</code> 和 <code>/data/certs/discuz.key</code>，同时不想对外开放 80 端口，那启动容器的命令就是：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --restart=always \</span><br><span class="line">  -p 443:443 \</span><br><span class="line">  -v /data/discuz:/var/lib/discuz \</span><br><span class="line">  -v /data/mysql-data:/var/lib/mysqldb \</span><br><span class="line">  -v /data/certs:/etc/nginx/certs \</span><br><span class="line">  ccr.ccs.tencentyun.com/discuzq/dzq:latest</span><br></pre></td></tr></table></figure><p>启动之后，访问 <code>https://&lt;域名&gt;/install</code> 就可以开始安装，并正常使用。</p><blockquote><p>WARNING</p><p>请一定要访问外部用户将要访问的协议( <code>http://</code> 或 <code>https://</code> ) 加 <strong>域名</strong> 加 <code>/install</code> 进行安装，否则会导致自动获取的站点 URL 配置不正确，站点工作不正常。</p></blockquote><h4 id="1-2-基于容器的升级"><a href="#1-2-基于容器的升级" class="headerlink" title="1.2 基于容器的升级"></a>1.2 基于容器的升级</h4><p>只要将数据保存到了容器外部，容器就可以升级。在升级前，要将原容器先停止并删除(执行此命令时，一定要确保自己已经将数据保存到了容器外部)。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker stop &lt;容器 ID&gt;</span><br><span class="line">docker rm &lt;容器 ID&gt;</span><br></pre></td></tr></table></figure><p>其中的<code>&lt;容器 ID&gt;</code>，可以通过 <code>docker ps</code> 命令看到。 然后用以下命令下载最新版本镜像：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull ccr.ccs.tencentyun.com/discuzq/dzq:latest</span><br></pre></td></tr></table></figure><p>再使用上次启动相同的命令重新启动即可。</p><p>如果需要执行升级文档中要求的其它升级命令，请先登录容器</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it &lt;容器 ID&gt; /bin/bash</span><br></pre></td></tr></table></figure><p>然后就可以执行升级文档中要求的相关的命令，例如：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /var/www/discuz</span><br><span class="line">php disco migrate --force</span><br></pre></td></tr></table></figure><p><strong>基于容器的一些其它配置</strong></p><ul><li>如果您想对 mysql 进行管理，可选择以下两种方法之一：<ul><li>登录进容器，用 mysql 命令进行管理 <code>docker exec -it &lt;容器id&gt; /bin/bash</code>。</li><li>将 3306 端口暴露到外面，通过外部工具连上去进行管理。在启动时，加一个 <code>-p 3306:3306</code>。</li></ul></li><li>如果您想通过外部的负载均衡进行 SSL 卸载，可开放容器的 80 端口，不开放 443 端口即可。</li><li>Nginx 的配置文件，位于容器的  <code>/etc/nginx/nginx.conf</code> 下，如果需要修改，可通过 <code>-v</code>映射自己的配置文件，覆盖这个文件。<ul><li>例如您本地的配置文件为 <code>/data/nginx.conf</code> ，可以在上面的启动命令中，加入映射： <code>-v /data/nginx.conf:/etc/nginx/nginx.conf</code>，即可覆盖系统原来内置的 Nginx 配置文件。</li></ul></li><li><code>php-fpm</code> 的配置文件，位于容器的 <code>/etc/php/7.2/fpm/pool.d/www.conf</code>，也可同样映射修改。</li><li>控制 PHP 上传大小的文件，位于容器的 <code>/etc/php/7.2/fpm/conf.d/30-upload-size.ini</code>, 当前设置为20M，可同样映射修改。</li></ul><blockquote><p>TIP</p><p><strong>基于自己的服务器部署docker 启动的命令：</strong></p><p>docker run -d –restart=always <br>  -p 443:443 <br>  -p 3307:3306 <br>  -v /data/nginx.conf:/etc/nginx/nginx.conf <br>  -v /data/discuz:/var/lib/discuz <br>  -v /data/mysql-data:/var/lib/mysqldb <br>  -v /data/certs:/etc/nginx/certs <br>  ccr.ccs.tencentyun.com/discuzq/dzq:latest</p></blockquote><ol start="2"><li>单击【安装】。即可完成 DIscuz！Q 的安装部署。</li></ol><h4 id="步骤三：系统管理与配置"><a href="#步骤三：系统管理与配置" class="headerlink" title="步骤三：系统管理与配置"></a>步骤三：系统管理与配置</h4><p>安装完成后，您可以访问 <code>http://&lt;服务器外网 IP 地址&gt;/admin</code> 进入后台，输入在安装的时候设置的管理员账号和密码，进行管理与配置。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/blogImg/202103061218.jpg&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;操作场景&quot;&gt;&lt;a href=&quot;#操作场景&quot; class=&quot;headerlink&quot; title=&quot;操作场景&quot;&gt;&lt;/a&gt;操作场景&lt;/h4&gt;&lt;p&gt;本文档将指导您如何在已安装 docker-ce 运行环境的 Linux 服务器上安装部署 Discuz! Q。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;TIP&lt;/p&gt;
&lt;p&gt;如果您的服务器还未安装 docker-ce 运行环境，腾讯云提供了 &lt;a href=&quot;https://mirrors.tencent.com/docker-ce/&quot;&gt;docker 镜像 (opens new window)&lt;/a&gt;，您可直接下载安装。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;前提条件&quot;&gt;&lt;a href=&quot;#前提条件&quot; class=&quot;headerlink&quot; title=&quot;前提条件&quot;&gt;&lt;/a&gt;前提条件&lt;/h4&gt;&lt;p&gt;已成功登录 Linux 服务器。&lt;/p&gt;
&lt;h4 id=&quot;操作步骤&quot;&gt;&lt;a href=&quot;#操作步骤&quot; class=&quot;headerlink&quot; title=&quot;操作步骤&quot;&gt;&lt;/a&gt;操作步骤&lt;/h4&gt;&lt;h4 id=&quot;步骤一：安装-Discuz-Q&quot;&gt;&lt;a href=&quot;#步骤一：安装-Discuz-Q&quot; class=&quot;headerlink&quot; title=&quot;步骤一：安装 Discuz! Q&quot;&gt;&lt;/a&gt;步骤一：安装 Discuz! Q&lt;/h4&gt;
    
    </summary>
    
      <category term="CentOS" scheme="https://blogs.zhaozf.site/categories/CentOS/"/>
    
    
      <category term="discuz Q" scheme="https://blogs.zhaozf.site/tags/discuz-Q/"/>
    
      <category term="Docker" scheme="https://blogs.zhaozf.site/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker 搭建 Jenkins</title>
    <link href="https://blogs.zhaozf.site/770a69f8/"/>
    <id>https://blogs.zhaozf.site/770a69f8/</id>
    <published>2020-11-29T13:39:49.000Z</published>
    <updated>2020-11-29T14:39:23.035Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://camo.githubusercontent.com/a5004ae5bffb9a59384514fd88d3f18c47e1e0373bfda94a18b422e4a164d399/68747470733a2f2f6a656e6b696e732e696f2f73697465732f64656661756c742f66696c65732f6a656e6b696e735f6c6f676f2e706e67"></p><h2 id="1-安装-Docker"><a href="#1-安装-Docker" class="headerlink" title="1.安装 Docker"></a>1.安装 Docker</h2><h3 id="Docker-简介"><a href="#Docker-简介" class="headerlink" title="Docker 简介"></a>Docker 简介</h3><p><a href="https://www.docker.com/community-edition">Docker CE</a> 是一个开源的应用级别的虚拟化工具，可以将任何应用包装在”[LXC容器](Docker CE](<a href="https://www.docker.com/community-edition">https://www.docker.com/community-edition</a>) 是一个开源的应用级别的虚拟化工具，可以将任何应用包装在”[LXC容器)”中运行。</p><blockquote><p>Linux 容器：Linux Containers</p></blockquote><a id="more"></a><h3 id="安装-curl-工具"><a href="#安装-curl-工具" class="headerlink" title="安装 curl 工具"></a>安装 curl 工具</h3><p>使用 [APT] 包管理工具安装 [cURL]：</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt <span class="meta">update</span> <span class="variable">&amp;&amp;</span> apt install -y curl</span><br></pre></td></tr></table></figure><blockquote><p>APT: Debian Linux 的默认包管理工具</p></blockquote><blockquote><p>cURL: 最常用的命令行文件传输工具</p></blockquote><h3 id="安装-Docker"><a href="#安装-Docker" class="headerlink" title="安装 Docker"></a>安装 Docker</h3><p>官方已经给出了适合 Linux 平台的自动安装脚本。因此想要安装 Docker，只需要运行下面的命令：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL <span class="keyword">https</span>://<span class="built_in">get</span>.docker.com | bash -s docker <span class="comment">--mirror Aliyun</span></span><br></pre></td></tr></table></figure><p>[?] 在上面的命令中，我们添加了[参数] <code>--mirror</code> 以使用[国内的安装包镜像]。</p><blockquote><p>–mirror Aliyun</p></blockquote><blockquote><p>官方脚本支持的镜像参数有: Aliyun、AzureChinaCloud</p></blockquote><blockquote><p>curl -fsSL <a href="https://get.docker.com/">https://get.docker.com</a> | bash -s docker –mirror Aliyun</p></blockquote><h2 id="2-添加-Docker-Hub-镜像加速"><a href="#2-添加-Docker-Hub-镜像加速" class="headerlink" title="2.添加 Docker Hub 镜像加速"></a>2.添加 Docker Hub 镜像加速</h2><p>您可以通过修改 daemon.json 配置文件来使用 Docker Hub 加速服务。</p><h3 id="创建-daemon-json-文件"><a href="#创建-daemon-json-文件" class="headerlink" title="创建 daemon.json 文件"></a>创建 daemon.json 文件</h3><p>请在 <code>/etc/docker</code> 目录下创建 <em>daemon.json</em>。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch <span class="regexp">/etc/</span>docker/daemon.json</span><br></pre></td></tr></table></figure><h3 id="编辑-daemon-json-文件"><a href="#编辑-daemon-json-文件" class="headerlink" title="编辑 daemon.json 文件"></a>编辑 daemon.json 文件</h3><p><em>编辑 /etc/docker/daemon.json</em>，添加镜像服务地址。腾讯云镜像的配置如下：</p><h5 id="示例代码：-etc-docker-daemon-json"><a href="#示例代码：-etc-docker-daemon-json" class="headerlink" title="示例代码：/etc/docker/daemon.json"></a>示例代码：/etc/docker/daemon.json</h5><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://mirror.ccs.tencentyun.com&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="重新启动-Docker"><a href="#重新启动-Docker" class="headerlink" title="重新启动 Docker"></a>重新启动 Docker</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">systemctl daemon-reload</span></span><br><span class="line"><span class="attribute">systemctl restart docker</span></span><br></pre></td></tr></table></figure><h2 id="3-安装-Jenkins"><a href="#3-安装-Jenkins" class="headerlink" title="3.安装 Jenkins"></a>3.安装 Jenkins</h2><h3 id="Jenkins-简介"><a href="#Jenkins-简介" class="headerlink" title="Jenkins 简介"></a>Jenkins 简介</h3><p><a href="https://jenkins.io/">Jenkins</a> 是一个开源软件项目，是基于 Java 开发的一种持续集成工具，用于监控持续重复的工作，旨在提供一个开放易用的软件平台，使软件的持续集成变成可能。</p><h3 id="获取-Jenkins-镜像"><a href="#获取-Jenkins-镜像" class="headerlink" title="获取 Jenkins 镜像"></a>获取 Jenkins 镜像</h3><p>Jenkins 官方镜像主要提供两个版本，分别是 [LTS] 版和[每周更新]版。本教程使用的是 LTS 版。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">docker</span> <span class="selector-tag">pull</span> <span class="selector-tag">jenkins</span>/<span class="selector-tag">jenkins</span><span class="selector-pseudo">:lts</span></span><br></pre></td></tr></table></figure><blockquote><p>Jenkins 发布的长期支持版：Long-term support</p></blockquote><blockquote><p>Jenkins 每周发布一期软件更新的版本：weekly</p></blockquote><h3 id="启动-Jenkins-容器"><a href="#启动-Jenkins-容器" class="headerlink" title="启动 Jenkins 容器"></a>启动 Jenkins 容器</h3><p>使用 Docker 在宿主主机启动 Jenkins 容器：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker</span> run --name jenkins -p <span class="number">8080</span>:<span class="number">8080</span> -p <span class="number">50000</span>:<span class="number">50000</span> -v jenkins_home:/var/jenkins_home --restart always -d jenkins/jenkins:lts</span><br></pre></td></tr></table></figure><h4 id="docker-run-附加参数说明："><a href="#docker-run-附加参数说明：" class="headerlink" title="docker run 附加参数说明："></a>docker run 附加参数说明：</h4><table><thead><tr><th>附加参数</th><th>本教程所使用的值</th><th>用途</th></tr></thead><tbody><tr><td>–name</td><td>jenkins</td><td>[命名]</td></tr><tr><td>-p</td><td>8080:8080</td><td>[端口映射]</td></tr><tr><td>-v</td><td>jenkins_home</td><td>[数据卷]</td></tr><tr><td>–restart</td><td>always</td><td>[重启策略]</td></tr></tbody></table><p>有关更多配置方法请查看<a href="https://github.com/jenkinsci/docker/blob/master/README.md">官方 Docker 文档</a>。</p><blockquote><p>容器的名称: –name jenkins</p></blockquote><blockquote><p>容器到宿主主机的端口映射: -p 8080:8080 -p 50000:50000</p></blockquote><blockquote><p>数据卷挂载: -v jenkins_home:/var/jenkins_home</p></blockquote><blockquote><p>退出时总是重启容器: –restart always</p></blockquote><h3 id="访问-Jenkins-实例"><a href="#访问-Jenkins-实例" class="headerlink" title="访问 Jenkins 实例"></a>访问 Jenkins 实例</h3><p>在浏览器中打开 [http://&lt;您的  IP 地址&gt;:8080]即可浏览之前启动的 Jenkins 实例。</p><h3 id="获取初始登录密码"><a href="#获取初始登录密码" class="headerlink" title="获取初始登录密码"></a>获取初始登录密码</h3><p>回到命令行，执行以下命令：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker exec jenkins \</span><br><span class="line">cat <span class="regexp">/var/</span>jenkins_home<span class="regexp">/secrets/i</span>nitialAdminPassword</span><br></pre></td></tr></table></figure><p>从输出结果中获得的一串 Jenkins 初始密码，复制密码，回到 [http://&lt;您的 IP 地址&gt;:8080] 填入密码。</p><h3 id="定制-Jenkins"><a href="#定制-Jenkins" class="headerlink" title="定制 Jenkins"></a>定制 Jenkins</h3><p>我们选择默认的 <strong>Install suggested plugins</strong> 来安装插件。</p><p><img src="/assets/blogImg/customize-jenkins.png"></p><h3 id="创建帐户"><a href="#创建帐户" class="headerlink" title="创建帐户"></a>创建帐户</h3><p>请根据引导页面的信息创建第一个管理员用户，之后即可开启 Jenkins 的世界。</p><p><img src="/assets/blogImg/create-first-admin-user.png"></p><h3 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h3><p>恭喜，您已完成 Docker 搭建 Jenkins </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://camo.githubusercontent.com/a5004ae5bffb9a59384514fd88d3f18c47e1e0373bfda94a18b422e4a164d399/68747470733a2f2f6a656e6b696e732e696f2f73697465732f64656661756c742f66696c65732f6a656e6b696e735f6c6f676f2e706e67&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-安装-Docker&quot;&gt;&lt;a href=&quot;#1-安装-Docker&quot; class=&quot;headerlink&quot; title=&quot;1.安装 Docker&quot;&gt;&lt;/a&gt;1.安装 Docker&lt;/h2&gt;&lt;h3 id=&quot;Docker-简介&quot;&gt;&lt;a href=&quot;#Docker-简介&quot; class=&quot;headerlink&quot; title=&quot;Docker 简介&quot;&gt;&lt;/a&gt;Docker 简介&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://www.docker.com/community-edition&quot;&gt;Docker CE&lt;/a&gt; 是一个开源的应用级别的虚拟化工具，可以将任何应用包装在”[LXC容器](Docker CE](&lt;a href=&quot;https://www.docker.com/community-edition&quot;&gt;https://www.docker.com/community-edition&lt;/a&gt;) 是一个开源的应用级别的虚拟化工具，可以将任何应用包装在”[LXC容器)”中运行。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Linux 容器：Linux Containers&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>【下载】莫言《晚熟的人》</title>
    <link href="https://blogs.zhaozf.site/89d74aee/"/>
    <id>https://blogs.zhaozf.site/89d74aee/</id>
    <published>2020-11-28T15:44:06.000Z</published>
    <updated>2020-11-28T15:52:02.880Z</updated>
    
    <content type="html"><![CDATA[<center><h1>《晚熟的人》</h1></center><p><img src="/assets/blogImg/%E6%99%9A%E7%86%9F%E7%9A%84%E4%BA%BA.jpg"></p><p><a href="/assets/book/Wan Shu De Ren - Mo Yan.pdf" target="_blank">点击下载</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;center&gt;&lt;h1&gt;《晚熟的人》&lt;/h1&gt;&lt;/center&gt;



&lt;p&gt;&lt;img src=&quot;/assets/blogImg/%E6%99%9A%E7%86%9F%E7%9A%84%E4%BA%BA.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/assets/book/Wan
      
    
    </summary>
    
      <category term="下载" scheme="https://blogs.zhaozf.site/categories/%E4%B8%8B%E8%BD%BD/"/>
    
    
      <category term="下载" scheme="https://blogs.zhaozf.site/tags/%E4%B8%8B%E8%BD%BD/"/>
    
      <category term="晚熟的人" scheme="https://blogs.zhaozf.site/tags/%E6%99%9A%E7%86%9F%E7%9A%84%E4%BA%BA/"/>
    
  </entry>
  
  <entry>
    <title>【下载】JavaScript高级程序设计(第4版)pdf版</title>
    <link href="https://blogs.zhaozf.site/349e44e5/"/>
    <id>https://blogs.zhaozf.site/349e44e5/</id>
    <published>2020-11-28T15:23:57.000Z</published>
    <updated>2020-11-28T15:49:00.838Z</updated>
    
    <content type="html"><![CDATA[<center><h1>《JavaScript高级程序设计(第4版)》pdf版</h1></center><p><img src="/assets/blogImg/JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%EF%BC%88%E7%AC%AC4%E7%89%88%EF%BC%89_%E5%B0%81%E4%B8%80.jpg"></p><p><a href="/assets/book/JavaScript高级程序设计(第4版).pdf" target="_blank">点击下载</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;center&gt;&lt;h1&gt;《JavaScript高级程序设计(第4版)》pdf版&lt;/h1&gt;&lt;/center&gt;



&lt;p&gt;&lt;img src=&quot;/assets/blogImg/JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%B
      
    
    </summary>
    
      <category term="下载" scheme="https://blogs.zhaozf.site/categories/%E4%B8%8B%E8%BD%BD/"/>
    
    
      <category term="下载" scheme="https://blogs.zhaozf.site/tags/%E4%B8%8B%E8%BD%BD/"/>
    
      <category term="JavaScript" scheme="https://blogs.zhaozf.site/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>搭建 ShowDoc 文档工具</title>
    <link href="https://blogs.zhaozf.site/d72be85e/"/>
    <id>https://blogs.zhaozf.site/d72be85e/</id>
    <published>2020-06-15T14:32:58.000Z</published>
    <updated>2020-06-17T02:16:31.455Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/blogImg/202006151712.jpg"></p><p><strong>摘要</strong></p><p>程序员都很希望别人能写文档，而自己却不愿意写文档。文档的编写和管理影响了团队沟通协作的效率，ShowDoc 是一个非常适合 IT 团队的在线文档分享工具，为提升团队之间的沟通协作效率而生。本实验带您在 centos 系统上搭建基于 Nginx + PHP 的 ShowDoc 文档工具。</p><p><strong>环境</strong></p><p>CentOS 7.2 64 位</p><p>个人搭建的showdoc免费开放使用，地址是<a href="http://zhaozf.site/showdoc/web/#/">http://zhaozf.site/showdoc/web/#/</a></p><a id="more"></a><h2 id="1、准备-Nginx-PHP-环境"><a href="#1、准备-Nginx-PHP-环境" class="headerlink" title="1、准备 Nginx + PHP 环境"></a>1、准备 Nginx + PHP 环境</h2><p> <strong>安装 Nginx</strong></p><p>使用 <code>yum</code> 安装 Nginx：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum <span class="keyword">install</span> nginx</span><br></pre></td></tr></table></figure><p>修改 <em>/etc/nginx/nginx.conf</em> 文件为如下内容：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">user</span> nginx;</span><br><span class="line"><span class="attribute">worker_processes</span> auto;</span><br><span class="line"><span class="attribute">error_log</span> /var/log/nginx/error.log;</span><br><span class="line"><span class="attribute">pid</span> /run/nginx.pid;</span><br><span class="line"></span><br><span class="line"><span class="attribute">include</span> /usr/share/nginx/modules/<span class="regexp">*.conf</span>;</span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span> <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">log_format</span>  main  <span class="string">&#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">access_log</span>  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">sendfile</span>            <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">tcp_nopush</span>          <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">tcp_nodelay</span>         <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">keepalive_timeout</span>   <span class="number">65</span>;</span><br><span class="line">    <span class="attribute">types_hash_max_size</span> <span class="number">2048</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">include</span>             /etc/nginx/mime.types;</span><br><span class="line">    <span class="attribute">default_type</span>        application/octet-stream;</span><br><span class="line">    <span class="attribute">include</span> /etc/nginx/conf.d/<span class="regexp">*.conf</span>;</span><br><span class="line"></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span>  <span class="number">127.0.0.1</span>;</span><br><span class="line">        <span class="attribute">root</span>         /var/www/html;</span><br><span class="line">        <span class="attribute">index</span> index.php index.html</span><br><span class="line">        error_page  <span class="number">404</span>              /<span class="number">404</span>.html;</span><br><span class="line">        <span class="attribute">location</span> = /40x.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">        <span class="attribute">location</span> = /50x.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="attribute">location</span> <span class="regexp">~ .php$</span> &#123;</span><br><span class="line">            <span class="attribute">root</span>           /var/www/html;</span><br><span class="line">            <span class="attribute">fastcgi_pass</span>   <span class="number">127.0.0.1:9000</span>;</span><br><span class="line">            <span class="attribute">fastcgi_index</span>  index.php;</span><br><span class="line">            <span class="attribute">fastcgi_param</span>  SCRIPT_FILENAME  $document_root$fastcgi_script_name;</span><br><span class="line">            <span class="attribute">include</span>        fastcgi_params;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="attribute">location</span> <span class="regexp">~ /.ht</span> &#123;</span><br><span class="line">            <span class="attribute">deny</span>  all;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动 Nginx 并设置为开机启动：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="keyword">start</span> nginx</span><br><span class="line">systemctl <span class="keyword">enable</span> nginx.service</span><br></pre></td></tr></table></figure><p> <strong>安装 PHP</strong></p><p>使用 <code>yum</code> 安装 php-fpm：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum <span class="keyword">install</span> php php-gd php-fpm php-mcrypt php-mbstring php-mysql php-pdo</span><br></pre></td></tr></table></figure><p>启动 php-fpm 并设置为开机启动：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="keyword">start</span> php-fpm</span><br><span class="line">systemctl <span class="keyword">enable</span> php-fpm.service</span><br></pre></td></tr></table></figure><h2 id="2、创建项目"><a href="#2、创建项目" class="headerlink" title="2、创建项目"></a>2、创建项目</h2><p><strong>下载安装 Composer</strong></p><p>Composer 是 PHP 的一个依赖管理工具，推荐使用 Composer 创建 ShowDoc 项目。</p><p>执行如下命令[<a href="https://cloud.tencent.com/developer/labs/lab/10108#stage-2-step-1-install-composer">安装 Composer</a>]：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -sS https:<span class="regexp">//g</span>etcomposer.org/installer | php</span><br><span class="line">mv composer.phar <span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>composer</span><br></pre></td></tr></table></figure><blockquote><p>安装过程可能需要耗费几分钟</p></blockquote><p> <strong>设置 Composer 使用国内镜像</strong></p><p>执行命令[<a href="https://cloud.tencent.com/developer/labs/lab/10108#stage-2-step-2-mainland-composer">设置 Composer 使用国内镜像</a>]：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">composer</span> <span class="selector-tag">config</span> <span class="selector-tag">-g</span> <span class="selector-tag">repo</span><span class="selector-class">.packagist</span> <span class="selector-tag">composer</span> <span class="selector-tag">https</span>://<span class="selector-tag">packagist</span><span class="selector-class">.phpcomposer</span><span class="selector-class">.com</span></span><br></pre></td></tr></table></figure><blockquote><p>为了避免访问国外网络导致的延迟，推荐使用国内镜像源</p></blockquote><p> <strong>使用 Composer 创建项目</strong></p><p>执行命令创建项目：</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">cd</span> /<span class="string">var</span>/<span class="string">www</span>/<span class="string">html</span>/ &amp;&amp; <span class="string">composer</span> <span class="built_in">create-project</span>  <span class="string">showdoc</span>/<span class="string">showdoc</span></span><br></pre></td></tr></table></figure><p> <strong>设置 showdoc 目录写权限</strong></p><p>执行命令赋予 showdoc 下部分目录的写权限</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">chmod a+w showdoc/install</span><br><span class="line">chmod a+w showdoc/Sqlite</span><br><span class="line">chmod a+w showdoc<span class="regexp">/Sqlite/</span>showdoc.db.php</span><br><span class="line">chmod a+w showdoc<span class="regexp">/Public/U</span>ploads/</span><br><span class="line">chmod a+w showdoc<span class="regexp">/server/</span>Application/<span class="keyword">Runtime</span></span><br><span class="line">chmod a+w showdoc<span class="regexp">/server/</span>Application<span class="regexp">/Common/</span>Conf/config.php</span><br><span class="line">chmod a+w showdoc<span class="regexp">/server/</span>Application<span class="regexp">/Home/</span>Conf/config.php</span><br></pre></td></tr></table></figure><p>创建完毕，您现在可以通过浏览器访问 http://&lt;您的 IP 地址&gt;/showdoc/install/ ，进行语言的选择以后即可通过 http://&lt;您的 IP 地址&gt;/showdoc 查看站点效果。</p><h2 id="3、准备域名和解析"><a href="#3、准备域名和解析" class="headerlink" title="3、准备域名和解析"></a>3、准备域名和解析</h2><p> <strong>域名注册</strong></p><p>注：如果您不需要通过域名访问您的站点，请通过<code>已完成，下一步</code>跳过<code>域名注册</code>环节</p><p><strong>域名解析</strong></p><p>注：如果您不需要通过域名访问您的站点，请通过<code>已完成，下一步</code>跳过<code>域名解析</code>环节</p><p>域名购买完成后, 需要将域名解析到实验云主机上。</p><p>域名设置解析后需要过一段时间才会生效，通过 <code>ping</code> 命令检查域名是否生效，如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ping</span> <span class="selector-tag">www</span><span class="selector-class">.yourdomain</span><span class="selector-class">.com</span></span><br></pre></td></tr></table></figure><p>如果 ping 命令返回的信息中含有你设置的解析的 IP 地址，说明解析成功。</p><blockquote><p>注意替换下面命令中的 <code>www.yourmpdomain.com</code> 为您自己的注册的域名</p></blockquote><h3 id="大功告成！"><a href="#大功告成！" class="headerlink" title="大功告成！"></a>大功告成！</h3><p>恭喜，您的 ShowDoc 站点已经部署完成，您可以通过浏览器访问查看效果。</p><p>通过IP地址查看：[http://&lt;您的 IP 地址&gt;/showdoc](<a href="http:///">http://xn--</a>&lt; cvm ip &gt;-yp49ackh32qjw5g/showdoc)</p><p>通过域名查看：<a href="http://www.yourdomain.com/showdoc%EF%BC%8C%E5%85%B6%E4%B8%AD%E6%9B%BF%E6%8D%A2">http://www.yourdomain.com/showdoc，其中替换</a> <code>www.yourdomain.com</code> 为之前申请的域名。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/blogImg/202006151712.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;摘要&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;程序员都很希望别人能写文档，而自己却不愿意写文档。文档的编写和管理影响了团队沟通协作的效率，ShowDoc 是一个非常适合 IT 团队的在线文档分享工具，为提升团队之间的沟通协作效率而生。本实验带您在 centos 系统上搭建基于 Nginx + PHP 的 ShowDoc 文档工具。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;环境&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;CentOS 7.2 64 位&lt;/p&gt;
&lt;p&gt;个人搭建的showdoc免费开放使用，地址是&lt;a href=&quot;http://zhaozf.site/showdoc/web/#/&quot;&gt;http://zhaozf.site/showdoc/web/#/&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="CentOS" scheme="https://blogs.zhaozf.site/categories/CentOS/"/>
    
    
      <category term="CentOS" scheme="https://blogs.zhaozf.site/tags/CentOS/"/>
    
      <category term="ShowDoc" scheme="https://blogs.zhaozf.site/tags/ShowDoc/"/>
    
  </entry>
  
  <entry>
    <title>搭建 FTP 文件服务</title>
    <link href="https://blogs.zhaozf.site/27950b90/"/>
    <id>https://blogs.zhaozf.site/27950b90/</id>
    <published>2020-06-15T14:09:28.000Z</published>
    <updated>2020-06-15T14:42:30.810Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/blogImg/202006151712.jpg"></p><p><strong>摘要</strong></p><p>FTP 是一个很实用的文件传输协议，方便在客户端和服务器之间进行文件的传输。本文章带您使用 vsftpd 来搭建一个 FTP 服务，并且创建专有的 FTP 登录账户，保障服务器安全。</p><p><strong>环境</strong></p><p>CentOS 7.2 64 位</p><a id="more"></a><h2 id="1、安装并启动-FTP-服务"><a href="#1、安装并启动-FTP-服务" class="headerlink" title="1、安装并启动 FTP 服务"></a>1、安装并启动 FTP 服务</h2><p> <strong>安装 VSFTPD</strong></p><p>使用 <code>yum</code> 安装 [<a href="https://cloud.tencent.com/developer/labs/lab/10002#stage-1-step-1-vsftpd">vsftpd</a>]：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum <span class="keyword">install</span> vsftpd -y</span><br></pre></td></tr></table></figure><blockquote><p><code>vsftpd</code> 是在 Linux 上被广泛使用的 FTP 服务器，根据其<a href="https://security.appspot.com/vsftpd.html">官网介绍</a>，它可能是 UNIX-like 系统下最安全和快速的 FTP 服务器软件。</p></blockquote><p> <strong>启动 VSFTPD</strong></p><p>安装完成后，启动 FTP 服务：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service vsftpd <span class="keyword">start</span></span><br></pre></td></tr></table></figure><p>启动后，可以看到系统已经[<a href="https://cloud.tencent.com/developer/labs/lab/10002#stage-1-step-2-21">监听了 21 端口</a>]：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">netstat</span> -nltp | grep <span class="number">21</span></span><br></pre></td></tr></table></figure><p>此时，访问 [ftp://&lt;您的  IP 地址&gt;](<a href="ftp:///">ftp://xn--</a>&lt; cvm ip -sd04ayi737nv69f/) 可浏览机器上的 <em>/var/ftp</em> 目录了。</p><blockquote><p>FTP 协议默认使用 21 端口作为服务端口</p></blockquote><h2 id="2、-配置-FTP-权限"><a href="#2、-配置-FTP-权限" class="headerlink" title="2、 配置 FTP 权限"></a>2、 配置 FTP 权限</h2><p>目前 FTP 服务登陆允许匿名登陆，也无法区分用户访问，我们需要配置 FTP 访问权限</p><p><strong>了解 VSFTP 配置</strong></p><p>vsftpd 的配置目录为 <em>/etc/vsftpd</em>，包含下列的配置文件：</p><ul><li><em>vsftpd.conf</em> 为主要配置文件</li><li><em>ftpusers</em> 配置禁止访问 FTP 服务器的用户列表</li><li><em>user_list</em> 配置用户访问控制</li></ul><p>阅读上述配置以了解更多信息。如果您准备好了，点击下一步开始修改配置来设置权限。</p><p> <strong>阻止匿名访问和切换根目录</strong></p><p>匿名访问和切换根目录都会给服务器带来[<a href="https://cloud.tencent.com/developer/labs/lab/10002#stage-2-step-2-safety">安全风险</a>]，我们把这两个功能关闭。</p><p><em>编辑 /etc/vsftpd/vsftpd.conf</em>，[<a href="https://cloud.tencent.com/developer/labs/lab/10002#stage-2-step-2-find">找到下面两处配置</a>]并修改：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 禁用匿名用户</span></span><br><span class="line"><span class="attr">anonymous_enable</span>=<span class="literal">NO</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 禁止切换根目录</span></span><br><span class="line"><span class="attr">chroot_local_user</span>=<span class="literal">YES</span></span><br></pre></td></tr></table></figure><p>编辑完成后，按 <code>Ctrl + S</code> 保存配置，重新启动 FTP 服务，如：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">service vsftpd restart</span></span><br></pre></td></tr></table></figure><blockquote><p>匿名访问让所有人都可以上传文件到服务器上而无需鉴权，而允许切换根目录则可能产生越权访问问题。</p></blockquote><blockquote><p>在代码编辑器中，用 <code>Ctrl + F</code> 进行搜索，Mac 用户用 <code>Cmd + F</code> 进行搜索</p></blockquote><p> <strong>创建 FTP 用户</strong></p><p>创建一个用户 <code>ftpuser</code>：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">useradd ftpuser</span></span><br></pre></td></tr></table></figure><p>为用户 <code>ftpuser</code> 设置密码：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Password&quot;</span> | passwd ftpuser <span class="params">--stdin</span></span><br></pre></td></tr></table></figure><blockquote><p>为了方便后面的实验步骤，不建议使用其它的用户名</p></blockquote><blockquote><p>下面命令中的密码为实验室为您生成，为了方便后面的实验步骤，不建议使用其他密码</p></blockquote><p> <strong>限制该用户仅能通过 FTP 访问</strong></p><p>限制用户 <code>ftpuser</code> 只能通过 FTP 访问服务器，而不能直接登录服务器：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod -s <span class="regexp">/sbin/</span>nologin ftpuser</span><br></pre></td></tr></table></figure><p> <strong>为用户分配主目录</strong></p><p>为用户 <code>ftpuser</code> 创建[<a href="https://cloud.tencent.com/developer/labs/lab/10002#stage-2-step-5-ftp-home">主目录</a>]并约定：</p><p><code>/data/ftp</code> 为主目录, 该目录不可上传文件</p><p><code>/data/ftp/pub</code> 文件只能上传到该目录下</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p <span class="regexp">/data/</span>ftp/pub</span><br></pre></td></tr></table></figure><p>创建登录欢迎文件：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo <span class="string">&quot;Welcome to use FTP service.&quot;</span> &gt; <span class="regexp">/data/</span>ftp/welcome.txt</span><br></pre></td></tr></table></figure><p>设置访问权限：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod a-w <span class="regexp">/data/</span>ftp &amp;&amp; chmod <span class="number">777</span> -R <span class="regexp">/data/</span>ftp/pub</span><br></pre></td></tr></table></figure><p>设置为用户的主目录：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod -d <span class="regexp">/data/</span>ftp ftpuser</span><br></pre></td></tr></table></figure><blockquote><p>用户的主目录是用户通过 FTP 登录后看到的根目录</p></blockquote><blockquote><p>方便用户登录后可以看到欢迎信息，并且确定用户确实登录到了主目录上。</p></blockquote><h2 id="3、准备域名和证书"><a href="#3、准备域名和证书" class="headerlink" title="3、准备域名和证书"></a>3、准备域名和证书</h2><p>注：如果您不需要通过域名访问 FTP 服务器则可以直接点击“已完成，下一步”跳过域名和证书的准备环节</p><p> <strong>1）域名注册</strong></p><p>可以到域名服务商去注册域名，例如：阿里云或者腾讯云都可以。</p><p>  <strong>2) 域名解析</strong></p><p>域名购买完成后, 需要将域名解析到云主机的 IP上。</p><p>域名设置解析后需要过一段时间才会生效，通过 <code>ping</code> 命令检查域名是否生效，如：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ping</span> yourdomain.com</span><br></pre></td></tr></table></figure><p>如果 ping 命令返回的信息中含有你设置的解析的 IP 地址，说明解析成功。</p><p>（使用 <code>ctrl + c</code> 停止）</p><blockquote><p>注意替换下面命令中的 <code>yourdomain.com</code> 为您自己的注册的域名</p></blockquote><h2 id="4、访问-FTP-服务"><a href="#4、访问-FTP-服务" class="headerlink" title="4、访问 FTP 服务"></a>4、访问 FTP 服务</h2><p>FTP 服务已安装并配置完成，下面我们来使用该 FTP 服务</p><p><strong>访问 FTP 服务</strong></p><p>根据您个人的工作环境，选择一种方式来访问已经搭建的 FTP 服务</p><p><strong>通过 Windows 资源管理器访问</strong></p><p>Windows 用户可以复制下面的[<a href="https://cloud.tencent.com/developer/labs/lab/10002#stage-4-step-1-address">链接</a>]到资源管理器的地址栏访问：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ftp:<span class="regexp">//</span>ftpuser:Password@&lt;您的 IP 地址&gt;</span><br></pre></td></tr></table></figure><p> <strong>通过 FTP 客户端工具访问</strong></p><p>FTP 客户端工具众多，下面推荐两个常用的：</p><ul><li><em>WinSCP</em> - Windows 下的 FTP 和 SFTP 连接客户端</li><li><em>FileZilla</em> - 跨平台的 FTP 客户端，支持 Windows 和 Mac</li></ul><p>下载和安装 FTP 客户端后，使用下面的凭据进行连接即可：</p><p>[<a href="https://cloud.tencent.com/developer/labs/lab/10002#stage-4-step-1-host">主机</a>]：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">&lt;您的 IP 地址&gt;</span></span><br></pre></td></tr></table></figure><p>用户：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ftpuser</span></span><br></pre></td></tr></table></figure><p>密码：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Password</span></span><br></pre></td></tr></table></figure><p>如果能够正常连接，那么大功告成，您可以开始使用属于您自己的 FTP 服务器了！</p><p>接下来，请上传任意一张图片到您的 FTP 服务器上的pub目录下，然后，就可以在 <em>/data/ftp/pub</em> 中看到了。</p><p>注意: <code>请不要直接上传文件到根目录下</code>，您应该选择上传到 <code>pub</code> 目录下</p><blockquote><p>如果您申请了域名，可以将链接中的 Ip 地址替换为对应的域名访问 FTP 服务</p></blockquote><blockquote><p>如果您申请了域名，可以将Ip 地址替换为对应的域名作为访问凭据</p></blockquote><h3 id="大功告成"><a href="#大功告成" class="headerlink" title="大功告成"></a>大功告成</h3><p>恭喜！您已经成功完成了搭建 FTP 服务器的任务。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/blogImg/202006151712.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;摘要&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;FTP 是一个很实用的文件传输协议，方便在客户端和服务器之间进行文件的传输。本文章带您使用 vsftpd 来搭建一个 FTP 服务，并且创建专有的 FTP 登录账户，保障服务器安全。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;环境&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;CentOS 7.2 64 位&lt;/p&gt;
    
    </summary>
    
      <category term="CentOS" scheme="https://blogs.zhaozf.site/categories/CentOS/"/>
    
    
      <category term="FTP" scheme="https://blogs.zhaozf.site/tags/FTP/"/>
    
      <category term="CentOS" scheme="https://blogs.zhaozf.site/tags/CentOS/"/>
    
  </entry>
  
  <entry>
    <title>搭建个人网盘</title>
    <link href="https://blogs.zhaozf.site/981336d9/"/>
    <id>https://blogs.zhaozf.site/981336d9/</id>
    <published>2020-06-15T08:42:03.000Z</published>
    <updated>2020-06-15T13:10:58.954Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/blogImg/202006151712.jpg"></p><p><strong>摘要</strong></p><p>在这个数据爆炸的时代，大部分人已经离不开个人云存储—网盘，但是遗憾的是大多数网盘陆续停止了服务。本文章带您一步步搭建基于 Seafile 的专属网盘，从此不再有网盘关停文件丢失的担忧。</p><p><strong>环境</strong></p><p>CentOS 7.2 64 位</p><a id="more"></a><h2 id="1、准备域名"><a href="#1、准备域名" class="headerlink" title="1、准备域名"></a>1、准备域名</h2><p> <strong>1）域名注册</strong></p><p>可以到域名服务商去注册域名，例如：阿里云或者腾讯云都可以。</p><p>  <strong>2) 域名解析</strong></p><p>域名购买完成后, 需要将域名解析到云主机的 IP上。</p><p>域名设置解析后需要过一段时间才会生效，通过 <code>ping</code> 命令检查域名是否生效，如：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ping</span> yourdomain.com</span><br></pre></td></tr></table></figure><p>如果 ping 命令返回的信息中含有你设置的解析的 IP 地址，说明解析成功。</p><p>（使用 <code>ctrl + c</code> 停止）</p><blockquote><p>注意替换下面命令中的 <code>yourdomain.com</code> 为您自己的注册的域名</p></blockquote><h2 id="2、安装-Seafile"><a href="#2、安装-Seafile" class="headerlink" title="2、安装 Seafile"></a>2、安装 Seafile</h2><p> <strong>1）安装依赖环境</strong></p><p>使用 <code>yum</code> 安装 Python 及 MySQL：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install <span class="keyword">python</span> <span class="keyword">python</span>-setuptools <span class="keyword">python</span>-imaging <span class="keyword">python</span>-ldap <span class="keyword">python</span>-memcached MySQL-<span class="keyword">python</span> mariadb mariadb-server</span><br></pre></td></tr></table></figure><p>启动 MariaDB 服务：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="keyword">start</span> mariadb.service</span><br><span class="line">sudo systemctl <span class="keyword">enable</span> mariadb.service</span><br></pre></td></tr></table></figure><p>配置 MySQL：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/usr/</span>bin/mysql_secure_installation</span><br></pre></td></tr></table></figure><p>配置过程输入参数如截图所示，其中 <code>New password</code> 和 <code>Re-enter new password</code> 字段都设置为 <code>Password</code>，其他字段一路回车使用默认值：</p><p><img src="/assets/blogImg/202006152106.png"></p><p> <strong>2）安装 Seafile</strong></p><p>下载 Seafile 安装包：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">wget</span> https://mc.qcloudimg.com/static/archive/<span class="number">3</span>d<span class="number">8</span>addbe<span class="number">52</span>be<span class="number">88</span>df<span class="number">4</span>f<span class="number">6139</span>ec<span class="number">7</span>e<span class="number">35</span>b<span class="number">453</span>/seafile-server_<span class="number">5</span>.<span class="number">1</span>.<span class="number">4</span>_x<span class="number">86</span>-<span class="number">64</span>.tar.gz</span><br></pre></td></tr></table></figure><p>解压 Seafile 安装包：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">tar</span> -zxvf seafile-server_<span class="number">5</span>.<span class="number">1</span>.<span class="number">4</span>_x<span class="number">86</span>-<span class="number">64</span>.tar.gz</span><br></pre></td></tr></table></figure><p>安装 Seafile 安装包：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">sudo</span> mkdir -p /opt/seafile/installed</span><br><span class="line"><span class="attribute">sudo</span> mv seafile-server_<span class="number">5</span>.<span class="number">1</span>.<span class="number">4</span>_x<span class="number">86</span>-<span class="number">64</span>.tar.gz /opt/seafile/installed</span><br><span class="line"><span class="attribute">sudo</span> mv seafile-server-<span class="number">5</span>.<span class="number">1</span>.<span class="number">4</span>/ /opt/seafile</span><br><span class="line"><span class="attribute">cd</span> /opt/seafile/seafile-server-<span class="number">5</span>.<span class="number">1</span>.<span class="number">4</span></span><br><span class="line"><span class="attribute">sudo</span> ./setup-seafile-mysql.sh</span><br></pre></td></tr></table></figure><p>执行过程输入参数如截图所示，<code>[server name]</code> 字段输入 <code>Seafile</code>，<code>[ This server&#39;s ip or domain ]</code> 字段输入教程第一步申请的域名，<code>[ 1 or 2 ]</code> 字段选择 <code>1</code>，mysql 的 <code>[ root password ]</code> 字段输入 <code>Password</code>，其他字段一路回车使用默认值：</p><p><img src="/assets/blogImg/202006152107.png"></p><h2 id="3、启动-Seafile-及修改防火墙规则"><a href="#3、启动-Seafile-及修改防火墙规则" class="headerlink" title="3、启动 Seafile 及修改防火墙规则"></a>3、启动 Seafile 及修改防火墙规则</h2><p> <strong>启动 Seafile</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo ./seafile.sh <span class="keyword">start</span></span><br><span class="line">sudo ./seahub.sh <span class="keyword">start</span></span><br></pre></td></tr></table></figure><p>执行过程输入参数如截图所示，其中 <code>[ admin email ]</code> 设置为您登录网盘的帐号，如 [<code>admin@qcloudlab.wang](mailto:</code><a href="mailto:&#97;&#x64;&#x6d;&#x69;&#110;&#x40;&#113;&#99;&#x6c;&#111;&#x75;&#x64;&#x6c;&#x61;&#x62;&#46;&#x77;&#x61;&#x6e;&#x67;">&#97;&#x64;&#x6d;&#x69;&#110;&#x40;&#113;&#99;&#x6c;&#111;&#x75;&#x64;&#x6c;&#x61;&#x62;&#46;&#x77;&#x61;&#x6e;&#x67;</a>)<code>，</code>[ admin password ]<code>和</code>[ admin password again ]<code>设置为登录网盘的密码，如</code>admin_Password`：</p><p><img src="/assets/blogImg/202006152108.png"></p><p> <strong>修改防火墙规则</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo firewall-cmd <span class="attribute">--zone</span>=public --permanent <span class="attribute">--add-port</span>=8082/tcp</span><br><span class="line">sudo firewall-cmd <span class="attribute">--zone</span>=public --permanent <span class="attribute">--add-port</span>=8000/tcp</span><br><span class="line">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure><h2 id="4、大功告成！"><a href="#4、大功告成！" class="headerlink" title="4、大功告成！"></a>4、大功告成！</h2><p>恭喜，您的 Seafile 已经部署完成，您现在拥有专属的网盘了，登录的帐号密码为您启动 Seafile 步骤中设置的邮箱和密码。</p><ul><li>可以通过 Ip 访问网盘：<a href="http://xn--<>-5h6jl6wklv443c:8000/">http://&lt;您的域名&gt;:8000</a></li><li>可以通过域名访问网盘：如 <a href="http://www.yourdomain.com:8000/">http://www.yourdomain.com:8000</a> ，其中 <code>www.yourdomain.com</code> 替换为您注册的域名</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/blogImg/202006151712.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;摘要&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在这个数据爆炸的时代，大部分人已经离不开个人云存储—网盘，但是遗憾的是大多数网盘陆续停止了服务。本文章带您一步步搭建基于 Seafile 的专属网盘，从此不再有网盘关停文件丢失的担忧。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;环境&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;CentOS 7.2 64 位&lt;/p&gt;
    
    </summary>
    
      <category term="CentOS" scheme="https://blogs.zhaozf.site/categories/CentOS/"/>
    
    
      <category term="CentOS" scheme="https://blogs.zhaozf.site/tags/CentOS/"/>
    
      <category term="个人网盘" scheme="https://blogs.zhaozf.site/tags/%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%9B%98/"/>
    
  </entry>
  
  <entry>
    <title>搭建邮件服务</title>
    <link href="https://blogs.zhaozf.site/ecf2ac7f/"/>
    <id>https://blogs.zhaozf.site/ecf2ac7f/</id>
    <published>2020-06-15T07:50:49.000Z</published>
    <updated>2020-06-15T13:01:05.617Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/blogImg/202006151712.jpg"></p><p> <strong>摘要</strong></p><p>Postfix 是一个标准的 MTA「Mail Transfer Agent」服务器，它负责通过 SMTP 协议管理发送到本机的邮件以及由本机发向外界的邮件；Dovecot 是一个优秀的 IMAP/POP 服务器用以接收外界发送到本机的邮件。本实验带您一步步搭建 Postfix、Dovecot 邮件服务。</p><p> <strong>环境</strong></p><p>CentOS 7.2 64 位</p><a id="more"></a><h2 id="1、准备域名"><a href="#1、准备域名" class="headerlink" title="1、准备域名"></a>1、准备域名</h2><p><strong>1）域名注册</strong></p><p>可以到域名服务商去注册域名，例如：阿里云或者腾讯云都可以。</p><p> <strong>2) 域名解析</strong></p><p>域名购买完成后, 需要将域名解析到云主机的 IP上。</p><p>完成需要添加两条记录：</p><p> <strong>A 记录</strong></p><p>记录类型：A</p><p>主机记录：@</p><p>记录值：&lt;您的  IP 地址&gt;</p><p> <strong>MX 记录</strong></p><p>记录类型：MX</p><p>主机记录：@</p><p>记录值：<code>yourdomain.com</code>（替换为自己域名）</p><p> <strong>3)生效检查</strong></p><p>域名设置解析后需要过一段时间才会生效，通过 <code>ping</code> 命令检查域名是否生效，如：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ping</span> yourdomain.com</span><br></pre></td></tr></table></figure><p>如果 ping 命令返回的信息中含有你设置的解析的 IP 地址，说明解析成功。</p><p>（使用 <code>ctrl + c</code> 停止）</p><p><strong>4)检查 MX 记录</strong></p><p>替换下面命令中的 <code>yourdomain.com</code> 为您自己的注册的域名：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nslookup <span class="attribute">-q</span>=mx yourdomain.com</span><br></pre></td></tr></table></figure><p>如果 nslookup 命令返回的信息中含有你设置的域名的记录值，说明解析成功。</p><blockquote><p>注意替换下面命令中的 <code>yourdomain.com</code> 为您自己的注册的域名</p></blockquote><h2 id="2、搭建之前"><a href="#2、搭建之前" class="headerlink" title="2、搭建之前"></a>2、搭建之前</h2><p>配置一个功能完善的邮件服务器并不是一项容易的工作，本次只是搭建了一个简单的邮件服务器，一些更为强大的功能还需要你去探索。</p><p> <strong>1) Postfix、Dovecot 简介</strong></p><p><strong>Postfix</strong></p><p>Postfix 是一个标准的 MTA「Mail Transfer Agent」服务器，它负责通过 SMTP 协议管理发送到本机的邮件以及由本机发向外界的邮件。</p><p><strong>Dovecot</strong></p><p>Dovecot 是一个优秀的 IMAP/POP 服务器用以接收外界发送到本机的邮件。</p><p> <strong>2) Postfix、Dovecot 安装</strong></p><p>在 CentOS 7 上，我们可以直接使用 <code>yum</code> 进行下载安装：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y <span class="keyword">install</span> postfix dovecot</span><br></pre></td></tr></table></figure><h2 id="3、Postfix"><a href="#3、Postfix" class="headerlink" title="3、Postfix"></a>3、Postfix</h2><p> <strong>配置 Postfix</strong></p><p>有关教程中配置参数的具体含义，请参照 <a href="http://www.postfix.org/documentation.html">Postfix 配置文档</a>。</p><p> <strong>1) 配置</strong></p><p>在终端中输入以下命令以修改 Postfix 相关配置：</p><p>注意：<strong>记得将 <code>yourdomain.com</code> 替换为你自己的域名</strong></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">postconf -e <span class="symbol">&#x27;myhostname</span> = server.yourdomain.com&#x27;</span><br><span class="line">postconf -e <span class="symbol">&#x27;mydestination</span> = localhost, localhost.localdomain&#x27;</span><br><span class="line">postconf -e <span class="symbol">&#x27;myorigin</span> = $mydomain&#x27;</span><br><span class="line">postconf -e <span class="symbol">&#x27;mynetworks</span> = <span class="number">127.0</span>.<span class="number">0.0</span>/<span class="number">8</span>&#x27;</span><br><span class="line">postconf -e <span class="symbol">&#x27;inet_interfaces</span> = <span class="keyword">all</span>&#x27;</span><br><span class="line">postconf -e <span class="symbol">&#x27;inet_protocols</span> = <span class="keyword">all</span>&#x27;</span><br><span class="line">postconf -e <span class="symbol">&#x27;mydestination</span> = $myhostname, localhost.$mydomain, localhost, $mydomain&#x27;</span><br><span class="line">postconf -e <span class="symbol">&#x27;home_mailbox</span> = Maildir/&#x27;</span><br><span class="line">postconf -e <span class="symbol">&#x27;smtpd_sasl_type</span> = dovecot&#x27;</span><br><span class="line">postconf -e <span class="symbol">&#x27;smtpd_sasl_path</span> = <span class="keyword">private</span>/auth&#x27;</span><br><span class="line">postconf -e <span class="symbol">&#x27;smtpd_sasl_auth_enable</span> = yes&#x27;</span><br><span class="line">postconf -e <span class="symbol">&#x27;broken_sasl_auth_clients</span> = yes&#x27;</span><br><span class="line">postconf -e <span class="symbol">&#x27;smtpd_sasl_authenticated_header</span> = yes&#x27;</span><br><span class="line">postconf -e <span class="symbol">&#x27;smtpd_recipient_restrictions</span> = permit_mynetworks, permit_sasl_authenticated, reject_unauth_destination&#x27;</span><br><span class="line">postconf -e <span class="symbol">&#x27;smtpd_use_tls</span> = yes&#x27;</span><br><span class="line">postconf -e <span class="symbol">&#x27;smtpd_tls_cert_file</span> = /etc/pki/dovecot/certs/dovecot.pem&#x27;</span><br><span class="line">postconf -e <span class="symbol">&#x27;smtpd_tls_key_file</span> = /etc/pki/dovecot/<span class="keyword">private</span>/dovecot.pem&#x27;</span><br></pre></td></tr></table></figure><p>配置中 Postfix 使用 <strong>sasl</strong> 和 <strong>tls</strong> 来完成身份认证和传输信息加密。</p><p>试验中使用了 Dovecot 默认的 <strong>ssl</strong> 证书和私钥，如果你需要修改为自己的，请替换最后两行配置的路径。</p><p><strong>2) 配置 smtps</strong></p><p>部分邮件客户端依赖于使用 465 端口提供加密连接，所以我们修改配置，允许 Postfix 使用 465 端口发送邮件。</p><p>打开 <em>/etc/postfix/master.cf</em> 文件，将如下两行前的 <code>#</code> 去除：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">smtps inet n - n - - smtpd</span><br><span class="line">-o <span class="attribute">smtpd_tls_wrappermode</span>=<span class="literal">yes</span></span><br></pre></td></tr></table></figure><p>（注意： <strong><code>-o</code> 前要保留空格</strong>）</p><p>然后 <code>ctrl + s</code> 保存文件。</p><p> <strong>3) 启动</strong></p><p>使用以下命令，将 Postfix 设为自动启动并首次启动该服务：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="keyword">enable</span> postfix.service</span><br><span class="line">systemctl <span class="keyword">start</span>  postfix.service</span><br></pre></td></tr></table></figure><p><strong>Postfix 日志</strong></p><p>Postfix 系统的日志文件在系统的这个目录下的 <em>/var/log/maillog</em> 文件，此文件记录了 Postfix 服务器的运行状态信息。</p><h2 id="4、Dovecot"><a href="#4、Dovecot" class="headerlink" title="4、Dovecot"></a>4、Dovecot</h2><p> <strong>配置 Dovecot</strong></p><p> <strong>修改 dovecot.conf</strong></p><p>打开 <em>/etc/dovecot/dovecot.conf</em> 文件，在最下方加入以下配置：</p><p><strong>示例代码：/etc/dovecot/dovecot.conf</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ssl_cert</span> = &lt;/etc/pki/dovecot/certs/dovecot.pem</span><br><span class="line"><span class="attr">ssl_key</span> = &lt;/etc/pki/dovecot/private/dovecot.pem</span><br><span class="line"></span><br><span class="line"><span class="attr">protocols</span> = imap pop3 lmtp</span><br><span class="line"><span class="attr">listen</span> = *</span><br><span class="line"><span class="attr">mail_location</span> = Maildir:~/Maildir</span><br><span class="line"><span class="attr">disable_plaintext_auth</span> = <span class="literal">no</span></span><br></pre></td></tr></table></figure><p>如果前面你修改为了自己的 ssl 证书和私钥，请替换开始两行配置的路径。</p><p>然后 <code>ctrl + s</code> 保存文件。</p><p> <strong>修改 10-master.conf</strong></p><p>打开 <em>/etc/dovecot/conf.d/10-master.conf</em> 文件，找到 <code>service auth</code> 部分，将以下行前面的 <code>#</code> 去除：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">unix_listener <span class="regexp">/var/</span>spool<span class="regexp">/postfix/</span><span class="keyword">private</span>/auth &#123;  </span><br><span class="line">       mode = <span class="number">0666</span>  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后 <code>ctrl + s</code> 保存文件。</p><p><strong>启动 Dovecot</strong></p><p>使用以下命令，将 Dovecot 设为自动启动并首次启动该服务：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="keyword">enable</span> dovecot.service</span><br><span class="line">systemctl <span class="keyword">start</span>  dovecot.service</span><br></pre></td></tr></table></figure><p>查看 <em>/var/log/maillog</em> 文件，查看服务是否成功启动。</p><p>如成功启动，日志里应包含如下信息：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Jun</span> <span class="number">26</span> <span class="number">12</span>:<span class="number">00</span>:<span class="number">28</span> localhost postfix/postfix-script[<span class="number">28338</span>]: starting the Postfix mail system</span><br><span class="line"><span class="attribute">Jun</span> <span class="number">26</span> <span class="number">12</span>:<span class="number">00</span>:<span class="number">29</span> localhost postfix/master[<span class="number">28340</span>]: daemon started -- version <span class="number">2</span>.<span class="number">10</span>.<span class="number">1</span>, configuration /etc/postfix</span><br><span class="line"><span class="attribute">Jun</span> <span class="number">26</span> <span class="number">12</span>:<span class="number">28</span>:<span class="number">40</span> localhost dovecot: master: Dovecot v<span class="number">2</span>.<span class="number">2</span>.<span class="number">10</span> starting up for imap, pop<span class="number">3</span>, lmtp (core dumps disabled)</span><br></pre></td></tr></table></figure><h2 id="5、创建账户"><a href="#5、创建账户" class="headerlink" title="5、创建账户"></a>5、创建账户</h2><p>该配置下邮箱账户依赖于系统用户，所以通过添加系统用户的方式创建邮箱账户。</p><p><strong>添加用户</strong></p><p>在终端中使用 <code>useradd</code> 命令添加用户：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>使用 <code>passwd</code> 命令设置对应用户密码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd <span class="built_in">test</span></span><br></pre></td></tr></table></figure><h2 id="6、测试"><a href="#6、测试" class="headerlink" title="6、测试"></a>6、测试</h2><p>如测试中遇到异常，请查看 maillog 日志文件中的错误信息。</p><p><strong>服务器端发送测试</strong></p><p>使用 <code>su</code> 命令切换用户：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">su</span> <span class="keyword">test</span></span><br></pre></td></tr></table></figure><p>我们可以使用 <code>mail</code> 命令发送邮件，将 [<code>xxxx@xxx.com](mailto:</code><a href="mailto:&#120;&#x78;&#120;&#x78;&#64;&#120;&#120;&#120;&#x2e;&#x63;&#x6f;&#109;">&#120;&#x78;&#120;&#x78;&#64;&#120;&#120;&#120;&#x2e;&#x63;&#x6f;&#109;</a>)` 替换为你的其他邮箱。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Mail Content&quot;</span> | mail -s <span class="string">&quot;Mail Subject&quot;</span> xxxx@xxx.<span class="keyword">com</span></span><br></pre></td></tr></table></figure><p>然后可以前往你的接收方邮箱查收。</p><p><strong>邮件客户端</strong></p><p>你可以将该邮箱账户添加至邮件客户端使用，推荐使用 <a href="http://www.foxmail.com/">Foxmail</a> 客户端。</p><p>可以参考以下配置进行设置：</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">服务器类型：`POP3`</span><br><span class="line">邮箱账户：  `test@yourdomain.com`</span><br><span class="line"></span><br><span class="line">收件(POP3)服务器：  `yourdomain.com`</span><br><span class="line">端口：              `995`</span><br><span class="line">安全连接(SSL)：     `是`</span><br><span class="line">用户名：            `test`</span><br><span class="line">密码：              `test用户密码`</span><br><span class="line"></span><br><span class="line">发件(SMTP)服务器：  `yourdomain.com`</span><br><span class="line">端口：              `465`</span><br><span class="line">安全连接(SSL)：     `是`</span><br><span class="line">用户名：            `test`</span><br><span class="line">密码：              `test用户密码`</span><br></pre></td></tr></table></figure><p>然后就可以使用邮件客户端通过该账户收发邮件了。</p><p>（该配置在某些邮件客户端下可能因为使用了通用证书而出现使用异常）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/blogImg/202006151712.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;摘要&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Postfix 是一个标准的 MTA「Mail Transfer Agent」服务器，它负责通过 SMTP 协议管理发送到本机的邮件以及由本机发向外界的邮件；Dovecot 是一个优秀的 IMAP/POP 服务器用以接收外界发送到本机的邮件。本实验带您一步步搭建 Postfix、Dovecot 邮件服务。&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;环境&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;CentOS 7.2 64 位&lt;/p&gt;
    
    </summary>
    
      <category term="CentOS" scheme="https://blogs.zhaozf.site/categories/CentOS/"/>
    
    
      <category term="CentOS" scheme="https://blogs.zhaozf.site/tags/CentOS/"/>
    
      <category term="邮件服务" scheme="https://blogs.zhaozf.site/tags/%E9%82%AE%E4%BB%B6%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>网页在线工具汇总</title>
    <link href="https://blogs.zhaozf.site/7b7bdc95/"/>
    <id>https://blogs.zhaozf.site/7b7bdc95/</id>
    <published>2020-05-26T07:46:10.000Z</published>
    <updated>2020-06-15T09:17:33.381Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/blogImg/202005261611.jpg"></p><h2 id="在线小工具展开目录"><a href="#在线小工具展开目录" class="headerlink" title="在线小工具展开目录"></a>在线小工具展开目录</h2><a id="more"></a><table><thead><tr><th><a href="https://hao.su/531/">影视网站</a></th><th>观看各大视频平台的电视剧、电影</th></tr></thead><tbody><tr><td><a href="https://hao.su/2217/">音乐播放器</a></td><td>免费试听各大平台音乐</td></tr><tr><td><a href="https://www.xbeibeix.com/api/bilibili/?hao.su">哔哩哔哩解析</a></td><td>哔哩哔哩视频在线下载</td></tr><tr><td><a href="https://dalao.ru/">大佬搜索</a></td><td>好用的搜索引擎</td></tr><tr><td><a href="https://ps.gaoding.com/">在线 ps</a>、<a href="http://www.polaxiong.com/editor">泼辣修图</a></td><td>在线图片编辑工具</td></tr><tr><td><a href="https://tableconvert.com/">在线表格转换</a></td><td>在线表格转换工具</td></tr><tr><td><a href="https://www.apowersoft.cn/compress-file-online">在线视频压缩</a></td><td>免费优质压缩视频、图片及 PDF 文件</td></tr><tr><td><a href="https://docsmall.com/">docsmall</a></td><td>在线图片压缩处理，在线 pdf 处理</td></tr><tr><td><a href="http://x.bensee.com.cn/parse">短视频解析</a></td><td>抖音快手短视频无水印下载</td></tr><tr><td><a href="http://mp3cut.net/cn/">Audio Cutter</a>、<a href="http://ringer.org/zh/">ringer</a></td><td>在线铃声剪辑工具</td></tr><tr><td><a href="https://web.baimiaoapp.com/?hao.su">阿里读光</a>、<a href="https://web.baimiaoapp.com/?hao.su">白描 ocr</a></td><td>在线图片 OCR 识别应用</td></tr><tr><td><a href="http://hao.su/ning/jiami/">免费加密</a></td><td>文件免费在线加密 / 解密</td></tr><tr><td><a href="https://convertio.co/zh/">convertio</a></td><td>在线格式转换工具</td></tr><tr><td><a href="https://hao.su/47/">临时邮箱</a></td><td>保护隐私，随机生成临时邮箱地址</td></tr><tr><td><a href="https://hao.su/2495/">在线接码</a></td><td>保护隐私，免费的电话短信接受</td></tr><tr><td><a href="https://hao.su/48/">图片压缩</a></td><td>图片压缩一般在线服务足以满足需求</td></tr><tr><td><a href="https://hao.su/2225/">二维码生成</a></td><td>添加文字或网址，动态生成二维码</td></tr><tr><td><a href="https://hao.su/pic.html">在线图床</a></td><td>快速获取图片链接，方便分享</td></tr><tr><td><a href="https://hao.su/1420/">短地址汇总</a></td><td>缩短网址链接，方便分享</td></tr></tbody></table><h2 id="在线办公展开目录"><a href="#在线办公展开目录" class="headerlink" title="在线办公展开目录"></a>在线办公展开目录</h2><table><thead><tr><th>「推荐」可视化团队协作工具</th><th><a href="https://www.huiyizhuo.com/">会议桌</a></th></tr></thead><tbody><tr><td>阿里巴巴团队出品在线办公利器</td><td><a href="https://yuque.com/">语雀</a></td></tr><tr><td>腾讯系产品无缝联动</td><td><a href="https://docs.qq.com/">腾讯文档</a></td></tr><tr><td>国内知名在线文档</td><td><a href="https://shimo.im/">石墨文档</a></td></tr><tr><td>国外知名在线协作平台</td><td><a href="https://notion.so/">notion</a></td></tr></tbody></table><h2 id="图片处理展开目录"><a href="#图片处理展开目录" class="headerlink" title="图片处理展开目录"></a>图片处理展开目录</h2><p><strong>在线抠图，图片 ai 放大</strong></p><p><a href="https://imglarger.com/Tw">https://imglarger.com/Tw</a></p><p>更多的在线抠图、图片无损放大网站，可以看更多：<a href="https://hao.su/3095/">图片放大</a>、<a href="https://hao.su/2968/">在线抠图</a>网站</p><p><a href="https://squoosh.app/">Squoosh</a> 谷歌出品的图片压缩网站</p><p><a href="https://tool.tanpok.com/">tanpok 图片压缩</a>基于浏览器提供的压缩功能</p><p><a href="https://tiomg.org/compress-image">太美工具箱图片压缩工具</a> 智能化的图片压缩，支持 PNG/GIF/JPG 图片压缩。</p><p><a href="https://www.tutieshi.com/">图贴士</a> GIF 图片工具箱 / GIF 压缩 / 视频转 GIF</p><p>更多好用的在线图片压缩网站，可以看：<a href="https://hao.su/48/">在线图片压缩网站</a></p><h2 id="在线接码展开目录"><a href="#在线接码展开目录" class="headerlink" title="在线接码展开目录"></a>在线接码展开目录</h2><ul><li><a href="https://www.pdflibr.com/">https://www.pdflibr.com</a></li><li><a href="https://www.visitorsms.com/cn">https://www.visitorsms.com/cn</a></li><li><a href="https://www.becmd.com/">https://www.becmd.com</a></li></ul><p>更多免费国内外接码平台请看：<a href="https://hao.su/2495/">免费短信接码网站</a></p><h2 id="IP-查询展开目录"><a href="#IP-查询展开目录" class="headerlink" title="IP 查询展开目录"></a>IP 查询展开目录</h2><ul><li><a href="https://ip.sb/">https://ip.sb</a></li><li><a href="https://www.ipip.net/">https://www.ipip.net</a></li><li><a href="https://ip.cn/">https://ip.cn</a></li></ul><h2 id="临时邮箱展开目录"><a href="#临时邮箱展开目录" class="headerlink" title="临时邮箱展开目录"></a>临时邮箱展开目录</h2><ul><li><a href="https://linshiyouxiang.net/">https://linshiyouxiang.net</a></li></ul><p>10 分钟邮箱，可以自定义也可以随机申请的 10 分钟临时邮箱，支持自定义域名</p><ul><li><a href="https://www.uu.me/">https://www.uu.me</a></li></ul><p>遨游出品的百变邮箱，可以用一个正规邮箱，利用这个百变邮箱变成无数个邮箱地址，帮你收发邮件，最后到你正规邮箱里。</p><p>更多免费临时邮箱请看：<a href="https://hao.su/47/">免费在线临时邮箱</a></p><p>本文转载自<a href="https://hao.su/1492/">不死鸟</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/blogImg/202005261611.jpg&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;在线小工具展开目录&quot;&gt;&lt;a href=&quot;#在线小工具展开目录&quot; class=&quot;headerlink&quot; title=&quot;在线小工具展开目录&quot;&gt;&lt;/a&gt;在线小工具展开目录&lt;/h2&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Git 快速上手</title>
    <link href="https://blogs.zhaozf.site/c8dc427f/"/>
    <id>https://blogs.zhaozf.site/c8dc427f/</id>
    <published>2020-05-26T06:21:10.000Z</published>
    <updated>2020-05-26T07:40:32.047Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/blogImg/202005261430.jpg" alt="202005261250"></p><h2 id="一、Git-安装配置"><a href="#一、Git-安装配置" class="headerlink" title="一、Git 安装配置"></a>一、Git 安装配置</h2><p>在使用Git前我们需要先安装 Git。Git 目前支持 Linux/Unix、Solaris、Mac和 Windows 平台上运行。</p><p>Git 各平台安装包下载地址为：<a href="http://git-scm.com/downloads">http://git-scm.com/downloads</a></p><a id="more"></a><h3 id="Linux-平台上安装"><a href="#Linux-平台上安装" class="headerlink" title="Linux 平台上安装"></a>Linux 平台上安装</h3><p>Git 的工作需要调用 curl，zlib，openssl，expat，libiconv 等库的代码，所以需要先安装这些依赖工具。</p><p>在有 yum 的系统上（比如 Fedora）或者有 apt-get 的系统上（比如 Debian 体系），可以用下面的命令安装：</p><p>各 Linux 系统可以很简单多使用其安装包管理工具进行安装：</p><h4 id="Debian-Ubuntu"><a href="#Debian-Ubuntu" class="headerlink" title="Debian/Ubuntu"></a>Debian/Ubuntu</h4><h5 id="Debian-Ubuntu-Git-安装命令为："><a href="#Debian-Ubuntu-Git-安装命令为：" class="headerlink" title="Debian/Ubuntu Git 安装命令为："></a>Debian/Ubuntu Git 安装命令为：</h5><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ apt-<span class="built_in">get</span> install libcurl4-gnutls-<span class="built_in">dev</span> libexpat1-<span class="built_in">dev</span> gettext \</span><br><span class="line">  libz-<span class="built_in">dev</span> libssl-<span class="built_in">dev</span></span><br><span class="line"></span><br><span class="line">$ apt-<span class="built_in">get</span> install git-core</span><br><span class="line"></span><br><span class="line">$ git --version</span><br><span class="line">git version <span class="number">1.8</span><span class="number">.1</span><span class="number">.2</span></span><br></pre></td></tr></table></figure><h5 id="Centos-RedHat"><a href="#Centos-RedHat" class="headerlink" title="Centos/RedHat"></a>Centos/RedHat</h5><p>如果你使用的系统是 Centos/RedHat 安装命令为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ yum <span class="keyword">install</span> curl-devel expat-devel gettext-devel \</span><br><span class="line">  openssl-devel zlib-devel</span><br><span class="line"></span><br><span class="line">$ yum -y <span class="keyword">install</span> git-core</span><br><span class="line"></span><br><span class="line">$ git <span class="comment">--version</span></span><br><span class="line">git <span class="keyword">version</span> <span class="number">1.7</span><span class="number">.1</span></span><br></pre></td></tr></table></figure><h3 id="Windows-平台上安装"><a href="#Windows-平台上安装" class="headerlink" title="Windows 平台上安装"></a>Windows 平台上安装</h3><p>在 Windows 平台上安装 Git 同样轻松，有个叫做 msysGit 的项目提供了安装包，可以到 GitHub 的页面上下载 exe 安装文件并运行：</p><p>安装包下载地址：<a href="http://msysgit.github.io/">http://msysgit.github.io/</a></p><p>完成安装之后，就可以使用命令行的 git 工具（已经自带了 ssh 客户端）了，另外还有一个图形界面的 Git 项目管理工具。</p><p>在开始菜单里找到”Git”-&gt;”Git Bash”，会弹出 Git 命令窗口，你可以在该窗口进行 Git 操作。</p><h3 id="Mac-平台上安装"><a href="#Mac-平台上安装" class="headerlink" title="Mac 平台上安装"></a>Mac 平台上安装</h3><p>在 Mac 平台上安装 Git 最容易的当属使用图形化的 Git 安装工具，下载地址为：</p><p><a href="http://sourceforge.net/projects/git-osx-installer/">http://sourceforge.net/projects/git-osx-installer/</a></p><p>安装界面如下所示：</p><p> <img src="/assets/blogImg/202005261250.png" alt="202005261250"></p><h3 id="Git-配置"><a href="#Git-配置" class="headerlink" title="Git 配置"></a>Git 配置</h3><p>Git 提供了一个叫做 git config 的工具，专门用来配置或读取相应的工作环境变量。</p><p>这些环境变量，决定了 Git 在各个环节的具体工作方式和行为。这些变量可以存放在以下三个不同的地方：</p><pre><code>    `/etc/gitconfig` 文件：系统中对所有用户都普遍适用的配置。若使用 `git config` 时用 `--system` 选项，读写的就是这个文件。    `~/.gitconfig` 文件：用户目录下的配置文件只适用于该用户。若使用 `git config` 时用 `--global` 选项，读写的就是这个文件。    当前项目的 Git 目录中的配置文件（也就是工作目录中的 `.git/config `文件）：这里的配置仅仅针对当前项目有效。每一个级别的配置都会覆盖上层的相同配置，所以 `.git/config` 里的配置会覆盖 `/etc/gitconfig` 中的同名变量。</code></pre><p>在 Windows 系统上，Git 会找寻用户主目录下的 .gitconfig 文件。主目录即 $HOME 变量指定的目录，一般都是 C:\Documents and Settings$USER。</p><p>此外，Git 还会尝试找寻 /etc/gitconfig 文件，只不过看当初 Git 装在什么目录，就以此作为根目录来定位。</p><h5 id="用户信息"><a href="#用户信息" class="headerlink" title="用户信息"></a>用户信息</h5><p>配置个人的用户名称和电子邮件地址：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="keyword">config</span> --<span class="keyword">global</span> user<span class="variable">.name</span> <span class="string">&quot;zhaozf&quot;</span>$ git <span class="keyword">config</span> --<span class="keyword">global</span> user<span class="variable">.email</span> test@zhaozf<span class="variable">.site</span></span><br></pre></td></tr></table></figure><p>如果用了 –global 选项，那么更改的配置文件就是位于你用户主目录下的那个，以后你所有的项目都会默认使用这里配置的用户信息。</p><p>如果要在某个特定的项目中使用其他名字或者电邮，只要去掉 –global 选项重新配置即可，新的设定保存在当前项目的 .git/config 文件里。</p><h5 id="文本编辑器"><a href="#文本编辑器" class="headerlink" title="文本编辑器"></a>文本编辑器</h5><p>设置Git默认使用的文本编辑器, 一般可能会是 Vi 或者 Vim。如果你有其他偏好，比如 Emacs 的话，可以重新设置：:</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">config</span> <span class="comment">--global core.editor emacs</span></span><br></pre></td></tr></table></figure><h5 id="差异分析工具"><a href="#差异分析工具" class="headerlink" title="差异分析工具"></a>差异分析工具</h5><p>还有一个比较常用的是，在解决合并冲突时使用哪种差异分析工具。比如要改用 vimdiff 的话：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">config</span> <span class="comment">--global merge.tool vimdiff</span></span><br></pre></td></tr></table></figure><p>Git 可以理解 kdiff3，tkdiff，meld，xxdiff，emerge，vimdiff，gvimdiff，ecmerge，和 opendiff 等合并工具的输出信息。</p><p>当然，你也可以指定使用自己开发的工具，具体怎么做可以参阅第七章。</p><h5 id="查看配置信息"><a href="#查看配置信息" class="headerlink" title="查看配置信息"></a>查看配置信息</h5><p>要检查已有的配置信息，可以使用 git config –list 命令：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git<span class="built_in"> config </span>--list</span><br><span class="line">http.<span class="attribute">postbuffer</span>=2Muser.name=zhaozf</span><br><span class="line">user.<span class="attribute">email</span>=test@zhaozf.site</span><br></pre></td></tr></table></figure><p>有时候会看到重复的变量名，那就说明它们来自不同的配置文件（比如 /etc/gitconfig 和 ~/.gitconfig），不过最终 Git 实际采用的是最后一个。</p><p>这些配置我们也可以在 ~/.gitconfig 或 /etc/gitconfig 看到，如下所示：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">vim</span> ~/<span class="selector-class">.gitconfig</span></span><br></pre></td></tr></table></figure><p>显示内容如下所示：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[http]</span></span><br><span class="line">    <span class="attr">postBuffer</span> = <span class="number">2</span>M[user]</span><br><span class="line">    <span class="attr">name</span> = zhaozf</span><br><span class="line">    <span class="attr">email</span> = test@zhaozf.site</span><br></pre></td></tr></table></figure><p>也可以直接查阅某个环境变量的设定，只要把特定的名字跟在后面即可，像这样：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config <span class="keyword">user</span>.name</span><br><span class="line">zhaozf</span><br></pre></td></tr></table></figure><h2 id="二、Git-工作流程"><a href="#二、Git-工作流程" class="headerlink" title="二、Git 工作流程"></a>二、Git 工作流程</h2><p>我们为大家介绍 Git 的工作流程。</p><p>一般工作流程如下：</p><ul><li>克隆 Git 资源作为工作目录。</li><li>在克隆的资源上添加或修改文件。</li><li>如果其他人修改了，你可以更新资源。</li><li>在提交前查看修改。</li><li>提交修改。</li><li>在修改完成后，如果发现错误，可以撤回提交并再次修改并提交。</li></ul><p>下图展示了 Git 的工作流程：</p><p><img src="/assets/blogImg/202005261253.png" alt="202005261253"></p><h2 id="三、Git-工作区、暂存区和版本库"><a href="#三、Git-工作区、暂存区和版本库" class="headerlink" title="三、Git 工作区、暂存区和版本库"></a>三、Git 工作区、暂存区和版本库</h2><hr><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>我们先来理解下Git 工作区、暂存区和版本库概念</p><ul><li><strong>工作区：</strong>就是你在电脑里能看到的目录。</li><li><strong>暂存区：</strong>英文叫stage, 或index。一般存放在 “.git目录下” 下的index文件（.git/index）中，所以我们把暂存区有时也叫作索引（index）。</li><li><strong>版本库：</strong>工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。</li></ul><p>下面这个图展示了工作区、版本库中的暂存区和版本库之间的关系：</p><p><img src="/assets/blogImg/202005261255.jpg" alt="202005261255"></p><p>图中左侧为工作区，右侧为版本库。在版本库中标记为 “index” 的区域是暂存区（stage, index），标记为 “master” 的是 master 分支所代表的目录树。</p><p>图中我们可以看出此时 “HEAD” 实际是指向 master 分支的一个”游标”。所以图示的命令中出现 HEAD 的地方可以用 master 来替换。</p><p>图中的 objects 标识的区域为 Git 的对象库，实际位于 “.git/objects” 目录下，里面包含了创建的各种对象及内容。</p><p>当对工作区修改（或新增）的文件执行 “git add” 命令时，暂存区的目录树被更新，同时工作区修改（或新增）的文件内容被写入到对象库中的一个新的对象中，而该对象的ID被记录在暂存区的文件索引中。</p><p>当执行提交操作（git commit）时，暂存区的目录树写到版本库（对象库）中，master 分支会做相应的更新。即 master 指向的目录树就是提交时暂存区的目录树。</p><p>当执行 “git reset HEAD” 命令时，暂存区的目录树会被重写，被 master 分支指向的目录树所替换，但是工作区不受影响。</p><p>当执行 “git rm –cached <file>“ 命令时，会直接从暂存区删除文件，工作区则不做出改变。</p><p>当执行 “git checkout .” 或者 “git checkout – <file>“ 命令时，会用暂存区全部或指定的文件替换工作区的文件。这个操作很危险，会清除工作区中未添加到暂存区的改动。</p><p>当执行 “git checkout HEAD .” 或者 “git checkout HEAD <file>“ 命令时，会用 HEAD 指向的 master 分支中的全部或者部分文件替换暂存区和以及工作区中的文件。这个命令也是极具危险性的，因为不但会清除工作区中未提交的改动，也会清除暂存区中未提交的改动。</p><h2 id="四、Git-创建仓库"><a href="#四、Git-创建仓库" class="headerlink" title="四、Git 创建仓库"></a>四、Git 创建仓库</h2><p>本章节我们将为大家介绍如何创建一个 Git 仓库。</p><p>你可以使用一个已经存在的目录作为Git仓库。</p><hr><h2 id="git-init"><a href="#git-init" class="headerlink" title="git init"></a>git init</h2><p>Git 使用 <strong>git init</strong> 命令来初始化一个 Git 仓库，Git 的很多命令都需要在 Git 的仓库中运行，所以 <strong>git init</strong> 是使用 Git 的第一个命令。</p><p>在执行完成 <strong>git init</strong> 命令后，Git 仓库会生成一个 .git 目录，该目录包含了资源的所有元数据，其他的项目目录保持不变（不像 SVN 会在每个子目录生成 .svn 目录，Git 只在仓库的根目录生成 .git 目录）。</p><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>使用当前目录作为Git仓库，我们只需使它初始化。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p>该命令执行完后会在当前目录生成一个 .git 目录。</p><p>使用我们指定目录作为Git仓库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init newrepo</span><br></pre></td></tr></table></figure><p>初始化后，会在 newrepo 目录下会出现一个名为 .git 的目录，所有 Git 需要的数据和资源都存放在这个目录中。</p><p>如果当前目录下有几个文件想要纳入版本控制，需要先用 git add 命令告诉 Git 开始对这些文件进行跟踪，然后提交：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git add *.c</span><br><span class="line">$ git add README</span><br><span class="line">$ git commit -m <span class="string">&#x27;初始化项目版本&#x27;</span></span><br></pre></td></tr></table></figure><p>以上命令将目录下以 .c 结尾及 README 文件提交到仓库中。</p><hr><h2 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h2><p>我们使用 <strong>git clone</strong> 从现有 Git 仓库中拷贝项目（类似 <strong>svn checkout</strong>）。</p><p>克隆仓库的命令格式为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> &lt;repo&gt;</span><br></pre></td></tr></table></figure><p>如果我们需要克隆到指定的目录，可以使用以下命令格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> &lt;repo&gt; &lt;directory&gt;</span><br></pre></td></tr></table></figure><p><strong>参数说明：</strong></p><ul><li>**repo:**Git 仓库。</li><li>**directory:**本地目录。</li></ul><p>比如，要克隆 Ruby 语言的 Git 代码仓库 Grit，可以用下面的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> git://github.com/schacon/grit.git</span><br></pre></td></tr></table></figure><p>执行该命令后，会在当前目录下创建一个名为grit的目录，其中包含一个 .git 的目录，用于保存下载下来的所有版本记录。</p><p>如果要自己定义要新建的项目目录名称，可以在上面的命令末尾指定新的名字：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> git://github.com/schacon/grit.git mygrit</span><br></pre></td></tr></table></figure><h2 id="五、Git-基本操作"><a href="#五、Git-基本操作" class="headerlink" title="五、Git 基本操作"></a>五、Git 基本操作</h2><p>Git 的工作就是创建和保存你项目的快照及与之后的快照进行对比。本章将对有关创建与提交你的项目快照的命令作介绍。</p><hr><h2 id="获取与创建项目命令"><a href="#获取与创建项目命令" class="headerlink" title="获取与创建项目命令"></a>获取与创建项目命令</h2><h3 id="git-init-1"><a href="#git-init-1" class="headerlink" title="git init"></a>git init</h3><p>用 git init 在目录中创建新的 Git 仓库。 你可以在任何时候、任何目录中这么做，完全是本地化的。</p><p>在目录中执行 git init，就可以创建一个 Git 仓库了。比如我们创建 zhaozf 项目：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir zhaozf</span><br><span class="line">$ <span class="built_in">cd</span> zhaozf/$ git initInitialized empty Git repository <span class="keyword">in</span> /Users/tianqixin/www/zhaozf/.git/<span class="comment"># 在 /www/zhaozf/.git/ 目录初始化空 Git 仓库完毕。</span></span><br></pre></td></tr></table></figure><p>现在你可以看到在你的项目中生成了 .git 这个子目录。 这就是你的 Git 仓库了，所有有关你的此项目的快照数据都存放在这里。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -a....git</span><br></pre></td></tr></table></figure><h3 id="git-clone-1"><a href="#git-clone-1" class="headerlink" title="git clone"></a>git clone</h3><p>使用 git clone 拷贝一个 Git 仓库到本地，让自己能够查看该项目，或者进行修改。</p><p>如果你需要与他人合作一个项目，或者想要复制一个项目，看看代码，你就可以克隆那个项目。 执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> [url]</span><br></pre></td></tr></table></figure><p>[url] 为你想要复制的项目，就可以了。</p><p>例如我们克隆 Github 上的项目：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> git@github.com:schacon/simplegit.gitCloning into <span class="string">&#x27;simplegit&#x27;</span>...remote: Counting objects: 13, done.remote: Total 13 (delta 0), reused 0 (delta 0), pack-reused 13Receiving objects: 100% (13/13), done.Resolving deltas: 100% (2/2), done.Checking connectivity... <span class="keyword">done</span>.</span><br></pre></td></tr></table></figure><p>克隆完成后，在当前目录下会生成一个 simplegit 目录：</p><p>$ cd simplegit/ $ ls README Rakefile lib</p><p>上述操作将复制该项目的全部记录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ ls -a.        ..       .git     README   Rakefile lib</span><br><span class="line">$ <span class="built_in">cd</span> .git</span><br><span class="line">$ ls</span><br><span class="line">HEAD        description info        packed-refs</span><br><span class="line">branches    hooks       logs        refs</span><br><span class="line">config      index       objects</span><br></pre></td></tr></table></figure><p>默认情况下，Git 会按照你提供的 URL 所指示的项目的名称创建你的本地项目目录。 通常就是该 URL 最后一个 / 之后的项目名称。如果你想要一个不一样的名字， 你可以在该命令后加上你想要的名称。</p><hr><h2 id="基本快照"><a href="#基本快照" class="headerlink" title="基本快照"></a>基本快照</h2><p>Git 的工作就是创建和保存你的项目的快照及与之后的快照进行对比。本章将对有关创建与提交你的项目的快照的命令作介绍。</p><h3 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a>git add</h3><p>git add 命令可将该文件添加到缓存，如我们添加以下两个文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ touch README</span><br><span class="line">$ touch hello.php</span><br><span class="line">$ ls</span><br><span class="line">READMEhello.php</span><br><span class="line">$ git status -s?? README?? hello.php</span><br><span class="line">$</span><br></pre></td></tr></table></figure><p>git status 命令用于查看项目的当前状态。</p><p>接下来我们执行 git add 命令来添加文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add README hello.php</span><br></pre></td></tr></table></figure><p>现在我们再执行 git status，就可以看到这两个文件已经加上去了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git status -s</span><br><span class="line">A  README</span><br><span class="line">A  hello.php</span><br><span class="line">$</span><br></pre></td></tr></table></figure><p>新项目中，添加所有文件很普遍，我们可以使用 <strong>git add .</strong> 命令来添加当前项目的所有文件。</p><p>现在我们修改 README 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim README</span><br></pre></td></tr></table></figure><p>在 README 添加以下内容：**# zhaozf Git 测试**，然后保存退出。</p><p>再执行一下 git status：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git status -s</span><br><span class="line">AM README</span><br><span class="line">A  hello.php</span><br></pre></td></tr></table></figure><p>“AM” 状态的意思是，这个文件在我们将它添加到缓存之后又有改动。改动后我们在执行 git add 命令将其添加到缓存中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git add .$ git status -s</span><br><span class="line">A  README</span><br><span class="line">A  hello.php</span><br></pre></td></tr></table></figure><p>当你要将你的修改包含在即将提交的快照里的时候，需要执行 git add。</p><h3 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a>git status</h3><p>git status 以查看在你上次提交之后是否有修改。</p><p>我演示该命令的时候加了 -s 参数，以获得简短的结果输出。如果没加该参数会详细输出内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git statusOn branch masterInitial commitChanges to be committed:</span><br><span class="line">  (use <span class="string">&quot;git rm --cached &lt;file&gt;...&quot;</span> to unstage)</span><br><span class="line"></span><br><span class="line">new file:   READMEnew file:   hello.php</span><br></pre></td></tr></table></figure><h3 id="git-diff"><a href="#git-diff" class="headerlink" title="git diff"></a>git diff</h3><p>执行 git diff 来查看执行 git status 的结果的详细信息。</p><p>git diff 命令显示已写入缓存与已修改但尚未写入缓存的改动的区别。git diff 有两个主要的应用场景。</p><ul><li>尚未缓存的改动：<strong>git diff</strong></li><li>查看已缓存的改动： <strong>git diff –cached</strong></li><li>查看已缓存的与未缓存的所有改动：<strong>git diff HEAD</strong></li><li>显示摘要而非整个 diff：<strong>git diff –stat</strong></li></ul><p>在 hello.php 文件中输入以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;开放课堂：www.openketang.com&#x27;</span>;?&gt;</span><br><span class="line"> </span><br><span class="line">$ git status -s</span><br><span class="line">A  README</span><br><span class="line">AM hello.php</span><br><span class="line">$ git diff</span><br><span class="line">diff --git a/hello.php b/hello.php</span><br><span class="line">index e69de29..69b5711 100644--- a/hello.php+++ b/hello.php@@ -0,0 +1,3 @@+&lt;?php+<span class="built_in">echo</span> <span class="string">&#x27;开放课堂：www.openketang.com&#x27;</span>;+?&gt;</span><br></pre></td></tr></table></figure><p>git status 显示你上次提交更新后的更改或者写入缓存的改动， 而 git diff 一行一行地显示这些改动具体是啥。</p><p>接下来我们来查看下 git diff –cached 的执行效果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git add hello.php </span><br><span class="line">$ git status -s</span><br><span class="line">A  README</span><br><span class="line">A  hello.php</span><br><span class="line">$ git diff --cached</span><br><span class="line">diff --git a/README b/READMEnew file mode 100644index 0000000..8f87495--- /dev/null+++ b/README@@ -0,0 +1 @@+<span class="comment"># zhaozf Git 测试diff --git a/hello.php b/hello.phpnew file mode 100644index 0000000..69b5711--- /dev/null+++ b/hello.php@@ -0,0 +1,3 @@+&lt;?php+echo &#x27;开放课堂：www.openketang.com&#x27;;+?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h3><p>使用 git add 命令将想要快照的内容写入缓存区， 而执行 git commit 将缓存区内容添加到仓库中。</p><p>Git 为你的每一个提交都记录你的名字与电子邮箱地址，所以第一步需要配置用户名和邮箱地址。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">&#x27;zhaozf&#x27;</span>$ git config --global user.email <span class="built_in">test</span>@zhaozf.site</span><br></pre></td></tr></table></figure><p>接下来我们写入缓存，并提交对 hello.php 的所有改动。在首个例子中，我们使用 -m 选项以在命令行中提供提交注释。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git add hello.php</span><br><span class="line">$ git status -s</span><br><span class="line">A  README</span><br><span class="line">A  hello.php</span><br><span class="line">$ $ git commit -m <span class="string">&#x27;第一次版本提交&#x27;</span>[master (root-commit) d32cf1f] 第一次版本提交</span><br><span class="line"> 2 files changed, 4 insertions(+)</span><br><span class="line"> create mode 100644 README</span><br><span class="line"> create mode 100644 hello.php</span><br></pre></td></tr></table></figure><p>现在我们已经记录了快照。如果我们再执行 git status:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git status<span class="comment"># On branch masternothing to commit (working directory clean)</span></span><br></pre></td></tr></table></figure><p>以上输出说明我们在最近一次提交之后，没有做任何改动，是一个”working directory clean：干净的工作目录”。</p><p>如果你没有设置 -m 选项，Git 会尝试为你打开一个编辑器以填写提交信息。 如果 Git 在你对它的配置中找不到相关信息，默认会打开 vim。屏幕会像这样：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Please enter the commit message for your changes. Lines starting# with &#x27;#&#x27; will be ignored, and an empty message aborts the commit.# On branch master# Changes to be committed:#   (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)## modified:   hello.php#~~&quot;.git/COMMIT_EDITMSG&quot; 9L, 257C</span></span><br></pre></td></tr></table></figure><p>如果你觉得 git add 提交缓存的流程太过繁琐，Git 也允许你用 -a 选项跳过这一步。命令格式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -a</span><br></pre></td></tr></table></figure><p>我们先修改 hello.php 文件为以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;开放课堂：www.openketang.com&#x27;</span>;<span class="built_in">echo</span> <span class="string">&#x27;开放课堂：www.openketang.com&#x27;</span>;?&gt;</span><br></pre></td></tr></table></figure><p>再执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git commit -am <span class="string">&#x27;修改 hello.php 文件&#x27;</span>[master 71ee2cb] 修改 hello.php 文件</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br></pre></td></tr></table></figure><h3 id="git-reset-HEAD"><a href="#git-reset-HEAD" class="headerlink" title="git reset HEAD"></a>git reset HEAD</h3><p>git reset HEAD 命令用于取消已缓存的内容。</p><p>我们先改动文件 README 文件，内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># zhaozf Git 测试# 开放课堂</span></span><br></pre></td></tr></table></figure><p>hello.php 文件修改为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;开放课堂：www.openketang.com&#x27;</span>;<span class="built_in">echo</span> <span class="string">&#x27;开放课堂：www.openketang.com&#x27;</span>;<span class="built_in">echo</span> <span class="string">&#x27;开放课堂：www.openketang.com&#x27;</span>;?&gt;</span><br></pre></td></tr></table></figure><p>现在两个文件修改后，都提交到了缓存区，我们现在要取消其中一个的缓存，操作如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ git status -s</span><br><span class="line"> M README</span><br><span class="line"> M hello.php</span><br><span class="line">$ git add .$ git status -s</span><br><span class="line">M  README</span><br><span class="line">M  hello.pp</span><br><span class="line">$ git reset HEAD -- hello.php </span><br><span class="line">Unstaged changes after reset:Mhello.php</span><br><span class="line">$ git status -s</span><br><span class="line">M  README</span><br><span class="line"> M hello.php</span><br></pre></td></tr></table></figure><p>现在你执行 git commit，只会将 README 文件的改动提交，而 hello.php 是没有的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m <span class="string">&#x27;修改&#x27;</span>[master f50cfda] 修改</span><br><span class="line"> 1 file changed, 1 insertion(+)$ git status -s</span><br><span class="line"> M hello.php</span><br></pre></td></tr></table></figure><p>可以看到 hello.php 文件的修改并为提交。</p><p>这时我们可以使用以下命令将 hello.php 的修改提交：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -am <span class="string">&#x27;修改 hello.php 文件&#x27;</span>[master 760f74d] 修改 hello.php 文件</span><br><span class="line"> 1 file changed, 1 insertion(+)$ git statusOn branch master</span><br><span class="line">nothing to commit, working directory clean</span><br></pre></td></tr></table></figure><p>简而言之，执行 git reset HEAD 以取消之前 git add 添加，但不希望包含在下一提交快照中的缓存。</p><h3 id="git-rm"><a href="#git-rm" class="headerlink" title="git rm"></a>git rm</h3><p>git rm 会将条目从缓存区中移除。这与 git reset HEAD 将条目取消缓存是有区别的。 “取消缓存”的意思就是将缓存区恢复为我们做出修改之前的样子。</p><p>默认情况下，<strong>git rm file</strong> 会将文件从缓存区和你的硬盘中（工作目录）删除。</p><p>如果你要在工作目录中留着该文件，可以使用 <strong>git rm –cached</strong>：</p><p>如我们删除 hello.php文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git rm hello.php </span><br><span class="line">rm <span class="string">&#x27;hello.php&#x27;</span>$ ls</span><br><span class="line">README</span><br></pre></td></tr></table></figure><p>不从工作区中删除文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git rm --cached README </span><br><span class="line">rm <span class="string">&#x27;README&#x27;</span>$ ls</span><br><span class="line">README</span><br></pre></td></tr></table></figure><h3 id="git-mv"><a href="#git-mv" class="headerlink" title="git mv"></a>git mv</h3><p>git mv 命令做得所有事情就是 <strong>git rm –cached</strong> 命令的操作， 重命名磁盘上的文件，然后再执行 git add 把新文件添加到缓存区。</p><p>我们先把刚移除的 README 添加回来：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add README</span><br></pre></td></tr></table></figure><p>然后对其重名:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git mv README  README.md</span><br><span class="line">$ ls</span><br><span class="line">README.md</span><br></pre></td></tr></table></figure><h2 id="六、Git-分支管理"><a href="#六、Git-分支管理" class="headerlink" title="六、Git 分支管理"></a>六、Git 分支管理</h2><p>几乎每一种版本控制系统都以某种形式支持分支。使用分支意味着你可以从开发主线上分离开来，然后在不影响主线的同时继续工作。</p><p>有人把 Git 的分支模型称为”必杀技特性”，而正是因为它，将 Git 从版本控制系统家族里区分出来。</p><p>创建分支命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch (branchname)</span><br></pre></td></tr></table></figure><p>切换分支命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout (branchname)</span><br></pre></td></tr></table></figure><p>当你切换分支的时候，Git 会用该分支的最后提交的快照替换你的工作目录的内容， 所以多个分支不需要多个目录。</p><p>合并分支命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge</span><br></pre></td></tr></table></figure><p>你可以多次合并到统一分支， 也可以选择在合并之后直接删除被并入的分支。</p><hr><h2 id="六、Git-分支管理-1"><a href="#六、Git-分支管理-1" class="headerlink" title="六、Git 分支管理"></a>六、Git 分支管理</h2><h3 id="列出分支"><a href="#列出分支" class="headerlink" title="列出分支"></a>列出分支</h3><p>列出分支基本命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure><p>没有参数时，git branch 会列出你在本地的分支。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch* master</span><br></pre></td></tr></table></figure><p>此例的意思就是，我们有一个叫做”master”的分支，并且该分支是当前分支。</p><p>当你执行 git init 的时候，缺省情况下 Git 就会为你创建”master”分支。</p><p>如果我们要手动创建一个分支。执行 git branch (branchname) 即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git branch testing</span><br><span class="line">$ git branch* master</span><br><span class="line">  testing</span><br></pre></td></tr></table></figure><p>现在我们可以看到，有了一个新分支 testing。</p><p>当你以此方式在上次提交更新之后创建了新分支，如果后来又有更新提交， 然后又切换到了”testing”分支，Git 将还原你的工作目录到你创建分支时候的样子</p><p>接下来我们将演示如何切换分支，我们用 git checkout (branch) 切换到我们要修改的分支。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ ls</span><br><span class="line">README</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&#x27;openketang.com&#x27;</span> &gt; test.txt</span><br><span class="line">$ git add .$ git commit -m <span class="string">&#x27;add test.txt&#x27;</span>[master 048598f] add test.txt 2 files changed, 1 insertion(+), 3 deletions(-)</span><br><span class="line"> delete mode 100644 hello.php</span><br><span class="line"> create mode 100644 test.txt</span><br><span class="line">$ ls</span><br><span class="line">READMEtest.txt</span><br><span class="line">$ git checkout testingSwitched to branch <span class="string">&#x27;testing&#x27;</span>$ ls</span><br><span class="line">READMEhello.php</span><br></pre></td></tr></table></figure><p>当我们切换到”testing”分支的时候，我们添加的新文件test.txt被移除了, 原来被删除的文件hello.php文件又出现了。切换回”master”分支的时候，它们有重新出现了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout masterSwitched to branch <span class="string">&#x27;master&#x27;</span>$ ls</span><br><span class="line">READMEtest.txt</span><br></pre></td></tr></table></figure><p>我们也可以使用 git checkout -b (branchname) 命令来创建新分支并立即切换到该分支下，从而在该分支中操作。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b newtestSwitched to a new branch <span class="string">&#x27;newtest&#x27;</span>$ git rm test2.txt </span><br><span class="line">rm <span class="string">&#x27;test2.txt&#x27;</span>$ ls</span><br><span class="line">READMEtest.txt</span><br><span class="line">$ git commit -am <span class="string">&#x27;removed test2.txt&#x27;</span>[newtest 556f0a0] removed test2.txt 1 file changed, 1 deletion(-)</span><br><span class="line"> delete mode 100644 test2.txt</span><br><span class="line">$ git checkout masterSwitched to branch <span class="string">&#x27;master&#x27;</span>$ ls</span><br><span class="line">READMEtest.txttest2.txt</span><br></pre></td></tr></table></figure><p>如你所见，我们创建了一个分支，在该分支的上下文中移除了一些文件，然后切换回我们的主分支，那些文件又回来了。</p><p>使用分支将工作切分开来，从而让我们能够在不同上下文中做事，并来回切换。</p><h3 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h3><p>删除分支命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d (branchname)</span><br></pre></td></tr></table></figure><p>例如我们要删除”testing”分支：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git branch* master</span><br><span class="line">  testing</span><br><span class="line">$ git branch -d testingDeleted branch testing (was 85fc7e7).$ git branch* master</span><br></pre></td></tr></table></figure><h3 id="分支合并"><a href="#分支合并" class="headerlink" title="分支合并"></a>分支合并</h3><p>一旦某分支有了独立内容，你终究会希望将它合并回到你的主分支。 你可以使用以下命令将任何分支合并到当前分支中去：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">git merge</span><br><span class="line">$ git branch* master</span><br><span class="line">  newtest</span><br><span class="line">$ ls</span><br><span class="line">READMEtest.txttest2.txt</span><br><span class="line">$ git merge newtestUpdating 2e082b7..556f0a0Fast-forward</span><br><span class="line"> test2.txt | 1 -</span><br><span class="line"> 1 file changed, 1 deletion(-)</span><br><span class="line"> delete mode 100644 test2.txt</span><br><span class="line">$ ls</span><br><span class="line">READMEtest.txt</span><br></pre></td></tr></table></figure><p>以上实例中我们将 newtest 分支合并到主分支去，test2.txt 文件被删除。</p><h3 id="合并冲突"><a href="#合并冲突" class="headerlink" title="合并冲突"></a>合并冲突</h3><p>合并并不仅仅是简单的文件添加、移除的操作，Git 也会合并修改。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git branch* master</span><br><span class="line">$ cat test.txt</span><br><span class="line">zhaozf.site</span><br></pre></td></tr></table></figure><p>首先，我们创建一个叫做”change_site”的分支，切换过去，我们将内容改为 <a href="http://www.zhaozf.site/">www.zhaozf.site</a> 。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b change_siteSwitched to a new branch <span class="string">&#x27;change_site&#x27;</span>$ vim test.txt </span><br><span class="line">$ head -1 test.txt </span><br><span class="line">www.openketang.com</span><br><span class="line">$ git commit -am <span class="string">&#x27;changed the site&#x27;</span>[change_site d7e7346] changed the site 1 file changed, 1 insertion(+), 1 deletion(-)</span><br></pre></td></tr></table></figure><p>将修改的内容提交到 “change_site” 分支中。 现在，假如切换回 “master” 分支我们可以看内容恢复到我们修改前的，我们再次修改test.txt文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout masterSwitched to branch <span class="string">&#x27;master&#x27;</span>$ head -1 test.txt </span><br><span class="line">www.openketang.com</span><br><span class="line">$ vim test.txt </span><br><span class="line">$ cat test.txt</span><br><span class="line">openketang.com新增加一行$ git diff</span><br><span class="line">diff --git a/test.txt b/test.txt</span><br><span class="line">index 704cce7..f84c2a4 100644--- a/test.txt+++ b/test.txt@@ -1 +1,2 @@</span><br><span class="line"> openketang.com+新增加一行$ git commit -am <span class="string">&#x27;新增加一行&#x27;</span>[master 14b4dca] 新增加一行</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br></pre></td></tr></table></figure><p>现在这些改变已经记录到我的 “master” 分支了。接下来我们将 “change_site” 分支合并过来。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> $ git merge change_siteAuto-merging test.txt</span><br><span class="line">CONFLICT (content): Merge conflict <span class="keyword">in</span> test.txtAutomatic merge failed; fix conflicts and <span class="keyword">then</span> commit the result.$ cat test.txt </span><br><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; <span class="string">HEAD</span></span><br><span class="line"><span class="string">zhaozf.site新增加一行=======www.zhaozf.site&gt;&gt;&gt;&gt;&gt;&gt;&gt; change_site</span></span><br></pre></td></tr></table></figure><p>我们将前一个分支合并到 “master” 分支，一个合并冲突就出现了，接下来我们需要手动去修改它。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ vim test.txt </span><br><span class="line">$ cat test.txt </span><br><span class="line">www.openketang.com新增加一行$ git diff</span><br><span class="line">diff --cc test.txt</span><br><span class="line">index f84c2a4,bccb7c2..0000000--- a/test.txt+++ b/test.txt@@@ -1,2 -1,1 +1,2 @@@- zhaozf.site+ www.zhaozf.site +新增加一行</span><br></pre></td></tr></table></figure><p>在 Git 中，我们可以用 git add 要告诉 Git 文件冲突已经解决</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git status -s</span><br><span class="line">UU test.txt</span><br><span class="line">$ git add test.txt </span><br><span class="line">$ git status -s</span><br><span class="line">M  test.txt</span><br><span class="line">$ git commit[master 88afe0e] Merge branch <span class="string">&#x27;change_site&#x27;</span></span><br></pre></td></tr></table></figure><p>现在我们成功解决了合并中的冲突，并提交了结果。</p><h2 id="七、Git-查看提交历史"><a href="#七、Git-查看提交历史" class="headerlink" title="七、Git 查看提交历史"></a>七、Git 查看提交历史</h2><p>在使用 Git 提交了若干更新之后，又或者克隆了某个项目，想回顾下提交历史，我们可以使用 git log 命令查看。</p><p>针对我们前一章节的操作，使用 git log 命令列出历史提交记录如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span></span><br><span class="line">commit 88afe0e02adcdfea6844bb627de97da21eb10af1Merge: 14b4dca d7e7346Author: w3cschool &lt;w3c@w3cschool.cc&gt;Date:   Sun Mar 1 15:03:42 2015 +0800</span><br><span class="line"></span><br><span class="line">    Merge branch <span class="string">&#x27;change_site&#x27;</span></span><br><span class="line">    </span><br><span class="line">    Conflicts:</span><br><span class="line">        test.txt</span><br><span class="line"></span><br><span class="line">commit 14b4dcadbdc847207651d5a9fae0d315057f346eAuthor: w3cschool &lt;w3c@w3cschool.cc&gt;Date:   Sun Mar 1 14:53:15 2015 +0800</span><br><span class="line"></span><br><span class="line">    新增加一行commit d7e734640da06055e107eaf29cf350b3f1de1c2cAuthor: w3cschool &lt;w3c@w3cschool.cc&gt;Date:   Sun Mar 1 14:48:57 2015 +0800</span><br><span class="line"></span><br><span class="line">    changed the site</span><br><span class="line"></span><br><span class="line">commit 556f0a0637978097b82287ac665a717623b21f3fAuthor: w3cschool &lt;w3c@w3cschool.cc&gt;Date:   Sun Mar 1 14:40:34 2015 +0800</span><br><span class="line"></span><br><span class="line">    removed test2.txt</span><br></pre></td></tr></table></figure><p>我们可以用 –oneline 选项来查看历史记录的简洁的版本。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">$ git log --oneline88afe0e Merge branch <span class="string">&#x27;change_site&#x27;</span>14b4dca 新增加一行d7e7346 changed the site556f0a0 removed test2.txt2e082b7 <span class="builtin-name">add</span> test2.txt048598f <span class="builtin-name">add</span> test.txt85fc7e7 test comment <span class="keyword">from</span> w3cschool.cc</span><br></pre></td></tr></table></figure><p>这告诉我们的是，此项目的开发历史。</p><p>我们还可以用 –graph 选项，查看历史中什么时候出现了分支、合并。以下为相同的命令，开启了拓扑图选项：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --oneline --graph*   88afe0e Merge branch <span class="string">&#x27;change_site&#x27;</span>|\  </span><br><span class="line">| * d7e7346 changed the site* | 14b4dca 新增加一行|/  * 556f0a0 removed test2.txt* 2e082b7 add test2.txt* 048598f add test.txt* 85fc7e7 <span class="built_in">test</span> comment from w3cschool.cc</span><br></pre></td></tr></table></figure><p>现在我们可以更清楚明了地看到何时工作分叉、又何时归并。</p><p>你也可以用 ‘–reverse’参数来逆向显示所有日志。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --reverse --oneline85fc7e7 <span class="built_in">test</span> comment from w3cschool.cc048598f add test.txt2e082b7 add test2.txt556f0a0 removed test2.txt</span><br><span class="line">d7e7346 changed the site14b4dca 新增加一行88afe0e Merge branch <span class="string">&#x27;change_site&#x27;</span></span><br></pre></td></tr></table></figure><p>如果只想查找指定用户的提交日志可以使用命令：git log –author , 例如，比方说我们要找 Git 源码中 Linus 提交的部分：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --author=Linus --oneline -581b50f3 Move <span class="string">&#x27;builtin-*&#x27;</span> into a <span class="string">&#x27;builtin/&#x27;</span> subdirectory3bb7256 make <span class="string">&quot;index-pack&quot;</span> a built-in377d027 make <span class="string">&quot;git pack-redundant&quot;</span> a built-inb532581 make <span class="string">&quot;git unpack-file&quot;</span> a built-in112dd51 make <span class="string">&quot;mktag&quot;</span> a built-in</span><br></pre></td></tr></table></figure><p>如果你要指定日期，可以执行几个选项：–since 和 –before，但是你也可以用 –until 和 –after。</p><p>例如，如果我要看 Git 项目中三周前且在四月十八日之后的所有提交，我可以执行这个（我还用了 –no-merges 选项以隐藏合并提交）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --oneline --before=&#123;3.weeks.ago&#125; --after=&#123;2010-04-18&#125; --no-merges5469e2d Git 1.7.1-rc2</span><br><span class="line">d43427d Documentation/remote-helpers: Fix typos and improve language272a36b Fixup: Second argument may be any arbitrary stringb6c8d2d Documentation/remote-helpers: Add invocation section5ce4f4e Documentation/urls: Rewrite to accomodate transport::address00b84e9 Documentation/remote-helpers: Rewrite description03aa87e Documentation: Describe other situations <span class="built_in">where</span> -z affects git diff77bc694 rebase-interactive: silence warning when no commits rewritten636db2c t3301: add tests to use --format=<span class="string">&quot;%N&quot;</span></span><br></pre></td></tr></table></figure><p>更多 git log 命令可查看：<a href="http://git-scm.com/docs/git-log">http://git-scm.com/docs/git-log</a></p><h2 id="八、Git-标签"><a href="#八、Git-标签" class="headerlink" title="八、Git 标签"></a>八、Git 标签</h2><p>如果你达到一个重要的阶段，并希望永远记住那个特别的提交快照，你可以使用 git tag 给它打上标签。</p><p>比如说，我们想为我们的 w3cschoolcc 项目发布一个”1.0”版本。 我们可以用 git tag -a v1.0 命令给最新一次提交打上（HEAD）”v1.0”的标签。</p><p>-a 选项意为”创建一个带注解的标签”。 不用 -a 选项也可以执行的，但它不会记录这标签是啥时候打的，谁打的，也不会让你添加个标签的注解。 我推荐一直创建带注解的标签。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git tag -a v1.0</span><br></pre></td></tr></table></figure><p>当你执行 git tag -a 命令时，Git 会打开你的编辑器，让你写一句标签注解，就像你给提交写注解一样。</p><p>现在，注意当我们执行 git log –decorate 时，我们可以看到我们的标签了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --oneline --decorate --graph*   88afe0e (HEAD, tag: v1.0, master) Merge branch <span class="string">&#x27;change_site&#x27;</span>|\  </span><br><span class="line">| * d7e7346 (change_site) changed the site* | 14b4dca 新增加一行|/  * 556f0a0 removed test2.txt* 2e082b7 add test2.txt* 048598f add test.txt* 85fc7e7 <span class="built_in">test</span> comment from w3cschool.cc</span><br></pre></td></tr></table></figure><p>如果我们忘了给某个提交打标签，又将它发布了，我们可以给它追加标签。</p><p>例如，假设我们发布了提交 85fc7e7(上面实例最后一行)，但是那时候忘了给它打标签。 我们现在也可以：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git tag -a v0.9 85fc7e7$ git <span class="built_in">log</span> --oneline --decorate --graph*   88afe0e (HEAD, tag: v1.0, master) Merge branch <span class="string">&#x27;change_site&#x27;</span>|\  </span><br><span class="line">| * d7e7346 (change_site) changed the site* | 14b4dca 新增加一行|/  * 556f0a0 removed test2.txt* 2e082b7 add test2.txt* 048598f add test.txt* 85fc7e7 (tag: v0.9) <span class="built_in">test</span> comment from w3cschool.cc</span><br></pre></td></tr></table></figure><p>如果我们要查看所有标签可以使用以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git tag</span><br><span class="line">v0.9v1.0</span><br></pre></td></tr></table></figure><p>指定标签信息命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -a &lt;tagname&gt; -m <span class="string">&quot;w3cschool.cc标签&quot;</span></span><br></pre></td></tr></table></figure><p>PGP签名标签命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -s &lt;tagname&gt; -m <span class="string">&quot;w3cschool.cc标签&quot;</span></span><br></pre></td></tr></table></figure><h2 id="九、Git-远程仓库-Github"><a href="#九、Git-远程仓库-Github" class="headerlink" title="九、Git 远程仓库(Github)"></a>九、Git 远程仓库(Github)</h2><p>Git 并不像 SVN 那样有个中心服务器。</p><p>目前我们使用到的 Git 命令都是在本地执行，如果你想通过 Git 分享你的代码或者与其他开发人员合作。 你就需要将数据放到一台其他开发人员能够连接的服务器上。</p><p>本例使用了 Github 作为远程仓库，你可以先阅读 <a href="http://rogerdudler.github.io/git-guide/index.zh.html">Github 简明教程。</a></p><hr><h2 id="添加远程库"><a href="#添加远程库" class="headerlink" title="添加远程库"></a>添加远程库</h2><p>要添加一个新的远程仓库，可以指定一个简单的名字，以便将来引用,命令格式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add [shortname] [url]</span><br></pre></td></tr></table></figure><p>本例以Github为例作为远程仓库，如果你没有Github可以在官网<a href="https://github.com/%E6%B3%A8%E5%86%8C%E3%80%82">https://github.com/注册。</a></p><p>由于你的本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，所以我们需要配置验证信息：</p><p>使用以下命令生成SSH Key：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">&quot;youremail@example.com&quot;</span></span><br></pre></td></tr></table></figure><p>后面的 <strong><a href="mailto:&#x79;&#111;&#117;&#x72;&#95;&#x65;&#x6d;&#x61;&#105;&#108;&#x40;&#x79;&#x6f;&#x75;&#x72;&#101;&#x6d;&#97;&#x69;&#108;&#46;&#x63;&#x6f;&#x6d;">&#x79;&#111;&#117;&#x72;&#95;&#x65;&#x6d;&#x61;&#105;&#108;&#x40;&#x79;&#x6f;&#x75;&#x72;&#101;&#x6d;&#97;&#x69;&#108;&#46;&#x63;&#x6f;&#x6d;</a></strong> 改为你在 github 上注册的邮箱，之后会要求确认路径和输入密码，我们这使用默认的一路回车就行。成功的话会在~/下生成.ssh文件夹，进去，打开 id_rsa.pub，复制里面的 key。</p><p>回到 github 上，进入 Account =&gt; Settings（账户配置）。</p><p><img src="https://edu.aliyun.com/files/course/2017/09-25/184443b9d1c0402242.jpg" alt="img"></p><p>左边选择 <strong>SSH and GPG keys</strong>，然后点击 <strong>New SSH key</strong> 按钮,title 设置标题，可以随便填，粘贴在你电脑上生成的 key。</p><p><img src="https://edu.aliyun.com/files/course/2017/09-25/184514a00646040125.jpg" alt="img"></p><p>添加成功后界面如下所示</p><p><img src="https://edu.aliyun.com/files/course/2017/09-25/184533d254bd582703.jpg" alt="img"></p><p>为了验证是否成功，输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.comHi tianqixin! You<span class="string">&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span></span><br></pre></td></tr></table></figure><p>以下命令说明我们已成功连上 Github。</p><p>之后登录后点击” New repository “ 如下图所示：</p><p><img src="https://edu.aliyun.com/files/course/2017/09-25/184633939cdc361092.jpg" alt="img"></p><p>之后在在Repository name 填入 zhaozf-git-test(远程仓库名) ，其他保持默认设置，点击”Create repository”按钮，就成功地创建了一个新的Git仓库：</p><p><img src="https://edu.aliyun.com/files/course/2017/09-25/184652c9d52e827387.jpg" alt="img"></p><p>创建成功后，显示如下信息：</p><p><img src="https://edu.aliyun.com/files/course/2017/09-25/184707b60a12744933.jpg" alt="img"></p><p>以上信息告诉我们可以从这个仓库克隆出新的仓库，也可以把本地仓库的内容推送到GitHub仓库。</p><p>现在，我们根据 GitHub 的提示，在本地的仓库下运行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir zhaozf-git-test                     <span class="comment"># 创建测试目录$ cd zhaozf-git-test/                       # 进入测试目录$ echo &quot;# 菜鸟教程 Git 测试&quot; &gt;&gt; README.md     # 创建 README.md 文件并写入内容$ ls                                        # 查看目录下的文件README</span></span><br><span class="line">$ git init                                  <span class="comment"># 初始化$ git add README.md                         # 添加文件$ git commit -m &quot;添加 README.md 文件&quot;        # 提交并备注信息[master (root-commit) 0205aab] 添加 README.md 文件</span></span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 README.md<span class="comment"># 提交到 Github$ git remote add origin git@github.com:tianqixin/zhaozf-git-test.git</span></span><br><span class="line">$ git push -u origin master</span><br></pre></td></tr></table></figure><p>以下命令请根据你在Github成功创建新仓库的地方复制，而不是根据我提供的命令，因为我们的Github用户名不一样，仓库名也不一样。</p><p>接下来我们返回 Github 创建的仓库，就可以看到文件已上传到 Github上：</p><p><img src="https://edu.aliyun.com/files/course/2017/09-25/184739b5d6ad273419.jpg" alt="img"></p><hr><h2 id="查看当前的远程库"><a href="#查看当前的远程库" class="headerlink" title="查看当前的远程库"></a>查看当前的远程库</h2><p>要查看当前配置有哪些远程仓库，可以用命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote</span><br></pre></td></tr></table></figure><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git remote</span><br><span class="line">origin</span><br><span class="line">$ git remote -v</span><br><span class="line">origingit@github.com:tianqixin/zhaozf-git-test.git (fetch)origingit@github.com:tianqixin/zhaozf-git-test.git (push)</span><br></pre></td></tr></table></figure><p>执行时加上 -v 参数，你还可以看到每个别名的实际链接地址。</p><hr><h2 id="提取远程仓库"><a href="#提取远程仓库" class="headerlink" title="提取远程仓库"></a>提取远程仓库</h2><p>Git 有两个命令用来提取远程仓库的更新。</p><p>1、从远程仓库下载新分支与数据：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch</span><br></pre></td></tr></table></figure><p>该命令执行完后需要执行git merge 远程分支到你所在的分支。</p><p>2、从远端仓库提取数据并尝试合并到当前分支：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure><p>该命令就是在执行 git fetch 之后紧接着执行 git merge 远程分支到你所在的任意分支。</p><p>假设你配置好了一个远程仓库，并且你想要提取更新的数据，你可以首先执行 <strong>git fetch [alias]</strong> 告诉 Git 去获取它有你没有的数据，然后你可以执行 <strong>git merge [alias]/[branch]</strong> 以将服务器上的任何更新（假设有人这时候推送到服务器了）合并到你的当前分支。</p><p>接下来我们在 Github 上点击” README.md” 并在线修改它:</p><p><img src="https://edu.aliyun.com/files/course/2017/09-25/184832041e7c769713.jpg" alt="img"></p><p>然后我们在本地更新修改。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git fetch origin</span><br><span class="line">remote: Counting objects: 3, done.remote: Compressing objects: 100% (2/2), done.remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0Unpacking objects: 100% (3/3), done.From github.com:tianqixin/zhaozf-git-test   0205aab..febd8ed  master     -&gt; origin/master</span><br></pre></td></tr></table></figure><p>以上信息”0205aab..febd8ed master -&gt; origin/master” 说明 master 分支已被更新，我们可以使用以下命令将更新同步到本地：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git merge origin/masterUpdating 0205aab..febd8edFast-forward</span><br><span class="line"> README.md | 1 +</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br></pre></td></tr></table></figure><p>查看 README.md 文件内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cat README.md </span><br><span class="line"><span class="comment"># 教程 Git 测试## 第一次修改内容</span></span><br></pre></td></tr></table></figure><hr><h2 id="推送到远程仓库"><a href="#推送到远程仓库" class="headerlink" title="推送到远程仓库"></a>推送到远程仓库</h2><p>推送你的新分支与数据到某个远端仓库命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push [<span class="built_in">alias</span>] [branch]</span><br></pre></td></tr></table></figure><p>以上命令将你的 [branch] 分支推送成为 [alias] 远程仓库上的 [branch] 分支，实例如下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ touch zhaozf-test.txt      <span class="comment"># 添加文件$ git add zhaozf-test.txt </span></span><br><span class="line">$ git commit -m <span class="string">&quot;添加到远程&quot;</span>master 69e702d] 添加到远程</span><br><span class="line"> 1 file changed, 0 insertions(+), 0 deletions(-)</span><br><span class="line"> create mode 100644 zhaozf-test.txt</span><br><span class="line"></span><br><span class="line">$ git push origin master    <span class="comment"># 推送到 Github</span></span><br></pre></td></tr></table></figure><p>重新回到我们的 Github 仓库，可以看到文件以及提交上来了：</p><p><img src="https://edu.aliyun.com/files/course/2017/09-25/1849531411f4153823.jpg" alt="img"></p><hr><h2 id="删除远程仓库"><a href="#删除远程仓库" class="headerlink" title="删除远程仓库"></a>删除远程仓库</h2><p>删除远程仓库你可以使用命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote rm [别名]</span><br></pre></td></tr></table></figure><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git remote -v</span><br><span class="line">origingit@github.com:tianqixin/zhaozf-git-test.git (fetch)origingit@github.com:tianqixin/zhaozf-git-test.git (push)<span class="comment"># 添加仓库 origin2$ git remote add origin2 git@github.com:tianqixin/zhaozf-git-test.git</span></span><br><span class="line"></span><br><span class="line">$ git remote -v</span><br><span class="line">origingit@github.com:tianqixin/zhaozf-git-test.git (fetch)origingit@github.com:tianqixin/zhaozf-git-test.git (push)origin2git@github.com:tianqixin/zhaozf-git-test.git (fetch)origin2git@github.com:tianqixin/zhaozf-git-test.git (push)<span class="comment"># 删除仓库 origin2$ git remote rm origin2</span></span><br><span class="line">$ git remote -v</span><br><span class="line">origingit@github.com:tianqixin/zhaozf-git-test.git (fetch)origingit@github.com:tianqixin/zhaozf-git-test.git (push)</span><br></pre></td></tr></table></figure><h2 id="十、Git-服务器搭建"><a href="#十、Git-服务器搭建" class="headerlink" title="十、Git 服务器搭建"></a>十、Git 服务器搭建</h2><p>上一章节中我们远程仓库使用了 Github，Github 公开的项目是免费的，但是如果你不想让其他人看到你的项目就需要收费。</p><p>这时我们就需要自己搭建一台Git服务器作为私有仓库使用。</p><p>接下来我们将以 Centos 为例搭建 Git 服务器。</p><h3 id="1、安装Git"><a href="#1、安装Git" class="headerlink" title="1、安装Git"></a>1、安装Git</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel perl-devel</span><br><span class="line">$ yum install git</span><br></pre></td></tr></table></figure><p>接下来我们 创建一个git用户组和用户，用来运行git服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ groupadd git</span><br><span class="line">$ adduser git -g git</span><br></pre></td></tr></table></figure><h3 id="2、创建证书登录"><a href="#2、创建证书登录" class="headerlink" title="2、创建证书登录"></a>2、创建证书登录</h3><p>收集所有需要登录的用户的公钥，公钥位于id_rsa.pub文件中，把我们的公钥导入到/home/git/.ssh/authorized_keys文件里，一行一个。</p><p>如果没有该文件创建它：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /home/git/$ mkdir .ssh</span><br><span class="line">$ chmod 700 .ssh</span><br><span class="line">$ touch .ssh/authorized_keys</span><br><span class="line">$ chmod 600 .ssh/authorized_keys</span><br></pre></td></tr></table></figure><h3 id="3、初始化Git仓库"><a href="#3、初始化Git仓库" class="headerlink" title="3、初始化Git仓库"></a>3、初始化Git仓库</h3><p>首先我们选定一个目录作为Git仓库，假定是/home/gitrepo/zhaozf.git，在/home/gitrepo目录下输入命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /home</span><br><span class="line">$ mkdir gitrepo</span><br><span class="line">$ chown git:git gitrepo/$ <span class="built_in">cd</span> gitrepo</span><br><span class="line"></span><br><span class="line">$ git init --bare zhaozf.gitInitialized empty Git repository <span class="keyword">in</span> /home/gitrepo/zhaozf.git/</span><br></pre></td></tr></table></figure><p>以上命令Git创建一个空仓库，服务器上的Git仓库通常都以.git结尾。然后，把仓库所属用户改为git：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ chown -R git:git zhaozf.git</span><br></pre></td></tr></table></figure><h3 id="4、克隆仓库"><a href="#4、克隆仓库" class="headerlink" title="4、克隆仓库"></a>4、克隆仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> git@192.168.45.4:/home/gitrepo/zhaozf.gitCloning into <span class="string">&#x27;zhaozf&#x27;</span>...warning: You appear to have cloned an empty repository.Checking connectivity... <span class="keyword">done</span>.</span><br></pre></td></tr></table></figure><p>192.168.45.4 为 Git 所在服务器 ip ，你需要将其修改为你自己的 Git 服务 ip。</p><p>这样我们的 Git 服务器安装就完成了，接下来我们可以禁用 git 用户通过shell登录，可以通过编辑/etc/passwd文件完成。找到类似下面的一行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git:x:503:503::/home/git:/bin/bash</span><br></pre></td></tr></table></figure><p>改为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git:x:503:503::/home/git:/sbin/nologin</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/blogImg/202005261430.jpg&quot; alt=&quot;202005261250&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;一、Git-安装配置&quot;&gt;&lt;a href=&quot;#一、Git-安装配置&quot; class=&quot;headerlink&quot; title=&quot;一、Git 安装配置&quot;&gt;&lt;/a&gt;一、Git 安装配置&lt;/h2&gt;&lt;p&gt;在使用Git前我们需要先安装 Git。Git 目前支持 Linux/Unix、Solaris、Mac和 Windows 平台上运行。&lt;/p&gt;
&lt;p&gt;Git 各平台安装包下载地址为：&lt;a href=&quot;http://git-scm.com/downloads&quot;&gt;http://git-scm.com/downloads&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Git" scheme="https://blogs.zhaozf.site/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>前端开发学习路线-CSS快速掌握</title>
    <link href="https://blogs.zhaozf.site/4f88b68a/"/>
    <id>https://blogs.zhaozf.site/4f88b68a/</id>
    <published>2020-05-20T15:27:39.000Z</published>
    <updated>2020-05-20T15:32:56.427Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/blogImg/202005202332.jpg" alt="CSS快速掌握"></p><h3 id="1、CSS简介"><a href="#1、CSS简介" class="headerlink" title="1、CSS简介"></a>1、CSS简介</h3><p> css（cascading style sheets的缩写）翻译为“层叠样式表”或者“级联样式表”，简称样式表。</p><h3 id="2、CSS的主要作用"><a href="#2、CSS的主要作用" class="headerlink" title="2、CSS的主要作用"></a>2、CSS的主要作用</h3><p>它是用来给HTML网页来设置外观或者样式的，包括文字的大小、颜色、字体，网页的背景色、背景图片等。</p><h3 id="3、CSS书写规则"><a href="#3、CSS书写规则" class="headerlink" title="3、CSS书写规则"></a>3、CSS书写规则</h3><ol><li>css代码是由选择器和一对括号组成的</li><li>大括号里面是由一条一条的声明语句组成</li><li>每一条语句都要使用英文状态下的分号</li><li>每一条语句是由“属性：值”组成</li><li>CSS中的属性值一般不加引号</li><li>在CSS中如果属性值为数值型数据的时候，一般情况下需要加单位（px）</li><li>在CSS中不能出现HTML标签</li></ol><a id="more"></a><h3 id="4、CSS代码的书写方式"><a href="#4、CSS代码的书写方式" class="headerlink" title="4、CSS代码的书写方式"></a>4、CSS代码的书写方式</h3><p>书写方式分为三种：嵌入式、外链式、行内式。</p><h5 id="嵌入式"><a href="#嵌入式" class="headerlink" title="嵌入式"></a>嵌入式</h5><p>将css代码键入到HTML文件中，通过<code>&lt;style&gt;</code>标签将css代码嵌入到网页中。<br>一般只将它放到<code>&lt;head&gt;</code>标签里。</p><h5 id="外链式"><a href="#外链式" class="headerlink" title="外链式"></a>外链式</h5><p>单独为写一个以.css为扩展名的文件。在<code>&lt;head&gt;</code>标签中使用<code>&lt;link /&gt;</code>标签引入</p><h5 id="行内式"><a href="#行内式" class="headerlink" title="行内式"></a>行内式</h5><p>将CSS代码书写在HTML标签的style属性中。<br>语法格式：<br>&lt;标签名 style=”属性:值; 属性:值;”&gt;&lt;/标签名&gt;</p><h3 id="5、注释"><a href="#5、注释" class="headerlink" title="5、注释"></a>5、注释</h3><p>格式：<br>/* 注释内容 */</p><h3 id="6、基本选择器"><a href="#6、基本选择器" class="headerlink" title="6、基本选择器"></a>6、基本选择器</h3><p>选择器是指通过一定的<code>语法规则</code>选取到对应的<code>HTML标记</code>，然后给这个对应的HTML标记设置样式。</p><p>选择器分为四大类：基本选择器、复合选择器、伪类选择器、属性选择器。</p><table><thead><tr><th>选择器</th><th>格式</th><th>含义</th><th>举例</th></tr></thead><tbody><tr><td>通用选择器</td><td>*{属性:值;}</td><td>通用选择器，将匹配HTML所有标签。不建议使用，IE6不支持，给大型网站增加负担</td><td>*{margin:0px;}</td></tr><tr><td>标签选择器</td><td>标签名{属性:值；}</td><td>标签选择器，匹配对应的HTML标签 。</td><td>p{font-size:14px;}</td></tr><tr><td>类选择器</td><td>.class属性值{属性:值;}</td><td>类选择器，给拥有指定的class属性值得元素设置样式</td><td>.box{width:800px;}</td></tr><tr><td>id选择器</td><td>#id属性值{属性:值;}</td><td>id选择器可以为标有特定ID的HTML元素指定特定的样式，只能使用一次。ID选择器以“#”来定义。</td><td>#title{font-size:14px;}</td></tr></tbody></table><h3 id="7、尺寸样式属性"><a href="#7、尺寸样式属性" class="headerlink" title="7、尺寸样式属性"></a>7、尺寸样式属性</h3><table><thead><tr><th>属性</th><th>值</th><th>含义</th></tr></thead><tbody><tr><td>height</td><td>auto: 自动，浏览器会自动计算高度。length：使用px定义高度。 %：基于包含它的块级对象的百分比高度。</td><td>设置元素的高度</td></tr><tr><td>width</td><td>同上</td><td>设置元素的宽度</td></tr></tbody></table><h3 id="8、文本与字体属性"><a href="#8、文本与字体属性" class="headerlink" title="8、文本与字体属性"></a>8、文本与字体属性</h3><table><thead><tr><th>属性名</th><th>值</th><th>含义</th></tr></thead><tbody><tr><td>color</td><td>#ff0000 或 red 或 rgb(3,5,8)</td><td>给文本设置颜色</td></tr><tr><td>text-align</td><td>left(居左)、right(居右)、center(居中)</td><td>设置文本的水平对齐方向</td></tr><tr><td>text-decoration</td><td>none(去掉文本修饰线)、underline(下划线)、overline(上划线)、line-through(删除线)</td><td>设置文本的修饰线</td></tr><tr><td>text-transform</td><td>capitalize、uppercase、lowercase</td><td>大小写转换或者首字母大写</td></tr><tr><td>line-height</td><td>固定值或百分比</td><td>设置行高</td></tr><tr><td>text-indent</td><td>px 或者 em</td><td>设置首行缩进  允许负值</td></tr><tr><td>letter-spacing</td><td>px</td><td>设置字符间距</td></tr><tr><td>word-spacing</td><td>px</td><td>设置单词间距</td></tr></tbody></table><h3 id="9、字体属性"><a href="#9、字体属性" class="headerlink" title="9、字体属性"></a>9、字体属性</h3><table><thead><tr><th>属性名</th><th>值</th><th>功能</th></tr></thead><tbody><tr><td>font-style</td><td>normal(正常)、italic(斜体)</td><td>设置文本为倾斜</td></tr><tr><td>font-weight</td><td>normal(正常)、bold</td><td>设置文字粗细</td></tr><tr><td>font-size</td><td>如12px、14px  记得加单位</td><td>给文本设置大小</td></tr><tr><td>font-family</td><td>微软雅黑、楷体、宋体……</td><td>给文本设置字体</td></tr><tr><td>font</td><td>举例：font: italic  bold 12px  “微软雅黑”</td><td>简写属性 能够同时给文本设置斜体、加粗、大小、字体  每一个值之间需要使用空格  并且一定要有顺序。</td></tr></tbody></table><h3 id="10、复合元素选择器"><a href="#10、复合元素选择器" class="headerlink" title="10、复合元素选择器"></a>10、复合元素选择器</h3><table><thead><tr><th>选择器</th><th>含义</th><th></th></tr></thead><tbody><tr><td>选择器1，选择器2{属性:值;}多元素选择器</td><td>多元素选择器，同时匹配选择器1和选择器2，多个选择器之间用逗号分隔</td><td>p,h1,h2{margin:0px;}</td></tr><tr><td><code>E F</code>{属性:值;}后代元素选择器</td><td>后代元素选择器，匹配所有属于E元素后代的F元素，E和F之间用空格分隔</td><td>#slidebar p{font-color:#990000;}</td></tr><tr><td>E&gt;F{属性:值;}子元素选择器</td><td>子元素选择器，匹配所有E元素的子元素F(只匹配一级   )</td><td>div &gt; p{color:#990000;}</td></tr><tr><td>E + F{属性:值;}相邻元素选择器</td><td>相邻元素选择器，匹配所有紧随E元素之后的同级元素F</td><td>div+div{color:#990000;}</td></tr></tbody></table><h3 id="11、列表样式属性"><a href="#11、列表样式属性" class="headerlink" title="11、列表样式属性"></a>11、列表样式属性</h3><p>列表包括：无序列表和有序列表。</p><p>在整个网页里无序列表使用的是最多的。</p><table><thead><tr><th>属性</th><th>值</th><th>含义</th></tr></thead><tbody><tr><td>list-style-type</td><td>none(将列表前面的项目符号去掉),disc(实心圆)，square(实心小方块),circle(空心圆)</td><td>设置列表前项目符号的类型。</td></tr><tr><td>list-style-position</td><td>inside(在里面),outside(在外面)</td><td>设置列表项标记的放置位置</td></tr><tr><td>list-style-image</td><td>url(图像路径)</td><td></td></tr><tr><td>list-style</td><td>square  inside  url(arrow.gif)</td><td>在一个声明中设置所有列表属性</td></tr></tbody></table><h3 id="12、伪类选择器"><a href="#12、伪类选择器" class="headerlink" title="12、伪类选择器"></a>12、伪类选择器</h3><p>什么是伪类选择器？</p><p>​    伪类选择器是用来给超级链接的不同状态来设置样式。</p><table><thead><tr><th>选择器</th><th>含义</th></tr></thead><tbody><tr><td><code>:link</code></td><td>向未被访问的链接添加样式</td></tr><tr><td><code>:visited</code></td><td>向已被访问的链接添加样式</td></tr><tr><td><code>:hover</code></td><td>当鼠标悬浮在元素上方时，向元素添加样式</td></tr><tr><td><code>:active</code></td><td>鼠标放在元素上面时，点击的一瞬间</td></tr></tbody></table><h3 id="13、对超级链接的美化"><a href="#13、对超级链接的美化" class="headerlink" title="13、对超级链接的美化"></a>13、对超级链接的美化</h3><p>我们通常会去掉超级链接的下划线，然后同时给超级链接设置一个颜色</p><p>一般情况下：</p><p>​        正常状态与访问过后的状态样式设置为一样</p><p>​        当鼠标放上的时候给其设置另外一个颜色     激活状态一般不会设置   因为激活状态的时间太短</p><p>举例：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">a:</span>link,a:<span class="class">visited </span>&#123;去掉超级链接的下划线;设置一个颜色;&#125;</span><br><span class="line"></span><br><span class="line"><span class="symbol">a:</span><span class="class">hover </span>&#123;设置另外一个颜色;增加一张下划线;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*对超级链接进行美化*/</span></span><br><span class="line"><span class="comment">/*正常状态与访问过后的状态*/</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span>,<span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>&#123;    </span><br><span class="line">​<span class="attribute">text-decoration</span>: none;  <span class="attribute">color</span>: <span class="number">#444</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*鼠标放上状态*/</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">​<span class="attribute">color</span>: <span class="number">#f00</span>;</span><br><span class="line">​<span class="attribute">text-decoration</span>: underline;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="14、属性选择器"><a href="#14、属性选择器" class="headerlink" title="14、属性选择器"></a>14、属性选择器</h3><p>什么是属性选择器？</p><p>​        属性选择器它是与标签的<code>属性名和属性</code>值有关系。</p><p>​        属性选择器是通过标签的<code>属性名和属性值</code>来匹配元素。</p><p>attr是英文“attribute”的简写，中文意思“属性”      属性名</p><p>val是英文单词“value”的简写，中文意思是‘’值‘      属性值</p><table><thead><tr><th>选择器</th><th></th><th></th></tr></thead><tbody><tr><td>[attr]</td><td>匹配所有具有attr属性的元素，不考虑它的值</td><td><code>h1[align]&#123;......&#125;</code>       <code>input[type][size]&#123;......&#125;</code></td></tr><tr><td>[attr = “val”]</td><td>匹配所有attr属性值等于val的元素</td><td>h1[align=”center”]{……}属性值一般加引号</td></tr><tr><td>[attr^ = “val”]</td><td>匹配元素中attr属性以指定值开头的所有元素</td><td>font[color^=”#ff”]</td></tr><tr><td>[attr$= “val”]</td><td>匹配元素中attr属性以指定值结尾的所有元素</td><td>font[color$=”00”]</td></tr><tr><td>[attr* = “val”]</td><td>匹配元素中attr属性中包含指定值的所有元素</td><td>font[color*=”00”]</td></tr></tbody></table><h3 id="15、继承性"><a href="#15、继承性" class="headerlink" title="15、继承性"></a>15、继承性</h3><p>特点：</p><p>1、外层元素身上的样式会被内层元素所继承。</p><p>2、如果内层元素与外层元素身上的样式相同时，外层元素的样式会被内层元素所覆盖。</p><p>3、并不是所有样式都能够被继承。只有文本与字体样式属性能够被继承。其他样式属性都不可以被继承。</p><p>注意：在实际工作中，我会给body标签设置字体大小及字体颜色。因为body是最外层的元素，内层的元素会继承外层的元素样式。</p><h3 id="16、优先级"><a href="#16、优先级" class="headerlink" title="16、优先级"></a>16、优先级</h3><p>行内样式 &gt; ID选择器 &gt; 类选择器 &gt; 标签选择器</p><p>一般而言，选择器指向的越准确，优先级就会越高。通常我们会用1来表示标签选择器的优先级，用10来表示类选择器的优先级，用100来表示ID选择器的优先级，用1000来表示行内样式。</p><p>标签选择器            1</p><p>类选择器                10</p><p>ID选择器                100</p><p>行内样式                1000</p><p>值越大表示其优先级越高。</p><p>不管是单个选择器还是多个选择器组合他们之间的优先级都可以通过上面这个公式来进行计算。我们将其值称之为权重值。权重值越大就表示其优先级越高。</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">例子：</span><br><span class="line"><span class="comment">/*类选择器*/</span></span><br><span class="line">.d&#123;</span><br><span class="line"><span class="symbol">color:</span> <span class="meta">#00f;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*标签选择器*/</span></span><br><span class="line">div&#123;</span><br><span class="line"><span class="symbol">color:</span> <span class="meta">#f00;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*ID选择器*/</span></span><br><span class="line">dd&#123;</span><br><span class="line"><span class="symbol">color:</span> <span class="meta">#0f0;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="params">&lt;body&gt;</span></span><br><span class="line"><span class="params">&lt;div class=&quot;d&quot; id=&quot;dd&quot; style=&quot;color:skyblue;&quot;&gt;</span></span><br><span class="line"><span class="params">&lt;h2&gt;</span>无聊才读书<span class="params">&lt;/h2&gt;</span></span><br><span class="line"><span class="params">&lt;p&gt;</span> 个人网站<span class="params">&lt;/P&gt;</span></span><br><span class="line"><span class="params">&lt;/div&gt;</span></span><br><span class="line"><span class="params">&lt;/body&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="17、-important属性"><a href="#17、-important属性" class="headerlink" title="17、!important属性"></a>17、<code>!important</code>属性</h3><p>important 在英文中的含义是“重要的”意思</p><p><code>!important</code>在css中的作用：主要是用来提升属性的权重。其属性的权重值无穷大。</p><p>语法格式：属性：值  !important;</p><p>​                    </p><h3 id="18、背景样式属性"><a href="#18、背景样式属性" class="headerlink" title="18、背景样式属性"></a>18、背景样式属性</h3><table><thead><tr><th>属性</th><th>值</th><th>含义</th></tr></thead><tbody><tr><td>background-color</td><td>#ff0000、red、rgb(255,0,0)</td><td>背景颜色</td></tr><tr><td>background-image</td><td>url(图像路径和名称);</td><td>背景图像</td></tr><tr><td>background-repeat</td><td>repeat、repeat-x、repeat-y、no-repeat</td><td>背景图像是否重复</td></tr><tr><td>background-position</td><td>center center或x% y%或xpos ypos</td><td>背景图像起始位置</td></tr><tr><td>background-attachment</td><td>scroll(滚动)、fixed(固定)</td><td>设置背景图像是否固定或者随着页面的其余部分滚动</td></tr><tr><td>background</td><td>url(1.jpg) no-repeat  center center fixed</td><td>设置背景的简写形式</td></tr></tbody></table><ul><li><p>background-color：用于给元素设置背景颜色 但是前提这个元素要么有内容，要么有宽度和高度才可以。</p></li><li><p>background-image  用于给元素设置背景图片  图片的地址一定放在url（图片的地址） 但是前提这个元素要么有内容，要么有宽度和高度才可以  背景图片默认是平铺的</p></li><li><p>background-repeat 是用于设置0背景图片是否平铺    repeat（是平铺）、repeat-x（水平方向平铺）、repeat-y（垂直方向平铺）、 no-repeat（不平铺）</p></li><li><p>background-position 用于设置背景图片的位置  如果要设置背景图片的位置  这个属性就会有两个值</p></li><li><p>background-position：水平位置  垂直位置      </p><p>这个两个位置的表示方式有三种 ： 英文单词   固定值   百分比     这三种方式可以混合使用。</p><p>​    1.英文单词的表示方式</p><p>​        水平位置：left（居左）、center（居中）、right（居右）</p><p>​        垂直位置：top（居上）、center（居中）、bottom（居下）</p><p>​    2.固定值得表示方式</p><p>​    3.百分比的表示方式</p><p>​        </p></li><li><p>background：简写属性  它可以同时设置多个样式    比如 背景颜色、背景图片、背景图片是否平铺   水平位置  垂直位置</p></li><li><p>background：简写属性  其值得个数不定 顺序也不定 每一个值之前使用空格分隔</p></li></ul><h3 id="19、标准文档流"><a href="#19、标准文档流" class="headerlink" title="19、标准文档流"></a>19、标准文档流</h3><p>HTML网页在制作的时候，都遵循一个“流”的规则：从左至右、从上到下</p><p>1）空白折叠现象</p><p>2）高矮不齐，底部对齐</p><h3 id="20、浮动"><a href="#20、浮动" class="headerlink" title="20、浮动"></a>20、浮动</h3><p>浮动可以让元素脱离标准文档流 ，就可以实现让多个元素排在同一行，并且可以设置宽高。</p><p>浮动它通过一个浮动属性来实现</p><p>float：这个属性有两个值  left（向左浮动）向左移动、right（向右浮动） 向右移动</p><p>浮动元素的特色：</p><ul><li>浮动元素它脱离标准文档流，不在占用空间了</li><li>我们可以把浮动元素理解为“漂”</li><li>浮动元素它的层级要比标准文档流里面的元素层级要高，它会将标准文档流中的元素给压盖住</li><li>浮动元素它会向左或者向右进行浮动（移动）</li><li>浮动元素它遇到了父元素的边框然后就停止了浮动</li><li>浮动元素它还会遇到上一个浮动元素后就停止了浮动</li><li>浮动元素浮动以后 其父元素不会再包裹着浮动元素</li><li>我们将行内元素进行浮动以后 那么这个行内元素它会变成块级元素</li></ul><h3 id="21、清楚浮动"><a href="#21、清楚浮动" class="headerlink" title="21、清楚浮动"></a>21、清楚浮动</h3><p>注意：只要有浮动  那么必须有清除浮动</p><p>为什么清除浮动？</p><p>​    因为经过浮动了元素 它会影响到它下面的元素的排版布局  还有浮动元素的父元素没有将浮动元素包裹着</p><p>只要清除了浮动  不会影响到浮动元素的下面进行排版布局  浮动元素的父元素会将浮动元素从视觉上包裹着</p><p>清除浮动有以下三种方法：</p><ul><li>给浮动元素的父元素设置一个固定的高度（不建议，因为一个元素的高度一般情况下不是手动设置的 应该是有其自身的内容来撑高的）</li><li>使用清除浮动的样式属性  clear（clear是专用于清除浮动的 这个属性有三个值  clear：left；清除左浮动  clear：right；清除右浮动  clear：both；两者都清除  。这个属性一般用在最后 一个浮动元素的下面 在最后一个浮动元素的下面新建一个空白的div 这个div什么都不要放  不要给这个div里面放置内容 它只做一件事就是清除浮动）</li><li>使用overflow：hidden 这个属性来清除浮动</li></ul><h3 id="22、盒子模型"><a href="#22、盒子模型" class="headerlink" title="22、盒子模型"></a>22、盒子模型</h3><p>在css中一个盒子的组成部分：内容（content）+内填充（padding）+边框（border）+外边距（margin）</p><p>一个盒子的主要属性：width、height、padding、border、margin </p><p>width：指“宽度”的意思  但是这里的宽度指的盒子里面的内容的宽度  而不是盒子的宽度</p><p>height：指“高度”的意思  但是这里的高度指的盒子里面的内容的高度 而不是盒子的高度</p><p>padding：是“内填充”的意思，指的盒子里面的内容到盒子边框的距离</p><p>border：是“外边距”的意思  指的盒子的边框</p><p>margin：是“外边框”的意思  指的是盒子与盒子之间的间距</p><h3 id="23、padding"><a href="#23、padding" class="headerlink" title="23、padding"></a>23、padding</h3><p>padding是“内填充”的意思  指的是盒子中间的内容到边框的这一段距离</p><p>padding 是有四个方向的，描述这些方向的方法有两种：第一种我们称之为<code>小属性</code>，第二种我们称之为<code>简写属性</code></p><p> padding-top: 上内填充</p><p>padding-right：右内填充</p><p>padding-bottom：下内填充</p><p>padding-left：左内填充</p><p>简写属性是有顺序的，按照顺时针（上右下左）这个顺序。</p><h3 id="24、margin"><a href="#24、margin" class="headerlink" title="24、margin"></a>24、margin</h3><p>margin 它表示“外边距”的意思  它是指盒子与盒子之间的距离</p><p>margin 它也有4个方向的，对方向的描述方法也有两种：第一种是<code>小属性</code>，第二种我们称之为<code>简写属性</code>.</p><p>小属性：</p><p>margin-top：上外边距</p><p>margin-right：有外边距</p><p>margin-bottom：下外边距</p><p>margin-left：左外边距</p><p>简写属性：</p><p>margin：简写属性它是有方向的   这里的方向是一个顺时针的方向 他的方向顺序是：上、右、下、左。</p><p>margin：10px；表示上右下左这四个方的外边都是10px</p><p>margin：10px  20px；表示上下两个方向的外边距为10px，左右外边距为20px</p><p>margin：10px 20px 30px；表示上边距为10px，左右外边距为20px，下边距为30px。</p><p>margin：10px 20px 30px 40px；表示上边距为10像素，右边距为20像素，下边距为30像素，左边距为40像素</p><h3 id="25、margin塌陷现象"><a href="#25、margin塌陷现象" class="headerlink" title="25、margin塌陷现象"></a>25、margin塌陷现象</h3><p>什么是margin的塌陷现象：</p><p>1、在标准的文档流中 <code>竖直方向</code>的margin值不会叠加 它会取较大的值</p><p>2、<code>横着方向</code>是没有margin的塌陷现象</p><p>3、<code>浮动元素</code>它是没有margin的塌陷现象的</p><h3 id="26、margin居中"><a href="#26、margin居中" class="headerlink" title="26、margin居中"></a>26、margin居中</h3><p>margin的值可以是auto 。auto表示“自动”的意思，当左外边距与右外边距的值都是auto时那么这个盒子就会水平居中。</p><p>注意：</p><ul><li><p>使用margin来实现水平居中时 一定要有固定的宽度（给这个盒子设置一个宽度）只有块元素可以实现水平居中，行内元素是不能实现居中的</p></li><li><p>只有标准文档流中的盒子才可以使用margin来实现水平居中</p></li><li><p>margin属性是用来实现盒子的水平居中，而不是文本的水平居中</p><p>text-align只能实现文本的对齐。</p></li><li><p>善于使用父元素的padding而不是使用子元素的margin</p></li></ul><p><img src="/assets/blogImg/20200520094247.png"></p><p>要解决上图的问题：有两种方法</p><p>第一种给父元素设置一个边框线</p><p>但是这个方法不常用，因为边框是用来调试代码的，很少会给一个盒子设置边框。</p><p>第二种方法：不要使用子元素的margin 而是要使用其父元素的padding。</p><p>说明：margin这个属性它本意是用于来描述兄弟与兄弟元素之间的关系，不是用于描述父子元素之间的关系的。如果是父子元素的关系，就最好使用给其父元素设置padding属性。</p><h3 id="27、border属性"><a href="#27、border属性" class="headerlink" title="27、border属性"></a>27、border属性</h3><ul><li><p>border：它是“边框”的意思</p></li><li><p>边框有三个要素: 粗细、线型、颜色</p><p>语法格式：</p><p>​                border : 粗细  线型  颜色</p><p>​                border：1px  solid  #f00;</p></li><li><p>说明：边框的颜色可以省略不写，如果不写默认是黑色，其他的两个属性不能不写。</p></li><li><p>其实边框也是有四个方法：</p><p>border-top：上边框</p><p>border-right：右边框</p><p>border-bottom:下边框</p><p>border-left: 左边框</p></li></ul><h3 id="28、display属性"><a href="#28、display属性" class="headerlink" title="28、display属性"></a>28、display属性</h3><p>display  它是“显示”的意思，他就是用来进行行内元素与块级元素之间的相互转换。将隐藏的元素显示或者是将显示的元素进行隐藏。</p><p>display  这个属性取值：inline（行内）、block（块级）、none（无）</p><ul><li><p>当我们将一个行内元素的display属性的值设置为block以后，那么这个元素就会被转换为块级元素。</p></li><li><p>当我们将一个块级元素的display属性值设置为inlinek以后，那么这个元素就会被转换成行内元素。</p></li></ul><p>注意：</p><p>​        如果说将行内元素转换为块级元素，那么这个元素它就会拥有块级元素的特点</p><p>​    如果说将块级元素转换为行内元素，那么这个元素它就会拥有行内元素的特点。</p><p>将一个显示的元素隐藏、将一个隐藏的元素显示。</p><p><code>display：none（将一个显示的元素进行隐藏）</code></p><p><code>display：block（将一个隐藏的元素显示出来）</code></p><p><code>这两个功能主要是JavaScript来使用</code></p><h3 id="29、固定位置"><a href="#29、固定位置" class="headerlink" title="29、固定位置"></a>29、固定位置</h3><p>position 在英语中表示“位置”的意思，它主要是用于实现对元素的定位</p><p>在css中定位分为三种：</p><p>​    position：fixed            固定定位</p><p>​    position：relative        相对定位</p><p>​    position：absolute      绝对定位</p><p>注意：在使用定位属性时，一定要配合定位的坐标来使用</p><p>​            left：表示定位的元素离左边多远</p><p>​            right：表示定位的元素离右边多远</p><p>​            top：表示定位的元素离上边多远</p><p>​            bottom：表示定位的元素离下边多远</p><ol><li>固定定位</li></ol><p>语法：position：fixed</p><p>固定定位,它是相对于浏览器窗口来进行定位。不管页面如何滚动，固定定位元素显示的位置不会改变。</p><p>特点：</p><ul><li>​        固定定位元素它脱离了标准文档流</li><li>​        固定定位元素的层级比标准文档流里面的元素要高，所以固定定位元素它会压盖住标准文档流里面完的元素。</li><li>​        固定定位元素它不再占用空间</li><li>​        固定定位元素它显示的位置不会随着浏览器滚动而滚动</li></ul><h3 id="30、相对定位"><a href="#30、相对定位" class="headerlink" title="30、相对定位"></a>30、相对定位</h3><p>语法：position：relative；</p><p>相对定位它是相对于“原来的自己”来进行定位。</p><p>特点：</p><ul><li>​    相对定位元素它没有脱离标准文档流</li><li>​    相对定位元素如果没有设置定位的坐标，那么相对定位元素它还在原来的位置</li><li>​    相对定位元素设置了定位的坐标以后，那么它会在原来的位置留下一个坑。</li><li>​    相对定位元素它会将标准文档流中的元素压盖住。</li><li>​    相对定位元素的定位坐标值可以是负数。</li></ul><p>注意：</p><p>相对定位元素他会在老家留下一个坑，所以一般情况下它很少单独使用，相对定位元素它主要是用来配合“绝对定位”元素来使用的。</p><h3 id="31、绝对定位"><a href="#31、绝对定位" class="headerlink" title="31、绝对定位"></a>31、绝对定位</h3><p>语法：position：absolute；</p><p>什么是绝对定位？</p><p>绝对定位元素是相对于“祖先定位元素”来进行定位</p><p>什么是祖先定位元素？</p><p>绝对定位元素它会先去查其父元素是否设置了定位的属性  如果有设置定位的属性，那么他就会相对于其父元素来进行定位；但是如果他的父元素没有设置定位属性 那么他就会去查找其父元素的上一级元素是否设置了定位的属性；如果有设置就相对于其父元素的上一级元素进行对位。但是如果没有设置，那么会继续往向一级进行查找，如果其祖先元素都没有设置定位属性，那么它会相对于“浏览器窗口”来进行定位！</p><p>特点：</p><ul><li><p>绝对定位元素它脱离了标准文档流</p></li><li><p>绝定定位元素它不在占用空间</p></li><li><p>绝定定位元素它会压盖住标准文档流中的元素</p></li><li><p>绝对定位元素它会相对于其“祖先定位元素”来进行定位，这里的祖先定位元素可以是相对定位也可以是固定定位还可以是绝对定位   但是我们一般只会给其祖先定位元素设置相对定位属性。</p><p>“子绝父相”子元素设置绝对定位，父元素设置相对定位。</p></li></ul><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">html</span>&gt;</span>                  /*示例代码*/</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">title</span>&gt;</span>绝对定位<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                *&#123;</span></span><br><span class="line"><span class="xml">                    margin:0;</span></span><br><span class="line"><span class="xml">                    padding:0;</span></span><br><span class="line"><span class="xml">                &#125;</span></span><br><span class="line"><span class="xml">                .box&#123;</span></span><br><span class="line"><span class="xml">                    width:600px;</span></span><br><span class="line"><span class="xml">                    border: 1px solid #000;</span></span><br><span class="line"><span class="xml">                    margin:100px auto;</span></span><br><span class="line"><span class="xml">                    /*给其设置一个相对定位*/</span></span><br><span class="line"><span class="xml">                    position:telative;</span></span><br><span class="line"><span class="xml">                &#125;</span></span><br><span class="line"><span class="xml">                .box div&#123;</span></span><br><span class="line"><span class="xml">                    width:100px;</span></span><br><span class="line"><span class="xml">                    height:100px;</span></span><br><span class="line"><span class="xml">                &#125;</span></span><br><span class="line"><span class="xml">                .div1&#123;</span></span><br><span class="line"><span class="xml">                    background-color:#f00;</span></span><br><span class="line"><span class="xml">                &#125;</span></span><br><span class="line"><span class="xml">                .div2&#123;</span></span><br><span class="line"><span class="xml">                    background-color:#0f0;</span></span><br><span class="line"><span class="xml">                    /*绝对定位属性*/</span></span><br><span class="line"><span class="xml">                    position:absolute;</span></span><br><span class="line"><span class="xml">                    /*设置定位的坐标*/</span></span><br><span class="line"><span class="xml">                    right:0px;</span></span><br><span class="line"><span class="xml">                    top:0px;</span></span><br><span class="line"><span class="xml">                &#125;</span></span><br><span class="line"><span class="xml">                .div3&#123;</span></span><br><span class="line"><span class="xml">                    background-color:#00f;</span></span><br><span class="line"><span class="xml">                &#125;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div1&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div2&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div3&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="31、z-index属性"><a href="#31、z-index属性" class="headerlink" title="31、z-index属性"></a>31、z-index属性</h3><ul><li><p>z-index 表示谁压盖着谁，数值大的会压盖住数值小的</p></li><li><p>只有定位的元素才有z-index值  ，只有设置了固定定位、相对定位、绝对定位的元素他们才会拥有z-index</p></li><li><p>如果多个定位元素没有设置z-index属性或者z-index值设置一样，那么写在HTML后面的定位元素就会压盖住前面的定位元素</p></li></ul><h3 id="32、结构伪类"><a href="#32、结构伪类" class="headerlink" title="32、结构伪类"></a>32、结构伪类</h3><p>1）、CSS3与CSS2之间的区别</p><p>CSS3=CSS2+新语法+新的属性</p><p>就是对CSS2进行扩充 删减 优化</p><p>2）、结构伪类</p><table><thead><tr><th>选择器</th><th>功能</th></tr></thead><tbody><tr><td>E:first-child</td><td>匹配第一个孩子</td></tr><tr><td>E:last-child</td><td>匹配最后一个孩子</td></tr><tr><td>E:nth-child（n）</td><td>匹配第n个孩子</td></tr><tr><td>E:nth-child（2n）</td><td>匹配偶数的孩子  如：2、4、6…..</td></tr><tr><td>E:nth-child（even）</td><td></td></tr><tr><td>E:nth-child（2n+1）</td><td>匹配奇数的孩子  如：1、3、5……</td></tr><tr><td>E:nth-child（odd）</td><td></td></tr><tr><td>E:only-child</td><td>匹配有且只有一个孩子</td></tr></tbody></table><h3 id="33、border-collapse"><a href="#33、border-collapse" class="headerlink" title="33、border-collapse"></a>33、border-collapse</h3><p>这个属性主要用来合并表格的边框线 ，其值为：collapse</p><p><code>border-collapse:collapse;</code></p><h3 id="34、伪元素"><a href="#34、伪元素" class="headerlink" title="34、伪元素"></a>34、伪元素</h3><table><thead><tr><th>选择器</th><th>功能</th></tr></thead><tbody><tr><td>:first-letter</td><td>操作当前元素中第一个字</td></tr><tr><td>:first-line</td><td>操作当前元素中第一行</td></tr><tr><td>::before</td><td>在之前插入，在一个盒子内部的最前面</td></tr><tr><td>::after</td><td>在之后插入，在一个盒子内部的最后面</td></tr></tbody></table><p>::before 要在当前元素之中插入文字  必须将文字放在content中</p><h3 id="35、文本阴影"><a href="#35、文本阴影" class="headerlink" title="35、文本阴影"></a>35、文本阴影</h3><p>text-shadow:水平阴影  垂直阴影  模糊距离  阴影颜色</p><p>注释：text-shadow 属性向文本添加一个或多个阴影。该属性是逗号分隔的阴影列表，每个阴影有两个或三个长度值和一个可选的颜色值进行规定。省略的长度是0.</p><table><thead><tr><th>值</th><th>描述</th><th></th></tr></thead><tbody><tr><td>h-shadow</td><td>必需。水平阴影的位置。允许负值。</td><td></td></tr><tr><td>v-shadow</td><td>必需。垂直阴影的位置。允许负值。</td><td></td></tr><tr><td>blur</td><td>可选。模糊的距离。</td><td></td></tr><tr><td>color</td><td>可选。阴影的颜色。参阅css颜色值</td><td></td></tr></tbody></table><p>描述：</p><ul><li>文字阴影可以有多组值，多组之间用逗号隔开就可以</li><li>水平阴影正值阴影在右边，负值在左边。</li><li>垂直阴影正值在下边，负值在上边。</li><li>模糊强度，值越大越模糊。</li></ul><h3 id="36、盒子阴影"><a href="#36、盒子阴影" class="headerlink" title="36、盒子阴影"></a>36、盒子阴影</h3><p>box-shadow：水平方向阴影  垂直方向阴影  模糊距离   阴影尺寸  阴影颜色  内/外阴影  </p><p>水平阴影和垂直阴影必须得写，其余的是可以省略不写；</p><p>语法：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">box-shadow:h-shadow </span> v-<span class="keyword">shaadow </span> <span class="keyword">blur </span> spread  color  <span class="keyword">inset;</span></span><br></pre></td></tr></table></figure><p>注释：box-shadow向框添加一个或多个阴影。该属性是由逗号分隔的阴影列表，每个阴影是由2-4个长度值。可选的颜色值以及可选的inset关键词来规定。省略长度的值是0。</p><table><thead><tr><th>值</th><th>描述</th><th>测试</th></tr></thead><tbody><tr><td>h-shadow</td><td>必需。水平阴影的位置。允许负值。</td><td></td></tr><tr><td>v-shadow</td><td>必需。垂直阴影的位置。允许负值。</td><td></td></tr><tr><td>blur</td><td>可选。模糊距离。</td><td></td></tr><tr><td>spread</td><td>可选。阴影的尺寸。</td><td></td></tr><tr><td>color</td><td>可选。阴影的颜色。请参阅CSS颜色值。</td><td></td></tr><tr><td>inset</td><td>可选。将外部阴影（outset）改为内部阴影。</td><td></td></tr></tbody></table><ul><li>盒子阴影可以有多组值，多组之间用逗号隔开就可以。</li><li>水平阴影正值阴影在右边，负值在左边。</li></ul><h3 id="37、圆角矩形"><a href="#37、圆角矩形" class="headerlink" title="37、圆角矩形"></a>37、圆角矩形</h3><p>语法：</p><p><code>border-radius：左上 右上 右下 左下；</code></p><p>如果四个值都是一样的话，写一个就可以了。</p><h3 id="38、透明度"><a href="#38、透明度" class="headerlink" title="38、透明度"></a>38、透明度</h3><p>只要有颜色都可以实现透明度。</p><p>rgba（红色、绿色、蓝色、透明度）</p><p>a：表示透明度的意思  透明度取值：0~1之间   0表示完全透明  1表示不透明</p><ul><li><p>背景颜色透明：</p><p>background-color：rgba（255,255,255,0.3）</p></li><li><p>文本颜色透明：</p><p>color：rgba（255,255,255,0.3)</p></li><li><p>边框颜色透明</p><p>border：1px solid rgba（255,255,255,0.5）</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/blogImg/202005202332.jpg&quot; alt=&quot;CSS快速掌握&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;1、CSS简介&quot;&gt;&lt;a href=&quot;#1、CSS简介&quot; class=&quot;headerlink&quot; title=&quot;1、CSS简介&quot;&gt;&lt;/a&gt;1、CSS简介&lt;/h3&gt;&lt;p&gt; css（cascading style sheets的缩写）翻译为“层叠样式表”或者“级联样式表”，简称样式表。&lt;/p&gt;
&lt;h3 id=&quot;2、CSS的主要作用&quot;&gt;&lt;a href=&quot;#2、CSS的主要作用&quot; class=&quot;headerlink&quot; title=&quot;2、CSS的主要作用&quot;&gt;&lt;/a&gt;2、CSS的主要作用&lt;/h3&gt;&lt;p&gt;它是用来给HTML网页来设置外观或者样式的，包括文字的大小、颜色、字体，网页的背景色、背景图片等。&lt;/p&gt;
&lt;h3 id=&quot;3、CSS书写规则&quot;&gt;&lt;a href=&quot;#3、CSS书写规则&quot; class=&quot;headerlink&quot; title=&quot;3、CSS书写规则&quot;&gt;&lt;/a&gt;3、CSS书写规则&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;css代码是由选择器和一对括号组成的&lt;/li&gt;
&lt;li&gt;大括号里面是由一条一条的声明语句组成&lt;/li&gt;
&lt;li&gt;每一条语句都要使用英文状态下的分号&lt;/li&gt;
&lt;li&gt;每一条语句是由“属性：值”组成&lt;/li&gt;
&lt;li&gt;CSS中的属性值一般不加引号&lt;/li&gt;
&lt;li&gt;在CSS中如果属性值为数值型数据的时候，一般情况下需要加单位（px）&lt;/li&gt;
&lt;li&gt;在CSS中不能出现HTML标签&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>【致自己-心灵鸡汤】把日子过好，比什么都重要</title>
    <link href="https://blogs.zhaozf.site/428f9e93/"/>
    <id>https://blogs.zhaozf.site/428f9e93/</id>
    <published>2020-05-18T07:50:17.000Z</published>
    <updated>2020-05-18T08:12:25.224Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/blogImg/202005181606.jpg"></p><p><strong>一辈子不长，过好自己的生活。</strong></p><p>漫漫人生，得与失，苦与乐，爱与恨，相遇与离别，来回反复，交替更迭。</p><p>有时候，竟让人看不清也想不透：到底什么才是最重要的，什么才能让人最欢喜？</p><p>是久旱逢甘露？还是他乡遇故知？是洞房花烛夜？还是金榜题名时？</p><a id="more"></a><p>也许都不是，因为人生不像是在夜空中绽放的烟花，只追求一时的绚烂璀璨。</p><p>生活更多的是，三餐与四季的平凡恬淡、心满意足。</p><p>其实对于大多数人来说，把自己的日子过好，比什么都重要。</p><p>这让人不禁想起一首打油诗，句句不离生活小事，却平淡而有味。</p><p>“早起提笼去遛鸟，晚来种花又养草。开心吃好三餐饭，烦恼不赶自己跑。”</p><p>不知你是否也有过这样的感受：</p><p>有时候觉得生活挺不容易的，总有一些烦恼，把自己困住了。有些烦恼，在别人看来小到不值一提，对自己来说，却被压得喘不过气。想挣脱却深深感到无力，甚至因此茶饭不思。</p><p>然而，一味地放任自己沉沦于这种情绪中，往往无济于事。</p><p>不如打起精神，做些其他小事情，让自己先走出不良情绪的怪圈，再去想办法解决。</p><p>就算只是先静下来，好好睡上一觉，醒后，心中忧烦之事自然也释怀了几分。</p><p>或是去散散步，看看花开，听听鸟叫，在鸟语花香的小惬意中，偷得浮生半日闲，忘却世态的炎凉。</p><p>即便难题还是摆在那里，不会自动消失，但心态已然不同，心大了，问题就小了。</p><p><img src="/assets/blogImg/202005181608.jpg"></p><p><strong>生活从来都是如人饮水，冷暖自知。</strong></p><p>每个人都有自己的活法，幸福不需要攀比，美好与否也无需别人下结论。</p><p>别活在别人的眼里，也别活在世俗的目光里，自己内心的富足和愉悦才是最重要的。</p><p>曾有一位画家，想画出一幅人见人夸的画，于是他将自己的一幅画和一支笔挂在街边，并附上一行文字：若觉得有欠佳之笔，请不吝赐教。</p><p>隔天，他过来取画，看到的是一幅被圈圈点点的画，几乎没有一笔不被指责。</p><p>画家顿时心灰意冷，垂头丧气地走向回家的路。</p><p>拐进一个巷子时，画家看到了一位老者在巷角中作画，引得众人围观。</p><p>只见老者脸上怡然自得，画家于是上前，跟老者讨教画画之道。</p><p>老者听闻画家的经历后，笑着说：“我没什么技巧，但每次画完一幅画，我心中已经十分欢喜，无须他人半句夸赞。”</p><p>画家恍然大悟，原来，自己才是人生的主角，与他人无关，不必总活在别人的眼里。</p><p>立身于世，若烹小鲜，难调众口。</p><p>你善良，有人会说这是虚情假意；你优秀，有人会说这是运气而已；你感恩，有人会说这是卑躬屈膝……</p><p>活在别人眼里，就容易因别人而乱了心神，将自己置于乱麻之中。</p><p>想把日子过好，就别把自己的快乐建立在别人的目光上。</p><p>一辈子不长，就算无人欣赏，也要懂得自寻乐趣，过好自己的生活。</p><p><img src="/assets/blogImg/202005181609.jpg"></p><p><strong>生活虽淡，知足就好。</strong></p><p>心神安定，身体健康，试问这世间还有什么比这更珍贵的呢？</p><p>广厦千间，腰缠万贯，都不如健康无忧。</p><p>健康地活着，本身就已是最大的拥有，这样一想，心里便觉得安稳快乐了许多。</p><p>生活总是倒逼着我们在追求各种各样的东西，有时明明已经拥有很多，却还是不想停下来。</p><p>一路走，一路丢，待某天蓦然回首，才发现最珍贵的东西曾握在自己手中。</p><p>历尽磨难，方知平安珍贵；历尽险恶，方知坦荡难得；历尽争吵，方知相伴就好；历尽繁华，方知知足可贵。</p><p>人生最累的，莫过于站在幸福里找幸福，身在福中不知福。</p><p>人不可能事事如意，心却可以知足常乐。</p><p>哲学家苏格拉底，一开始和几个朋友住在七八平米的房间，很拥挤但他仍觉得很快乐，因为有志同道合的朋友一起，可以随时交流聊天。</p><p>后来，朋友一个个搬了出去，只剩他一人，他也乐呵，因为还有很多书陪伴他。</p><p>再后来，他搬进了七层高的大楼，住在最底层，环境潮湿而吵闹，他倒觉得搬东西和进进出出很方便。</p><p>一年后，他把房子让给了一位身有残疾的老人，自己住上了最高那一层，他觉得爬上爬下可以锻炼身体，光照也好，一切都挺好。</p><p>世事无常，拥有小河，就为小河的细水长流而欢喜，别只因得不到大海的波澜壮阔而闷闷不乐。</p><p>拥有绿叶，就为绿叶的勃勃生机而欣然，别只因为得不到花朵的妩媚动人而郁郁寡欢。</p><p>并不是因为命好才一生顺遂，是因为懂得知足，才能常常感到心满意足。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/blogImg/202005181606.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一辈子不长，过好自己的生活。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;漫漫人生，得与失，苦与乐，爱与恨，相遇与离别，来回反复，交替更迭。&lt;/p&gt;
&lt;p&gt;有时候，竟让人看不清也想不透：到底什么才是最重要的，什么才能让人最欢喜？&lt;/p&gt;
&lt;p&gt;是久旱逢甘露？还是他乡遇故知？是洞房花烛夜？还是金榜题名时？&lt;/p&gt;
    
    </summary>
    
    
      <category term="致自己" scheme="https://blogs.zhaozf.site/tags/%E8%87%B4%E8%87%AA%E5%B7%B1/"/>
    
      <category term="心灵鸡汤" scheme="https://blogs.zhaozf.site/tags/%E5%BF%83%E7%81%B5%E9%B8%A1%E6%B1%A4/"/>
    
  </entry>
  
  <entry>
    <title>【致自己-心灵鸡汤】最好的社交状态，藏在这四个细节里</title>
    <link href="https://blogs.zhaozf.site/1046f855/"/>
    <id>https://blogs.zhaozf.site/1046f855/</id>
    <published>2020-05-18T07:45:31.000Z</published>
    <updated>2020-05-18T08:03:07.399Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/blogImg/202005181403.jpg"></p><p>人与人之间保持一杯水的距离。</p><p>有人说：“人生如尺，必须有度。感情如面，最忌越界。”</p><a id="more"></a><p>有这样一个小常识：</p><p>如果地球和太阳的距离再近一些，地球就会变成“火焰山”，瞬间生灵涂炭；但如果再远一些，地球就是“广寒宫”，几乎所有生命都无法存活。</p><p>而现在，它们的距离恰到好处的。这不远不近的距离给我们带来了富饶的物产、宜人的气候，让地球不像其他星球那样，荒芜、孤独。</p><p>人与人之间的距离也同样如此。一杯水，就是你们之间最好的距离。</p><p>梁实秋的《谈友谊》里写道：“君子之交淡如水，因为淡所以才能不腻，才能持久。”</p><p>好的友谊就像一杯清水，看似平淡无味，实则解渴清凉，平凡却不可或缺。</p><p>而失去距离感的友谊，就像一杯糖水，过甜、过腻，无法解渴，也无益于身体。</p><p><img src="/assets/blogImg/201907122051.jpg"></p><p>人生就像一张很大的拼图，开始时都是一张白纸。 你所遇到的人、经历的故事就是这张拼图中的一片，都有专属的位置，放对了便能使图案逐渐丰富起来。 </p><p>但若是放错了，把不属于这张图的那片强行放进去，那你也得不到最终的完整。</p><p>人与人之间，亦是如此，那些让你感到消耗精力、劳心伤神的关系，也许是错的。</p><p>真正舒服的关系，相处起来应该是容易的，快乐的。</p><p>和相处舒服的人在一起是什么样？ </p><p>几十年来，杨绛和钱钟书的故事一直让众人羡慕不已：二人都喜欢读书，时常在学习之余，展开读书竞赛，比谁读的书多，然后再交流心得。 闲暇时光，各自写作，互相鼓励，彼此成就，平淡日子里，总少不了温情时刻。</p><p>能让你相处舒服、放下防备的，是能伴你走过一生的人。</p><p><img src="/assets/blogImg/202005181415.jpg"></p><p>总有人会问：“怎么才能认识更多优秀的人？”</p><p>普遍的回答都是：你要努力让自己变优秀。</p><p>一位青年自诩自己擅长社交，懂得积累人脉，手机里有很多商业大佬的电话。</p><p>在众人的质疑下，主持人提议让青年现场打电话，证明一下自己。</p><p>令人尴尬的是，青年连拨了好几个电话，却没有一位商业大佬接他的电话。</p><p>当你不够强大时，结交再多人脉都是无效的。</p><p>你还是你，他还是他，除了手中多了一张名片外，一切都未改变。</p><p>天下没有免费的午餐，唯有脚踏实地的努力，才是根本。</p><p>你若盛开，清风自来。</p><p>踏踏实实耕耘人生，才能绽放不一样的烟火。</p><p><img src="/assets/blogImg/201907122049.jpg"></p><p>在《世说新语》中有一段这样的记载：</p><p>管宁和华歆曾是一对好友，他们同在园中锄草，看见地上有一片金。</p><p>管宁仍然挥动着锄头，视金子如同瓦石，但华歆却高兴地拾起金片，看了看又扔了它。</p><p>又有一次，两人同坐在一张席上读书。有达官贵人坐车经过，管宁照旧读书，但华歆却放下书出去观看。</p><p>等到华歆回来后，管宁就割开席子说道：“你不再是我的朋友。”</p><p>欣赏一个人，始于颜值，敬于才华，合于性格，久于善良，终于人品。</p><p>懂得保持朋友圈的纯净，于千万人之中，寻得良师益友。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/blogImg/202005181403.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;人与人之间保持一杯水的距离。&lt;/p&gt;
&lt;p&gt;有人说：“人生如尺，必须有度。感情如面，最忌越界。”&lt;/p&gt;
    
    </summary>
    
    
      <category term="致自己" scheme="https://blogs.zhaozf.site/tags/%E8%87%B4%E8%87%AA%E5%B7%B1/"/>
    
      <category term="心灵鸡汤" scheme="https://blogs.zhaozf.site/tags/%E5%BF%83%E7%81%B5%E9%B8%A1%E6%B1%A4/"/>
    
  </entry>
  
  <entry>
    <title>【致自己-心灵鸡汤】三十岁前，一定要坚持的几件事</title>
    <link href="https://blogs.zhaozf.site/f033f067/"/>
    <id>https://blogs.zhaozf.site/f033f067/</id>
    <published>2020-05-18T07:17:54.000Z</published>
    <updated>2020-05-18T07:41:14.646Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/blogImg/202005181355.jpg"></p><center> <h1>1</h1></center><p>　　<font color="blue">第一件事是，别丧。</font></p><p>　　丧是容易习惯的，积极也一样，都能养成习惯。</p><p>　　曾看过这样一段话：好习惯对人有益，可以增加人生的乐趣并赋予其充盈的力量，而坏习惯只能让人感觉到不安、不悦，一事无成。习惯是人们不假思索就做的事，是人们日常的行为方式，或是经由不断重复而形成的行为模式。</p><a id="more"></a><p>　　遇到一件好事，丧的思维习惯是：那谁竟然得到的比我多；而积极的思维习惯是：我今天获得的比昨天多。</p><p>　　遇到挫折，丧的思维习惯是：弄垮我算了；而积极的思维习惯是：打不死我的只会让我变得更强。</p><p>　　遇到失败，丧的思维习惯是：我倒在地上，不起来了；而积极的思维习惯是：这都是经历，会让我的未来越来越好。</p><p>　　因为不同的习惯，久而久之，人和人就不一样了。</p><center> <h1>2</h1></center><p>　<font color="blue">　第二件事是，多读书。</font></p><p>　　永远不要连续三天不读书，否则人会很容易变得很笨很笨的。</p><p>　　读书是自己和自己的交流，也是自己和作者的交流。</p><p>　　外出时，包里习惯性地装上一本书，堵车的时候、闲暇的时候、无聊的时候拿出来翻两页，翻着翻着就读完了一本书。</p><center> <h1>3</h1></center><p><font color="blue">　　第三件事是，运动。　</font></p><p>　　高中时，我们最爱的是体育课；上了大学，我们逃得最多的还是体育课。但是，别小看锻炼。年轻时不坚持运动，等年纪大些，病痛便很容易找上门来。</p><p>　　其实，谁都知道运动有好处，在合理的范围内，运动越多则效果更佳。二十多岁积累的身体素质，都是为三十岁以后更好地工作和享受生活打下夯实的基础。</p><p>　　除了运动，也请坚持健康的饮食，少糖、少油；坚持体检。身体是灵魂的载体，再有趣的灵魂也经不起多病的身躯折腾。</p><center> <h1>4</h1></center><p><font color="blue">　　第四件事是，定期给父母打电话。　</font></p><p>　　尤其是远行的年轻人，更要多了解父母的生活作息和他们的身体状况，也帮助他们熟悉互联网世界的生活，比如教他们使用在线支付、外卖、视频等软件。</p><p>　　我们与父母之间，一定要多沟通，多互相了解。</p><center> <h1>5</h1></center><p>　<font color="blue">　第五件事是，每年至少去一个陌生的地方。</font></p><p>　　出不了国可以出省，出不了省至少要走出自己的城市和村庄，要在路上思考、寻找、发问。</p><p>　　见识很重要，跨出舒适区，外面的世界更大。</p><p>　　如果实在去不了远方，也别忘了，书里也有远方。</p><center> <h1>6</h1></center><p>　<font color="blue">     第六件事是，存一点钱。　</font></p><p>　　如果你刚开始工作，还没有太多收入，也尽量别做“月光族”。人们在年轻时很容易大手大脚，记得定下一个比例，从工资里拿出这部分，不要动。把这些钱积累起来，做自己的备用资金，它们会变成只属于你自己的安全感。</p><p>　　还应该拿出一定的比例来自我投资——去学习。请记住，这正是创造的黄金年龄，打拼的最好岁月。二十多岁的时候，投资自己是最聪明的举动。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/blogImg/202005181355.jpg&quot;&gt;&lt;/p&gt;
&lt;center&gt; &lt;h1&gt;1&lt;/h1&gt;&lt;/center&gt;



&lt;p&gt;　　&lt;font color=&quot;blue&quot;&gt;第一件事是，别丧。&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;　　丧是容易习惯的，积极也一样，都能养成习惯。&lt;/p&gt;
&lt;p&gt;　　曾看过这样一段话：好习惯对人有益，可以增加人生的乐趣并赋予其充盈的力量，而坏习惯只能让人感觉到不安、不悦，一事无成。习惯是人们不假思索就做的事，是人们日常的行为方式，或是经由不断重复而形成的行为模式。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>【致自己-心灵鸡汤】万物静观皆自得，人生宁静方致远</title>
    <link href="https://blogs.zhaozf.site/ef203a33/"/>
    <id>https://blogs.zhaozf.site/ef203a33/</id>
    <published>2020-05-16T07:16:52.000Z</published>
    <updated>2020-05-18T07:43:08.990Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/blogImg/202005181359.jpg"></p><p>自古以来的贤圣之人，多是大气之人，越是遇到惊天动地之事，越能心静如水，沉着应对。</p><p>静气是一种应急的态度。重大事件发生时，不紧张慌乱，自乱阵脚，而是情急智生或从容应对。</p><a id="more"></a><p>在生活中，有许多人总是为别人的评价而生活，在被动中死要面子活受罪。而有的人则不然，走自己选择的路，这样的人则最能成功。</p><p>″宠辱不惊，看亭前花开花落。去留无意，望天上云卷云舒″。这就是一种处世态度所产生的人生境界，在失意和迷茫时细细品味，会豁然开朗的。</p><p>宁静才能致远，平心才能静气，静气才能干事，干事才能成事。</p><p><img src="/assets/blogImg/202005181403.jpg"></p><p>胸怀静气才能保持清醒头脑，深谋远虑，鉴天地之精微，察万物之规律；真正淡泊名利，心态平衡，不为进退滋扰，宠辱泰然不惊；志存高远，心忧天下，不为成绩骄傲，不为挫折沮丧；</p><p>明白事理，可以知荣明辱，可以心无旁骛；不计名利，追求卓越，高不孤方自赏，低不自抱自弃；<br>　　<br>遇事时从容不迫，举重若轻；不骄不躁、不卑不亢、不偏不倚，杂气自去，静气自来。</p><p>诸葛亮言：“夫君子之行，静以修身，俭以养德，非淡泊无以明志，非宁静无以致远。夫学，须静也；才，须学也。非学无以广才，非志无以成学。”</p><p>在当今，激烈的竞争，快节奏的生活，纷繁复杂的社会现象、强烈追求物质生活的欲望给人们增加了无形的压力。使一些人的心态浮躁得宛若汤煮，身上或多或少充斥着俗气、躁气。</p><p>心烦意乱者有之，神不守舍者有之，着急上火者有之……归根结底就是缺少此静气。<br>　　<br>凡大事面前有静气者，反映出他修炼道行的深邃，大事且能以静制动，小事更是拿得起放得下。<br>　　<br>“静气”说起来容易,做起来难，人非草木，孰能无情？每个人都有喜怒哀乐爱恶憎，在一定的环境中某种情绪总是要表露出来的，这是人的秉性。</p><p><img src="/assets/blogImg/202005181355.jpg"></p><p>静气源于定力，道家强调修心，心定、身定、都强调的是定力。《大学》教以：“定后而能静，静后而能安，安后而能虑，虑而后能得”。</p><p>“静气”需要修养，需要自己去历练和积累，它不是与生俱来的,是每个人后天成长的产物。所以，境界有高有低。</p><p>浮躁的社会，心静者胜出。万物静观皆自得，人生宁静方致远。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/blogImg/202005181359.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;自古以来的贤圣之人，多是大气之人，越是遇到惊天动地之事，越能心静如水，沉着应对。&lt;/p&gt;
&lt;p&gt;静气是一种应急的态度。重大事件发生时，不紧张慌乱，自乱阵脚，而是情急智生或从容应对。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>【致自己-心灵鸡汤】人能相遇，已是不易；心灵若相知，更要珍惜</title>
    <link href="https://blogs.zhaozf.site/320a4b7/"/>
    <id>https://blogs.zhaozf.site/320a4b7/</id>
    <published>2020-05-15T05:28:02.000Z</published>
    <updated>2020-05-18T07:42:43.793Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/blogImg/202005181342.jpg"></p><p><strong><em>时光</em></strong>，留不住昨天; <strong><em>缘分</em></strong>，停不在初见。</p><p><em>感情</em>，需要的是理解;<em>相处</em>，需要的是默契;<em>陪伴</em>，需要的是耐心。</p><p>人生能相遇，已是不易;心灵若相知，更要珍惜!</p><p><strong><em>人与人，一场缘：心与心，一段情。</em></strong></p><a id="more"></a><p>人活着，一份自然再加一份真，真正的朋友不是不离左右，而是默默关注，一句贴心的问候，一句有力的鼓励。</p><p>友不友情，要看相处;永不永恒，要看时间。</p><p>日子久了，与你无缘的自会走远，与你有缘的自会留下。</p><p><img src="/assets/blogImg/202005181415.jpg"></p><p>不要拒绝真诚的话，更不要拒绝一颗真诚的心。</p><p>有时候，人需要的不是物质的富有，而是心灵的慰籍;不是甜言蜜语的左右，而是相通的懂得。</p><p>关乎于情，因为动心;感动于心，因为认真。</p><p>一段话入心，只因触碰心灵;一行泪流下，只因瓦解脆弱。</p><p>人生中有朋友是幸福，有知己是难得，有知心是难求难得。</p><p>风雨时，才能见真情;平淡中，才能见真心 。</p><p>有所珍惜，才有有所真心;有所懂得，才有有所值得。</p><p><img src="/assets/blogImg/202005181414.jpg"></p><p>不相对，已然在心;不诉情，已然懂得。</p><p>真心见真情，真情见真人。</p><p>人活着，圈子不要太大，容得下自己和一部分人就好;朋友不在于多少，自然随意就好。</p><p>有些人，只可远观不可近瞧;有些话，只可慢言不可说尽。</p><p>朋友，淡淡交，慢慢处，才能长久;感情，浅浅尝，细细品，才有回味。</p><p>朋友如茶，需品;相交如水，需淡。</p><p>一份好的缘分，是随缘;一份好的感情，是随性。</p><p>相交莫强求，强求不香;相伴莫若惜，珍惜才久。</p><p>人心都是相对的，以真换真;感情都是相互的，用心暖心!</p><p>有多少人半路就离去，有多少人中途就转移;有几颗心能专心专意，有几份情会不离不弃。</p><p>历经风雨，才能看透人心真假;患难与共，才能领悟感情冷暖。</p><p><img src="/assets/blogImg/202005181412.jpg"></p><p>虚情留不住，真心总会在。</p><p>一份情，因为真诚而存在;一颗心，因为疼惜而从未走开。</p><p>一生中，能成为朋友的也就那么几个，好好珍惜那些在很久以后还称为朋友的人，真的很难得。</p><p>任何感情都需要用心呵护，好好珍惜。</p><p>朋友，或许不能朝朝暮暮，或许没有甜言蜜语，但一定要真心、真情、真爱。</p><p>不要轻易试探朋友的心，更不要怀疑朋友的情，再好的感情，都经不起一颗猜疑的心。</p><p>人，总会在乎一份情，在乎在对方心中的位置。</p><p>缘分不在于长短，而在于交心。　一生中，能成为真正朋友的不多。</p><p>珍惜该珍惜的，拥有该拥有的。</p><p>如此，安暖、安好……</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/blogImg/202005181342.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;时光&lt;/em&gt;&lt;/strong&gt;，留不住昨天; &lt;strong&gt;&lt;em&gt;缘分&lt;/em&gt;&lt;/strong&gt;，停不在初见。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;感情&lt;/em&gt;，需要的是理解;&lt;em&gt;相处&lt;/em&gt;，需要的是默契;&lt;em&gt;陪伴&lt;/em&gt;，需要的是耐心。&lt;/p&gt;
&lt;p&gt;人生能相遇，已是不易;心灵若相知，更要珍惜!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;人与人，一场缘：心与心，一段情。&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="致自己" scheme="https://blogs.zhaozf.site/tags/%E8%87%B4%E8%87%AA%E5%B7%B1/"/>
    
      <category term="心灵鸡汤" scheme="https://blogs.zhaozf.site/tags/%E5%BF%83%E7%81%B5%E9%B8%A1%E6%B1%A4/"/>
    
  </entry>
  
  <entry>
    <title>【致自己-心灵鸡汤】多与高人来往，勤与能人共事</title>
    <link href="https://blogs.zhaozf.site/f8c10afd/"/>
    <id>https://blogs.zhaozf.site/f8c10afd/</id>
    <published>2020-05-10T06:17:27.000Z</published>
    <updated>2020-05-18T07:43:20.157Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://app.yinxiang.com/shard/s41/res/57465112-4f2e-4e9b-8124-18d0d6afbc70/%E5%9B%BE%E7%89%87.jpg" alt="img"></p><p>《荀子》中说，蓬生麻中，不扶而直。</p><p>常常与高人往来，你会发觉自己的学识和境界也在不断提升。</p> <a id="more"></a><p><strong>1、</strong>  <strong>多与高人来往</strong></p><p>　　与高人往来，能让我们的人生之路更丰富有趣。</p><p>　　水就湿，火就燥，物各从其类也。《荀子》中说，蓬生麻中，不扶而直。常常与高人往来，你会发觉自己的学识和境界也在不断提升。</p><p><img src="https://app.yinxiang.com/shard/s41/res/34a72a95-7747-41c4-97fc-bd4236f55ec5/%E5%9B%BE%E7%89%87.webp"></p><p><strong>2、</strong> <strong>勤与能人共事</strong></p><p>　　普通人的圈子，谈论的是茶余饭后的闲事，赚的是屈指可数的工资，想的是明天干什么。</p><p>　　生意人的圈子，谈论的是项目，赚的是利润，想的是下一年。事业人的圈子，谈论的是机会，赚的是财富，想到的是未来和保障。</p><p>　　智慧人的圈子，谈论是给予，交流是的奉献，遵道而行，一切将会自然富足。</p><p>　　现实生活中，您和谁在一起的确很重要，甚至能改变您的成长轨迹，决定您的人生成败。和什么样的人在一起,就会有什么样的人生。和勤奋的人在一起，您不会懒惰。和积极的人在一起，您不会消沉。</p><p>　　与智者同行，你会不同凡响。与高人为伍，您能登上巅峰。生活中最不幸的是：由于您身边缺乏积极进取的人,缺少远见卓识的人，使您的人生变得平平庸庸，黯然失色。</p><p><img src="https://app.yinxiang.com/shard/s41/res/0d97172e-79a5-403a-b65f-77a6a61db504/%E5%9B%BE%E7%89%87.webp"></p><p><strong>3、</strong> <strong>乐与众人分享</strong></p><p>　　孟子说，独乐乐不如众乐乐。幸福越与人共享，它的价值越增加。如果你把快乐告诉一个朋友，你将得到两个快乐。</p><p>　　特别是在利益面前，切记要学会分享。曾国藩有句名言说，利不可独自。有利益好处的地方，往往大家都盯着。如果有人独占了利益而不与大家分享，那么一定会招致怨恨，甚至成为众矢之的，带来后患，结果就是通常说的“独利则败”。</p><p><img src="https://app.yinxiang.com/shard/s41/res/11c9377a-fae1-4740-89cb-214390db2ef5/%E5%9B%BE%E7%89%87.webp"></p><p><strong>4、</strong>  <strong>常与亲人相伴</strong></p><p>　　人生短短几十年，亲人是我们最近的人。中国人有很多有道理的话，打断骨头连着筋，血浓于水。这都是指亲情的坚固。</p><p>　　但是，人生往往最容易忽略的就是亲情。有多少父母忙于工作和应酬，甚至没能在孩子小的时候痛痛快快地陪他玩一场；有多父母没能等到子女在膝下尽孝，没有享受到天伦之乐就撒手人寰。</p><p>　　人生，像路上急行的车子一样，时间匆匆流逝，失去的不再重来，趁现在一切都尚早，而不是当失去了才来跪地大哭。现在有着不少人，像是被手机捆上了锁链，放下手机吧，多陪陪亲人。</p><p>　　一个人如何对待家人的态度，代表着真实的品格，因为这是最最真实的本相。家人的陪伴就是最简单的幸福。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://app.yinxiang.com/shard/s41/res/57465112-4f2e-4e9b-8124-18d0d6afbc70/%E5%9B%BE%E7%89%87.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;p&gt;《荀子》中说，蓬生麻中，不扶而直。&lt;/p&gt;
&lt;p&gt;常常与高人往来，你会发觉自己的学识和境界也在不断提升。&lt;/p&gt;
    
    </summary>
    
    
      <category term="致自己" scheme="https://blogs.zhaozf.site/tags/%E8%87%B4%E8%87%AA%E5%B7%B1/"/>
    
      <category term="心灵鸡汤" scheme="https://blogs.zhaozf.site/tags/%E5%BF%83%E7%81%B5%E9%B8%A1%E6%B1%A4/"/>
    
  </entry>
  
  <entry>
    <title>前端工程师技能图谱</title>
    <link href="https://blogs.zhaozf.site/6dede921/"/>
    <id>https://blogs.zhaozf.site/6dede921/</id>
    <published>2020-05-05T06:41:04.000Z</published>
    <updated>2020-05-05T07:00:48.876Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/blogImg/20200505.jpg"></p><a id="more"></a><p><img src="/assets/blogImg/202005051452.jpg"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/blogImg/20200505.jpg&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端工程师" scheme="https://blogs.zhaozf.site/tags/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%88/"/>
    
      <category term="技能图谱" scheme="https://blogs.zhaozf.site/tags/%E6%8A%80%E8%83%BD%E5%9B%BE%E8%B0%B1/"/>
    
  </entry>
  
  <entry>
    <title>前端开发学习路线-WEB基础</title>
    <link href="https://blogs.zhaozf.site/40c140c1/"/>
    <id>https://blogs.zhaozf.site/40c140c1/</id>
    <published>2020-03-10T12:53:35.000Z</published>
    <updated>2020-03-10T14:11:11.629Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/blogImg/202003102128.jpg" alt="WEB基础"></p><h1 id="web基础"><a href="#web基础" class="headerlink" title="web基础"></a>web基础</h1><h3 id="常见浏览器"><a href="#常见浏览器" class="headerlink" title="常见浏览器"></a>常见浏览器</h3><ol><li>IE浏览器 </li><li>Edge浏览器</li><li>火狐浏览器（Firefox）</li><li>谷歌浏览器（google Chrome）</li><li>Safari浏览器</li><li>Opera浏览器</li></ol><h3 id="浏览器内核"><a href="#浏览器内核" class="headerlink" title="浏览器内核"></a>浏览器内核</h3><p>浏览器内核有可以分成两部分：渲染引擎（layout engineer 或者 Rendering Engine）和JS引擎。</p><p>(1). <code>Trident</code>（IE内核）<br>(2). <code>Gecko</code>（Firefox）<br>(3). <code>webkit</code>(Safari)<br>(4). <code>Chromium/Blink</code>(chrome)<br>(5). <code>Presto</code>(Opera) blink</p><a id="more"></a><h3 id="web标准"><a href="#web标准" class="headerlink" title="web标准"></a>web标准</h3><p>结构标准：结构用于对网页元素进行整理和分类，主要包括XML和XHTML两个部分。<br>样式标准：表现用于设置网页元素的板式、颜色、大小等外观样式，主要指CSS。<br>行为标准：行为是指网页模型的定义及交互的编写，主要包括DOM和ECMAScript两个部分。</p><h1 id="HTML入门"><a href="#HTML入门" class="headerlink" title="HTML入门"></a>HTML入门</h1><h3 id="HTML初识"><a href="#HTML初识" class="headerlink" title="HTML初识"></a>HTML初识</h3><p>HTML(Hyper Text Markup Language的缩写)中文译为“超文本标签语言”，主要是通过HTML标签对网页中的文本、图片、声音等内容进行描述。</p><h3 id="HTML骨架"><a href="#HTML骨架" class="headerlink" title="HTML骨架"></a>HTML骨架</h3><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><p>在HTML页面中，带有<code>&lt;&gt;</code>符号的元素被称为HTML标签，如<code>&lt;html&gt;</code> 、<code>&lt;head&gt;</code> 、<code>&lt;body&gt;</code>等。</p><ol><li>双标签<br>&lt;标签名&gt;内容&lt;/标签名&gt;<br><code>&lt;body&gt;&lt;/body&gt;</code></li><li>单标签<br>&lt;标签名 /&gt;<br><code>&lt;br /&gt;</code></li></ol><p>HTML标签：作用所有HTML中标签的一个根节点。<br>head标签：用于存放title，meta，base，style，script，link 注意在head标签中我们必须要设置的标签是title<br>body标签：页面的主体部分。<br>title标签：让页面拥有一个属于自己的标题.</p><h4 id="排版标签"><a href="#排版标签" class="headerlink" title="排版标签"></a>排版标签</h4><ol><li><p>标题标签：<br> <code>&lt;h1&gt;&lt;h2&gt;&lt;h3&gt;&lt;h4&gt;&lt;h5&gt;&lt;h6&gt;</code></p></li><li><p>段落标签<br>  <code>&lt;p&gt;段落标签&lt;/p&gt;</code></p></li><li><p>水平线标签<br> <code>&lt;hr /&gt;</code></p></li><li><p>换行标签<br> <code>&lt;br /&gt;</code></p></li><li><p>div span 布局标签 没有语义<br> <code>&lt;div&gt;&lt;/div&gt;</code><br> <code>&lt;span&gt;&lt;/span&gt;</code></p></li></ol><h4 id="文本格式化标签"><a href="#文本格式化标签" class="headerlink" title="文本格式化标签"></a>文本格式化标签</h4><table><thead><tr><th>标签</th><th align="center">显示效果</th></tr></thead><tbody><tr><td><code>&lt;b&gt;&lt;/b&gt;&lt;strong&gt;&lt;/strong&gt;</code></td><td align="center">文字以粗体方式显示（XHTML推荐使用strong）</td></tr><tr><td><code>&lt;i&gt;&lt;/i&gt;</code>和<code>&lt;em&gt;&lt;/em&gt;</code></td><td align="center">文字以斜体方式显示（XHTML推荐使用em）</td></tr><tr><td><code>&lt;s&gt;&lt;/s&gt;</code>和<code>&lt;del&gt;&lt;/del&gt;</code></td><td align="center">文字以加删除线方式显示（XHTML推荐使用del）</td></tr><tr><td><code>&lt;u&gt;&lt;/u&gt;</code>和<code>&lt;ins&gt;&lt;/ins&gt;</code></td><td align="center">文字以加下划线方式显示（XHTML不赞成使用u）</td></tr></tbody></table><h4 id="图片标签"><a href="#图片标签" class="headerlink" title="图片标签"></a>图片标签</h4><p><code>&lt;img src=&quot;图像URL&quot; /&gt;</code></p><p>属性：<br>src：图像URL<br>alt：图像不能显示时的替换文本<br>title：鼠标悬停时显示的内容<br>width：设置图像的宽度<br>height：设置图像的高度<br>border：设置图像边框的宽度</p><h4 id="链接标签"><a href="#链接标签" class="headerlink" title="链接标签"></a>链接标签</h4><p><code>&lt;a href=&quot;跳转目标&quot; target=&quot;目标窗口的弹出方式&quot;&gt;&lt;/a&gt;</code></p><p>href：用于指定链接目标的URL地址<br>target: 用于打开指定链接页面的打开方式，其值有self和black两种<br>        self为默认值，black为在新窗口中打开。</p><h4 id="base标签"><a href="#base标签" class="headerlink" title="base标签"></a>base标签</h4><p><code>&lt;base target=&quot;_black_&quot; /&gt;</code><br>base 可以设置整体链接的打开状态</p><h4 id="特殊字符标签"><a href="#特殊字符标签" class="headerlink" title="特殊字符标签"></a>特殊字符标签</h4><table><thead><tr><th>特殊字符</th><th align="center">描述</th><th align="right">字符代码</th></tr></thead><tbody><tr><td><code> </code></td><td align="center">空格符</td><td align="right"><code>&amp;nbsp;</code></td></tr><tr><td><code>&lt;</code></td><td align="center">小于号</td><td align="right"><code>&amp;lt;</code></td></tr><tr><td><code>&gt;</code></td><td align="center">大于号</td><td align="right"><code>&amp;gt;</code></td></tr><tr><td><code>&amp;</code></td><td align="center">和号</td><td align="right"><code>&amp;amp;</code></td></tr><tr><td><code>￥</code></td><td align="center">人民币</td><td align="right"><code>&amp;yen;</code></td></tr><tr><td><code>©</code></td><td align="center">版权</td><td align="right"><code>&amp;copy;</code></td></tr><tr><td><code>®</code></td><td align="center">商标</td><td align="right"><code>&amp;reg;</code></td></tr><tr><td><code>℃</code></td><td align="center">摄氏度</td><td align="right"><code>&amp;deg;</code></td></tr><tr><td><code>±</code></td><td align="center">正负号</td><td align="right"><code>&amp;plusmn</code></td></tr><tr><td><code>×</code></td><td align="center">乘号</td><td align="right"><code>&amp;times </code></td></tr><tr><td><code>÷</code></td><td align="center">除号</td><td align="right"><code>&amp;divide </code></td></tr><tr><td><code>²</code></td><td align="center">平方（上标2）</td><td align="right"><code>&amp;sup2 </code></td></tr><tr><td><code>³</code></td><td align="center">立方（上标3）</td><td align="right"><code>&amp;sup3 </code></td></tr></tbody></table><h4 id="注释标签"><a href="#注释标签" class="headerlink" title="注释标签"></a>注释标签</h4><p><code>&lt;!--注释标签--&gt;</code></p><h3 id="文档类型"><a href="#文档类型" class="headerlink" title="文档类型"></a>文档类型</h3><figure class="highlight vbscript-html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>这句话告诉我们使用的是html5的版本。</p><h3 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta <span class="attribute">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br></pre></td></tr></table></figure><p>utf-8是目前最常用的字符集编码方式。包含去世界所有国家需要用到的字符。<br>GB231 简单中文 ，包含6763个汉字。<br>BIG5 繁体中文<br>GBK 包含全部中文字符，是GB2312的扩展，加入对繁体字的支持，兼容GB2312。</p><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>使用HTML制作网页时，可以使用HTML标签属性加以设置，语法格式：<br><code>&lt;标签名 属性1=&quot;属性值&quot; 属性2=&quot;属性值2&quot; ...&gt;</code> 内容<code>&lt;/标签&gt;</code></p><p>1.标签可以拥有多个属性，必须写在开始标签中，位于标签名后面。<br>2.属性之间不分先后顺序，标签名与属性、属性与属性之间均以空格分开。<br>3.任何标签的属性都有默认值，省略该属性则取默认值。<br>采取 键值对 的格式 key=”value“ 的格式。<br>比如：<code>&lt;hr width=&quot;400px&quot;&gt;</code></p><h3 id="锚定定位"><a href="#锚定定位" class="headerlink" title="锚定定位"></a>锚定定位</h3><p>1.使用<code>&lt;a href=&quot;#id名&quot;&gt;&lt;/a&gt;</code>创建链接文本。<br>2.使用相应的id名标注跳转目标的位置。<code>id=&quot;live&quot;</code></p><h3 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h3><p>1.图像文件和HTML文件位于同一文件夹，只需输入图像文件名称即可，如<code>&lt;img src=&quot;logo.gif&quot; /&gt;</code><br>2.图像文件位于Html文件的下一级文件夹：输入文件夹名和文件名，之间用“/”隔开，如<code>&lt;img src=&quot;img/img01/logo.gif&quot; /&gt;</code><br>3.图像文件位于HTML文件的上一级文件夹；在文件名之前加入“../”,如果是上两级，则需要使用“../../” 以此类推，如<code>&lt;img src=&quot;../logo.gif&quot; /&gt;</code></p><h3 id="无序列表ul"><a href="#无序列表ul" class="headerlink" title="无序列表ul"></a>无序列表ul</h3><p>无序列表的各个列表项之间没有顺序级别之分，是并列的。其基本语法格式如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span> 列表项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span> 列表项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span> 列表项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    ......</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：</p><ol><li><code>&lt;ul&gt;&lt;/ul&gt;</code>中只能嵌套<code>&lt;li&gt;&lt;/li&gt;</code>,直接在<code>&lt;ul&gt;&lt;/ul&gt;</code>标签中输入其他标签或者文字的做法是不被允许的。</li><li><code>&lt;li&gt;</code>与<code>&lt;/li&gt;</code>之间相当于一个容器，可以容纳所有元素。</li><li>无序列表会有自己样式属性，放下那个样式，让css来！</li></ol><h3 id="有序列表ol"><a href="#有序列表ol" class="headerlink" title="有序列表ol"></a>有序列表ol</h3><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span> 中国<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span> 中国<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/blogImg/202003102128.jpg&quot; alt=&quot;WEB基础&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;web基础&quot;&gt;&lt;a href=&quot;#web基础&quot; class=&quot;headerlink&quot; title=&quot;web基础&quot;&gt;&lt;/a&gt;web基础&lt;/h1&gt;&lt;h3 id=&quot;常见浏览器&quot;&gt;&lt;a href=&quot;#常见浏览器&quot; class=&quot;headerlink&quot; title=&quot;常见浏览器&quot;&gt;&lt;/a&gt;常见浏览器&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;IE浏览器 &lt;/li&gt;
&lt;li&gt;Edge浏览器&lt;/li&gt;
&lt;li&gt;火狐浏览器（Firefox）&lt;/li&gt;
&lt;li&gt;谷歌浏览器（google Chrome）&lt;/li&gt;
&lt;li&gt;Safari浏览器&lt;/li&gt;
&lt;li&gt;Opera浏览器&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;浏览器内核&quot;&gt;&lt;a href=&quot;#浏览器内核&quot; class=&quot;headerlink&quot; title=&quot;浏览器内核&quot;&gt;&lt;/a&gt;浏览器内核&lt;/h3&gt;&lt;p&gt;浏览器内核有可以分成两部分：渲染引擎（layout engineer 或者 Rendering Engine）和JS引擎。&lt;/p&gt;
&lt;p&gt;(1). &lt;code&gt;Trident&lt;/code&gt;（IE内核）&lt;br&gt;(2). &lt;code&gt;Gecko&lt;/code&gt;（Firefox）&lt;br&gt;(3). &lt;code&gt;webkit&lt;/code&gt;(Safari)&lt;br&gt;(4). &lt;code&gt;Chromium/Blink&lt;/code&gt;(chrome)&lt;br&gt;(5). &lt;code&gt;Presto&lt;/code&gt;(Opera) blink&lt;/p&gt;
    
    </summary>
    
      <category term="前端开发学习路线" scheme="https://blogs.zhaozf.site/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"/>
    
    
      <category term="HTML" scheme="https://blogs.zhaozf.site/tags/HTML/"/>
    
      <category term="前端开发" scheme="https://blogs.zhaozf.site/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>yarn 安装与使用</title>
    <link href="https://blogs.zhaozf.site/2d1e74c1/"/>
    <id>https://blogs.zhaozf.site/2d1e74c1/</id>
    <published>2020-02-04T04:01:00.000Z</published>
    <updated>2020-02-04T06:07:10.094Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/blogImg/20200204.png" alt="yarn包管理器"></p><h1 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1 - Introduction"></a>1 - Introduction</h1><p>Yarn 对你的代码来说是一个包管理器， 你可以通过它使用全世界开发者的代码， 或者分享自己的代码。yarn可以快速、安全、可靠地做到这一点，所以你永远不必担心。</p><p>通过Yarn你可以使用其他开发者针对不同问题的解决方案，使自己的开发过程更简单。</p><p>代码通过 包（package） (或者称为 模块（module）) 的方式来共享。 一个包里包含所有需要共享的代码，以及描述包信息的文件，称为 package.json 。</p><a id="more"></a><h1 id="2-Installation"><a href="#2-Installation" class="headerlink" title="2 - Installation"></a>2 - Installation</h1><p>注意：当前，Yarn 2仅可通过npm安装。以前在Yarn 1中可用的安装方法（Windows安装程序，Chocolatey，Debian / Ubuntu软件包，Homebrew和RPM软件包）将很快再次可用。</p><p>1.安装Node.js</p><p>2.安装yarn</p><p><code>npm install -g yarn@berry</code></p><p>3.通过运行以下命令测试Yarn 2是否已正确安装，其结果应为“ v2.0.0”或类似的结果：</p><p><code>yarn --version</code></p><h2 id="每个项目的安装"><a href="#每个项目的安装" class="headerlink" title="每个项目的安装"></a>每个项目的安装</h2><p>1.遵循全局安装说明</p><p>2.移至您的项目文件夹：</p><p><code>cd ~/path/to/project</code></p><p>3.运行以下命令：</p><p><code>yarn set version berry</code></p><p>4.提交.yarn和.yarnrc.yml更改</p><h1 id="3-Usage"><a href="#3-Usage" class="headerlink" title="3 - Usage"></a>3 - Usage</h1><p>现在，您已经安装了 Yarn ，可以开始使用Yarn了。这是您需要的一些最常见的命令。</p><p>访问命令列表</p><p><code>yarn help</code></p><p>开始一个新项目</p><p><code>yarn init</code></p><p>安装所有依赖项</p><p>yarn<br><code>yarn install</code></p><p>添加依赖</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn <span class="keyword">add</span><span class="bash"> [package]</span></span><br><span class="line">yarn <span class="keyword">add</span><span class="bash"> [package]@[version]</span></span><br><span class="line">yarn <span class="keyword">add</span><span class="bash"> [package]@[tag]</span></span><br></pre></td></tr></table></figure><p>将依赖项添加到不同类别的依赖项中</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yarn <span class="keyword">add</span><span class="bash"> [package] --dev  <span class="comment"># dev dependencies</span></span></span><br><span class="line">yarn <span class="keyword">add</span><span class="bash"> [package] --peer <span class="comment"># peer dependencies</span></span></span><br></pre></td></tr></table></figure><p>升级依赖</p><p>yarn up [package]<br>yarn up [package]@[version]<br>yarn up [package]@[tag]</p><p>删除依赖</p><p><code>yarn remove [package]</code></p><p>升级yarn本身</p><p><code>yarn set version 2.0.0</code><br><code>yarn set version from sources</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/blogImg/20200204.png&quot; alt=&quot;yarn包管理器&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;1-Introduction&quot;&gt;&lt;a href=&quot;#1-Introduction&quot; class=&quot;headerlink&quot; title=&quot;1 - Introduction&quot;&gt;&lt;/a&gt;1 - Introduction&lt;/h1&gt;&lt;p&gt;Yarn 对你的代码来说是一个包管理器， 你可以通过它使用全世界开发者的代码， 或者分享自己的代码。yarn可以快速、安全、可靠地做到这一点，所以你永远不必担心。&lt;/p&gt;
&lt;p&gt;通过Yarn你可以使用其他开发者针对不同问题的解决方案，使自己的开发过程更简单。&lt;/p&gt;
&lt;p&gt;代码通过 包（package） (或者称为 模块（module）) 的方式来共享。 一个包里包含所有需要共享的代码，以及描述包信息的文件，称为 package.json 。&lt;/p&gt;
    
    </summary>
    
      <category term="包管理器" scheme="https://blogs.zhaozf.site/categories/%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8/"/>
    
    
      <category term="yarn" scheme="https://blogs.zhaozf.site/tags/yarn/"/>
    
  </entry>
  
  <entry>
    <title>uni-app 跨平台框架学习笔记【一】</title>
    <link href="https://blogs.zhaozf.site/629227f3/"/>
    <id>https://blogs.zhaozf.site/629227f3/</id>
    <published>2020-01-14T01:43:22.000Z</published>
    <updated>2020-02-14T04:21:45.817Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/blogImg/201001141036.jpg" alt="uni-app学习笔记"></p><p>uni-app 是一个使用 Vue.js 开发所有前端应用的框架，</p><p>开发者编写一套代码，可发布到iOS、Android、H5、</p><p>以及各种小程序（微信/支付宝/百度/头条/QQ/钉钉）等多个平台。</p><p>uni-app 使用vue的语法+小程序的标签和API。功能架构如下图：</p><a id="more"></a><p><img src="/assets/blogImg/202001141040.png" alt="uni-app功能框架图"></p><h2 id="uni-app-约定了如下开发规范："><a href="#uni-app-约定了如下开发规范：" class="headerlink" title="uni-app 约定了如下开发规范："></a>uni-app 约定了如下开发规范：</h2><ul><li>页面文件遵循 Vue <a href="https://vue-loader.vuejs.org/zh/spec.html#%E7%AE%80%E4%BB%8B">单文件组件 (SFC) 规范</a></li><li>组件标签靠近小程序规范，详见<a href="https://uniapp.dcloud.io/component/README">官网uni-app 组件规范</a></li><li>接口能力（JS API）靠近微信小程序规范，但需将前缀 wx 替换为 uni，详见uni-app接口规范</li><li>数据绑定及事件处理同 Vue.js 规范，同时补充了App及页面的生命周期</li><li>为兼容多端运行，建议使用flex布局进行开发</li></ul><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p>一个uni-app工程，默认包含如下目录及文件：</p><p>┌─components            uni-app组件目录<br>│  └─comp-a.vue         可复用的a组件<br>├─hybrid                存放本地网页的目录<br>├─platforms             存放各平台专用页面的目录<br>├─pages                 业务页面文件存放的目录<br>│  ├─index<br>│  │  └─index.vue       index页面<br>│  └─list<br>│     └─list.vue        list页面<br>├─static                存放应用引用静态资源（如图片、视频等）的目录，注意：静态资源只能存放于此<br>├─wxcomponents          存放小程序组件的目录<br>├─main.js               Vue初始化入口文件<br>├─App.vue               应用配置，用来配置App全局样式以及监听 应用生命周期<br>├─manifest.json         配置应用名称、appid、logo、版本等打包信息<br>└─pages.json            配置页面路由、导航条、选项卡等页面类信息</p><p>注意：<br>    static 目录下的 js 文件不会被编译，如果里面有 es6 的代码，不经过转换直接运行，在手机设备上会报错。<br>    css、less/scss 等资源同样不要放在 static 目录下，建议这些公用的资源放在 common 目录下。</p><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><h3 id="应用生命周期"><a href="#应用生命周期" class="headerlink" title="应用生命周期"></a>应用生命周期</h3><table><thead><tr><th>函数名</th><th align="center">说明</th></tr></thead><tbody><tr><td>onLaunch</td><td align="center">当uni-app 初始化完成时触发（全局只触发一次）</td></tr><tr><td>onShow</td><td align="center">当 uni-app 启动，或从后台进入前台显示</td></tr><tr><td>onHide</td><td align="center">当 uni-app 从前台进入后台</td></tr><tr><td>onError</td><td align="center">当 uni-app 报错时触发</td></tr><tr><td>onUniNViewMessage</td><td align="center">对 nvue 页面发送的数据进行监听，可参考 nvue 向 vue 通讯</td></tr></tbody></table><h3 id="页面生命周期"><a href="#页面生命周期" class="headerlink" title="页面生命周期"></a>页面生命周期</h3><ul><li>onLoad    监听页面加载，其参数为上个页面传递的数据，参数类型为Object（用于页面传参）</li><li>onShow    监听页面显示。页面每次出现在屏幕上都触发，包括从下级页面点返回露出当前页面        </li><li>onReady    监听页面初次渲染完成。注意如果渲染速度快，会在页面进入动画完成前触发        </li><li>onHide    监听页面隐藏        </li><li>onUnload    监听页面卸载        </li><li>onResize    监听窗口尺寸变化        </li><li>onPullDownRefresh    监听用户下拉动作，一般用于下拉刷新</li><li>onReachBottom    页面上拉触底事件的处理函数        </li><li>onTabItemTap    点击 tab 时触发，参数为Object，具体见官方文档        </li><li>onShareAppMessage    用户点击右上角分享        </li><li>onPageScroll    监听页面滚动，参数为Object        </li><li>onNavigationBarButtonTap    监听原生标题栏按钮点击事件，参数为Object    </li><li>onBackPress    监听页面返回，返回 event = {from:backbutton、 navigateBack} ，backbutton 表示来源是左上角返回按钮或 android 返回键；navigateBack表示来源是 uni.navigateBack ；详细说明及使用：onBackPress 详解    </li><li>onNavigationBarSearchInputChanged    监听原生标题栏搜索输入框输入内容变化事件    </li><li>onNavigationBarSearchInputConfirmed    监听原生标题栏搜索输入框搜索事件，用户点击软键盘上的“搜索”按钮时触发。    </li><li>onNavigationBarSearchInputClicked    监听原生标题栏搜索输入框点击事件</li></ul><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><p>uni-app页面路由为框架统一管理，开发者需要在pages.json里配置每个路由页面的路径及页面样式。类似小程序在app.json中配置页面路由一样。所以 uni-app 的路由用法与 Vue Router 不同，如仍希望采用 Vue Router 方式管理路由，可在插件市场搜索 Vue-Router。</p><h3 id="路由跳转"><a href="#路由跳转" class="headerlink" title="路由跳转"></a>路由跳转</h3><p>uni-app 有两种页面路由跳转方式：使用navigator组件跳转、调用API跳转。</p><h2 id="运行环境判断"><a href="#运行环境判断" class="headerlink" title="运行环境判断"></a>运行环境判断</h2><p>开发环境和生产环境<br>uni-app 可通过 process.env.NODE_ENV 判断当前环境是开发环境还是生产环境。一般用于连接测试服务器或生产服务器的动态切换。</p><p>cli模式下，是通行的编译环境处理方式。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(process.env.NODE_ENV === <span class="string">&#x27;development&#x27;</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;开发环境&#x27;</span>)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;生产环境&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="页面样式与布局"><a href="#页面样式与布局" class="headerlink" title="页面样式与布局"></a>页面样式与布局</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/blogImg/201001141036.jpg&quot; alt=&quot;uni-app学习笔记&quot;&gt;&lt;/p&gt;
&lt;p&gt;uni-app 是一个使用 Vue.js 开发所有前端应用的框架，&lt;/p&gt;
&lt;p&gt;开发者编写一套代码，可发布到iOS、Android、H5、&lt;/p&gt;
&lt;p&gt;以及各种小程序（微信/支付宝/百度/头条/QQ/钉钉）等多个平台。&lt;/p&gt;
&lt;p&gt;uni-app 使用vue的语法+小程序的标签和API。功能架构如下图：&lt;/p&gt;
    
    </summary>
    
      <category term="跨平台框架" scheme="https://blogs.zhaozf.site/categories/%E8%B7%A8%E5%B9%B3%E5%8F%B0%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="uni-app" scheme="https://blogs.zhaozf.site/tags/uni-app/"/>
    
      <category term="微信小程序" scheme="https://blogs.zhaozf.site/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>身份证最后一位校验算法(ISO 7064:1983.MOD 11-2)</title>
    <link href="https://blogs.zhaozf.site/1bca26fc/"/>
    <id>https://blogs.zhaozf.site/1bca26fc/</id>
    <published>2019-12-18T03:35:20.000Z</published>
    <updated>2019-12-20T04:06:12.608Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/blogImg/201912181143.jpg"></p><p>在生活中，有一些游戏账号的实名认证和申请<br>或者某些网站的注册会用到身份证号。</p><p>当输入错误的身份证号时会提示出错<br>给人的感觉是他们真的能识别身份证信息一样。<br>当然，除了一些政府、银行、证券、保险等行业接入的是NCIIC（全国公民身份证号码查询服务中心）<br>其他的大多数都是根据最后一位校验位来判断该身份证号码是否有效。</p><a id="more"></a><p>目前国内最权威的渠道肯定是全国公民身份证号码查询服务中心，简称NCIIC，<br>也就是很多实名认证服务商所声称采用的公安部接口。<br>实际上由于公安网跟外网是隔绝的，所以公安部的接口绝对是不会直接对外的提供的。<br>NCIIC是隶属于公安部的一个事业单位，可以直连国家人口基础信息库，<br>其数据权威性主要表现在：数据更新准确，公民的出生、死亡、 姓名变更等信息都会第一时间更新，<br>可以满足政府、金融等机构的对数据质量的高要求。<br>所以NCIIC的授权范围，也主要集中在政府、银行、证券、保险等行业。</p><h4 id="结构和形式"><a href="#结构和形式" class="headerlink" title="结构和形式"></a>结构和形式</h4><p>1．号码的结构<br>　　公民身份号码是特征组合码，由十七位数字本体码和一位校验码组成。排列顺序从左至右依次为：六位数字地址码，八位数字出生日期码，三位数字顺序码和一位数字校验码。<br>2．地址码<br>　　表示编码对象常住户口所在县（县级市、旗、区）的行政区划代码，按GB/T2260的规定执行。<br>3．出生日期码<br>　　表示编码对象出生的年、月、日，按GB/T7408的规定执行，年、月、日代码之间不用分隔符。<br>4．顺序码<br>　　表示在同一地址码所标识的区域范围内，对同年、同月、同日出生的人编定的顺序号，顺序码的奇数分配给男性，偶数分配给女性。<br>5．校验码<br>　　根据前面十七位数字码，按照ISO 7064:1983.MOD 11-2校验码计算出来的检验码。</p><p>地址码：<br>华北地区：北京市|110000，天津市|120000，河北省|130000，山西省|140000，内蒙古自治区|150000<br>东北地区： 辽宁省|210000，吉林省|220000，黑龙江省|230000<br>华东地区： 上海市|310000，江苏省|320000，浙江省|330000，安徽省|340000，福建省|350000，江西省|360000，山东省|370000<br>华中地区： 河南省|410000，湖北省|420000，湖南省|430000<br>华南地区：广东省|440000，广西壮族自治区|450000，海南省|460000<br>西南地区：重庆市|500000，四川省|510000，贵州省|520000，云南省|530000，西藏自治区|540000<br>西北地区： 陕西省|610000，甘肃省|620000，青海省|630000，宁夏回族自治区|640000，新疆维吾尔自治区|650000<br>特别地区：台湾地区(886)|830000，香港特别行政区（852)|810000，澳门特别行政区（853)|820000</p><p>中国大陆居民身份证号码中的地址码的数字编码规则为：<br>第一、二位表示省（自治区、直辖市、特别行政区）。<br>第一位数字是以前的大区制代码。第二位是大区所在省市编码。全国共分为6个大区：华北局（1）、东北局（2）、华东局（3）、中南局（4）、西南局（5）和西北局（6）<br>第三、四位表示市（地级市、自治州、盟及国家直辖市所属市辖区和县的汇总码）。其中，01-20，51-70表示省直辖市；21-50表示地区（自治州、盟）。<br>第五、六位表示县（市辖区、县级市、旗）。01-18表示市辖区或地区（自治州、盟）辖县级市；21-80表示县（旗）；81-99表示省直辖县级市。</p><p>其中第十七位奇数分给男性，偶数分给女性。<br>作为尾号的校验码，是由号码编制单位按统一的公式计算出来的，如果某人的尾号是0-9，都不会出现X，但如果尾号是10，那么就得用X来代替</p><h4 id="ISO-7064-1983-MOD-11-2计算方法"><a href="#ISO-7064-1983-MOD-11-2计算方法" class="headerlink" title="ISO 7064:1983.MOD 11-2计算方法"></a>ISO 7064:1983.MOD 11-2计算方法</h4><p>1、将前面的身份证号码17位数分别乘以不同的系数。从第一位到第十七位的系数分别为：7－9－10－5－8－4－2－1－6－3－7－9－10－5－8－4－2。<br>2、将这17位数字和系数相乘的结果相加。<br>3、用加出来和除以11，看余数是多少？<br>4、余数只可能有0－1－2－3－4－5－6－7－8－9－10这11个数字。其分别对应的最后一位身份证的号码为1－0－X －9－8－7－6－5－4－3－2。(即余数0对应1，余数1对应0，余数2对应X…)<br>5、通过上面得知如果余数是3，就会在身份证的第18位数字上出现的是9。如果对应的数字是2，身份证的最后一位号码就是罗马数字X。<br>例如：某男性的身份证号码为【53010219200508011X】， 我们看看这个身份证是不是符合计算规则的身份证。<br>首先我们得出前17位的乘积和【<code>(5*7)+(3*9)+(0*10)+(1*5)+(0*8)+(2*4)+(1*2)+(9*1)+(2*6)+(0*3)+(0*7)+(5*9)+(0*10)+(8*5)+(0*8)+(1*4)+(1*2)</code>】是189，然后用189除以11得出的结果是189÷11=17余下2，187÷11=17，还剩下2不能被除尽，也就是说其余数是2。最后通过对应规则就可以知道余数2对应的检验码是X。所以，可以判定这是一个正确的身份证号码。</p><p>JavaScript代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//验证方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">verifyCode</span>(<span class="params">id</span>)</span>&#123;</span><br><span class="line"> <span class="keyword">if</span>(id.length !=<span class="number">18</span> )</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> <span class="comment">/*1、从第一位到第十七位的系数分别为：</span></span><br><span class="line"><span class="comment">   7,9,10,5,8,4,2,1,6,3,7,9,10,5,8,4,2</span></span><br><span class="line"><span class="comment">   将这17位数字和系数相乘的结果相加。 */</span></span><br><span class="line"> <span class="keyword">var</span> arr = [<span class="number">7</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">2</span>];</span><br><span class="line"> <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;arr.length; i++)&#123;</span><br><span class="line">  sum += <span class="built_in">parseInt</span>(id.charAt(i)) * arr[i];</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//2、用加出来和除以11，看余数，</span></span><br><span class="line"> <span class="keyword">var</span> c = sum%<span class="number">11</span>;</span><br><span class="line"> <span class="comment">//3、分别对应的最后一位身份证的号码为：1－0－X－9－8－7－6－5－4－3－2</span></span><br><span class="line"> <span class="keyword">var</span> ch = [‘<span class="number">1</span>‘, ‘<span class="number">0</span>‘, ‘X‘, ‘<span class="number">9</span>‘, ‘<span class="number">8</span>‘, ‘<span class="number">7</span>‘, ‘<span class="number">6</span>‘, ‘<span class="number">5</span>‘, ‘<span class="number">4</span>‘, ‘<span class="number">3</span>‘, ‘<span class="number">2</span>‘];</span><br><span class="line"> <span class="keyword">var</span> code = ch[c];</span><br><span class="line"> <span class="keyword">var</span> last = id.charAt(<span class="number">17</span>);</span><br><span class="line"> last = last==‘x‘ ? ‘X‘: last;</span><br><span class="line"> <span class="keyword">return</span> last == code;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><p>var id = “34052419800101001X”;<br> console.log(verifyCode(id));<br>```</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/blogImg/201912181143.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;在生活中，有一些游戏账号的实名认证和申请&lt;br&gt;或者某些网站的注册会用到身份证号。&lt;/p&gt;
&lt;p&gt;当输入错误的身份证号时会提示出错&lt;br&gt;给人的感觉是他们真的能识别身份证信息一样。&lt;br&gt;当然，除了一些政府、银行、证券、保险等行业接入的是NCIIC（全国公民身份证号码查询服务中心）&lt;br&gt;其他的大多数都是根据最后一位校验位来判断该身份证号码是否有效。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="https://blogs.zhaozf.site/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://blogs.zhaozf.site/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="身份证校验" scheme="https://blogs.zhaozf.site/tags/%E8%BA%AB%E4%BB%BD%E8%AF%81%E6%A0%A1%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>【翻译】 第六篇 Atomic Design with React</title>
    <link href="https://blogs.zhaozf.site/3709c998/"/>
    <id>https://blogs.zhaozf.site/3709c998/</id>
    <published>2019-11-30T07:59:24.000Z</published>
    <updated>2019-12-04T13:10:39.288Z</updated>
    
    <content type="html"><![CDATA[<center><h1> React 的原子设计</h1></center><blockquote><p>本文来自阅读极客时间专栏《左耳听风》89 | 程序员练级攻略：UI/UX设计 文章中的推荐阅读</p></blockquote><ul><li>原文链接：<a href="https://codeburst.io/atomic-design-with-react-e7aea8152957">https://codeburst.io/atomic-design-with-react-e7aea8152957</a></li><li>作者：Danilo Woznica</li><li>2018年1月9日</li></ul><p><img src="/assets/translate/201912042105.jpg"></p><p>How the Atomic Design methodology allowed me to create a great design system from scratch and made me a better developer, with principles of componentization, hierarchies and reuses of code.</p><p>原子设计方法论是如何让我从零开始创建一个伟大的设计系统，并使我成为一个更好的开发人员，具有组件化、层次结构和代码重用的原则。</p><a id="more"></a><p>I have recently had the opportunity to work on a new product from scratch made in React and PWA with the well-crafted and componentized UI at Cheesecake. However, when we discussed with the whole team the best way to approach the development, we ended up having the same old problems that have happened in most past projects, such as:</p><p>我最近有机会在一个新的产品从零开始的反应和 PWA 与精心制作和组件化的 UI 在芝士蛋糕。 然而，当我们与整个团队讨论处理开发的最佳方法时，我们最终遇到了与过去大多数项目中发生的相同的老问题，例如:</p><ul><li>Lack of Styleguide of components; 缺乏构件的样式指南;</li><li>Lack of precision in estimating development time; 估计开发时间不精确;</li><li>Great amount of setup time for developers; 为开发人员提供大量的安装时间;</li><li>Inconsistency between components and view; 组件与视图不一致;</li><li>Repeated code; 重复代码;</li><li>Side effects; 副作用;</li><li>Very specific components to each pages; 每个页面都有非常具体的组件;</li></ul><p>We’ve started to build the CSS architecture using the ITCSS methodology that organizes the style files on stacks from generics styles to the specifics ones, which helps you to scale large projects easily. But along with ITCSS, we were using CSS Modules to scope the components, so we noticed that component stack was getting huge and even the generic styles were being componentized and reused within other one.</p><p>我们已经开始使用 ITCSS 方法来构建 CSS 架构，这种方法将样式文件从泛型样式组织到具体样式，这有助于您轻松地扩展大型项目。 但是与 ITCSS 一起，我们使用 CSS 模块来调整组件的范围，所以我们注意到组件堆栈变得越来越庞大，甚至通用样式也被组件化并在其他组件中重用。</p><p>That was the moment in which we paused to rethink our architecture and how we could set the components in a more distributed and organized way. Then we found a methodology called Atomic Design that creates multiples stacks of components, with different hierarchies of complexity and dependence.</p><p>在那一刻，我们停下来重新思考我们的体系结构，以及我们如何将组件设置成更加分布和有组织的方式。 然后我们发现了一种叫做原子设计的方法，它创建了多个组件堆栈，具有不同的复杂性和依赖性层次结构。</p><p><img src="/assets/translate/201911301609.png" alt="原子设计层次结构" title="原子设计层次结构"></p><h2 id="What-is-Atomic-Design"><a href="#What-is-Atomic-Design" class="headerlink" title="What is Atomic Design?"></a>What is Atomic Design?</h2><h2 id="什么是原子设计？"><a href="#什么是原子设计？" class="headerlink" title="什么是原子设计？"></a>什么是原子设计？</h2><p>Popularly known within the design world, Atomic Design helps to build consistent, solid and reusable design systems. Plus, in the world of React, Vue and frameworks that stimulate the componentization, Atomic Design is used unconsciously; but when used in the right way, it becomes a powerful ally for developers.</p><p>原子设计在设计界广为人知，它帮助构建一致、可靠和可重用的设计系统。 另外，在 React、 Vue 和促进组件化的框架的世界中，原子设计是无意识地使用的; 但是当使用得当时，它成为了开发人员的强大盟友。</p><p>The name Atomic Design comes from the idea of separating the components in atoms, molecules, organisms, templates and pages, like in the image above. But what are the responsibilities of each separated part?</p><p>“原子设计”这个名字来源于这样一个想法，即将原子、分子、有机体、模板和页面中的成分分离开来，如上图所示。 但是，每个独立部分的责任是什么？</p><h3 id="Atoms"><a href="#Atoms" class="headerlink" title="Atoms"></a>Atoms</h3><h3 id="原子"><a href="#原子" class="headerlink" title="原子"></a>原子</h3><p><img src="/assets/translate/201911301613.png" alt="原子组件示例" title="原子组件示例"></p><p>Atoms are the smallest possible components, such as buttons, titles, inputs or event color pallets, animations, and fonts. They can be applied on any context, globally or within other components and templates, besides having many states, such as this example of button: disabled, hover, different sizes, etc.</p><p>原子是最小的可能组件，例如按钮、标题、输入或事件颜色托盘、动画和字体。 它们可以应用于任何上下文，全局或其他组件和模板，除了有许多状态，如这个按钮的例子: 禁用，悬停，不同大小等。</p><h3 id="Molecules"><a href="#Molecules" class="headerlink" title="Molecules"></a>Molecules</h3><h3 id="分子"><a href="#分子" class="headerlink" title="分子"></a>分子</h3><p><img src="/assets/translate/201911301615.png" alt="分子组成的例子" title="分子组成的例子"></p><p>They are the composition of one or more components of atoms. Here we begin to compose complex components and reuse some of those components. Molecules can have their own properties and create functionalities by using atoms, which don’t have any function or action by themselves.<br>它们是由一个或多个原子组成的。 在这里，我们开始组合复杂的组件并重用其中的一些组件。 分子可以有自己的属性，通过原子创造功能，而原子本身没有任何功能或作用。</p><h3 id="Organisms"><a href="#Organisms" class="headerlink" title="Organisms"></a>Organisms</h3><h3 id="有机体"><a href="#有机体" class="headerlink" title="有机体"></a>有机体</h3><p><img src="/assets/translate/201911301635.png" alt="生物成分的例子" title="生物成分的例子"></p><p>Organisms are the combination of molecules that work together or even with atoms that compose more elaborate interfaces. At this level, the components begin to have the final shape, but they are still ensured to be independent, portable and reusable enough to be reusable in any content.</p><p>有机体是分子的组合，这些分子相互作用，甚至与原子组成更复杂的界面。 在这个级别上，组件开始具有最终的形状，但仍然保证它们是独立的、可移植的和可重用的，足以在任何内容中重用。</p><h3 id="Templates"><a href="#Templates" class="headerlink" title="Templates"></a>Templates</h3><h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><p><img src="/assets/translate/201911301636.png"></p><p>In this state we stop composing components and begin to set their context. Moreover, the templates create relationships between the organisms and others components through positions, placements and patterns of the pages but it doesn’t have any style, color or component rendered. That’s why it looks like a wireframe.<br>在这种状态下，我们停止组合组件并开始设置它们的上下文。 此外，模板通过页面的位置、位置和模式在有机体和其他组件之间创建关系，但它没有任何风格、颜色或组件渲染。 这就是为什么它看起来像线框图。</p><h3 id="Pages"><a href="#Pages" class="headerlink" title="Pages"></a>Pages</h3><h3 id="页数"><a href="#页数" class="headerlink" title="页数"></a>页数</h3><p><img src="/assets/translate/201911301638.png"></p><p>Pages are the navigate parts of the application and it’s where the components are distributed in one specific template. The components get real content and they’re connected with the whole application. At this stage, we can test the efficiency of the design system to analyse if all the components are independent enough or if we need to split them in smaller parts.</p><p>页面是应用程序的导航部分，它是组件在一个特定模板中分布的位置。 这些组件获得真正的内容，并与整个应用程序相连接。 在这个阶段，我们可以测试设计系统的效率，以分析是否所有的组件都足够独立，或者是否需要将它们拆分成更小的部分。</p><h3 id="React-Atomic-Design"><a href="#React-Atomic-Design" class="headerlink" title="React + Atomic Design"></a>React + Atomic Design</h3><h3 id="React-原子设计"><a href="#React-原子设计" class="headerlink" title="React + 原子设计"></a>React + 原子设计</h3><p>When we started to use Atomic Design within React we had to adjust some rules of the methodology to ensure that components were reused as much as possible, that they were stateless, without styles of positions and very specific margins so to avoid any side effects in the pages of application.<br>当我们开始在 React 中使用 Atomic Design 时，我们不得不调整方法的一些规则，以确保组件被尽可能多地重用，确保它们是无状态的，没有位置样式和非常具体的边距，以避免应用程序页面中的任何副作用。</p><p>So with each new component we asked ourselves: “Are these components generic enough to avoid specificity and/or repeated code in whatever context they are used?”<br>因此，对于每一个新组件，我们都要问自己: “这些组件是否足够通用，以避免在任何情况下使用特殊性和 / 或重复代码? ”</p><p>So we were able to write a few rules:<br>所以我们可以写一些规则:</p><ol><li><p>The Atomic Design should have a file of variables and it must be imported by each component;</p></li><li><p>原子设计应具有一个变量文件，并且必须由每个组件导入。</p></li><li><p>The atoms should be written without margins and positions;</p></li><li><p>原子应该写在没有边缘和位置的地方；</p></li><li><p>Only the molecules and organisms can set the positions of atoms, but these stacks can’t have any styles of margins and positions;</p></li><li><p>只有分子和有机体可以设置原子的位置，但这些堆栈不能有任何类型的边距和位置;</p></li><li><p>Templates have only one function: to set the grid of pages but never positions of specific components;</p></li><li><p>模板只有一个功能: 设置页面的网格，但不设置特定组件的位置;</p></li><li><p>Pages render the components with a template defined and it’s here that the Atomic Design will be connected to the rest of the application;</p></li><li><p>页面使用定义的模板呈现组件，在这里原子设计将连接到应用程序的其余部分;</p></li></ol><h3 id="Let’s-code"><a href="#Let’s-code" class="headerlink" title="Let’s code"></a>Let’s code</h3><h3 id="让我们来编码"><a href="#让我们来编码" class="headerlink" title="让我们来编码"></a>让我们来编码</h3><p>What I will show here is everything in a boilerplate on GitHub, which you can test and then start your projects using Atomic Design, so let’s do it:<br>这里我要展示的是 GitHub 上的样板文件，你可以测试它，然后使用 Atomic Design 开始你的项目，所以让我们开始吧:</p><p>To build a UI LIbrary we used an awesome tool called Storybook, which is a great ally to the Atomic Design in React (you can use it for the React Native and Vue too), it allows to render the components and list all states/variations of one.<br>为了构建 UI LIbrary，我们使用了一个非常棒的工具 Storybook，它是原子设计在反应(你可以使用它为反应原生和 Vue 也)的一个很好的盟友，它允许渲染组件和列出一个的所有状态 / 变化。</p><p>With the Storybook installed the folder structure will look like this:<br>安装了 Storybook 后，文件夹结构如下:</p><p><img src="/assets/translate/201912042026.png" alt="Structure folder"></p><p>Note that inside of the button component there is a file called ‘index.js’ which is the component itself, the ‘styles.css’ is the style that will be imported by CSS Modules (here we’ve used the BEM CSS inside the structure; I recommend reading the article ‘CSS Architecture with ReactJS’) and the ‘stories.js’ is the file that will import the component into the Storybook, which looks like this:<br>注意，在按钮组件的内部有一个叫做‘ index.js’的文件，它是组件本身，‘ styles.CSS’是由 CSS 模块导入的样式(这里我们在结构中使用了 BEM CSS; 我推荐阅读文章‘ CSS Architecture with ReactJS’) ，而‘ stories.js’是将组件导入 Storybook 的文件，它看起来像这样:</p><p><img src="/assets/translate/201912042029.png" alt="Storybook’s file"></p><p>Each ‘add ()’ function is a variation of the component and it is the best approach to describe each state individually rather than a single function, so it becomes easier to highlight and control each one of them. So if you describe all the component variations , the Storybook should look like this:<br>每个 add ()函数都是组件的一个变体，它是描述每个状态的最佳方法，而不是单个函数，因此更容易突出和控制每个状态。 因此，如果你描述所有的组件变化，故事书应该是这样的:</p><p><img src="/assets/translate/201912042030.png" alt="Storybook interface"></p><p>And the coolest part of the Storybook is that you can add some ‘addons’, such as the Storybook Info, which does awesome things like: story source, props types, defaults values and which values are required or not.<br>故事书最酷的部分是你可以添加一些插件，比如故事书信息，它可以做一些很棒的事情，比如: 故事来源，道具类型，默认值以及哪些值是必需的或者不是。</p><p><img src="/assets/translate/201912042031.png" alt="Storybook table"></p><h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>At the end of project, we reached the initial goals and we believe we left a good legacy, a structure which ensures that the project can grow and that other developers can understand the architecture quickly. Maybe we initially spent some extra time writing stories and etc, but the more the project grows, the more the benefits make clear why we should use such architecture.<br>在项目结束时，我们达到了最初的目标，并且我们相信我们留下了一个很好的遗产—- 一个确保项目可以成长并且其他开发人员可以快速理解架构的结构。 也许我们最初花费了一些额外的时间来写故事等等，但是随着项目的增长，好处越来越明显，为什么我们应该使用这样的架构。</p><p>However we could see that this architecture probably doesn’t work for every project because it depends on several factors. The main one is that the design needs to be thought in the same way as the development: in an atomic way. But the integration between design and development is a point that every project wants to reach, so it becomes a very positive point for Atomic Design.<br>然而，我们可以看到，这种架构可能不适用于每个项目，因为它取决于几个因素。 主要的一点是，设计需要以与开发相同的方式来考虑: 以原子的方式。 但是设计和开发之间的集成是每个项目都想要达到的，所以这对于原子设计来说是一个非常积极的点。</p>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;&lt;h1&gt; React 的原子设计&lt;/h1&gt;&lt;/center&gt;

&lt;blockquote&gt;
&lt;p&gt;本文来自阅读极客时间专栏《左耳听风》89 | 程序员练级攻略：UI/UX设计 文章中的推荐阅读&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;原文链接：&lt;a href=&quot;https://codeburst.io/atomic-design-with-react-e7aea8152957&quot;&gt;https://codeburst.io/atomic-design-with-react-e7aea8152957&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;作者：Danilo Woznica&lt;/li&gt;
&lt;li&gt;2018年1月9日&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/assets/translate/201912042105.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;How the Atomic Design methodology allowed me to create a great design system from scratch and made me a better developer, with principles of componentization, hierarchies and reuses of code.&lt;/p&gt;
&lt;p&gt;原子设计方法论是如何让我从零开始创建一个伟大的设计系统，并使我成为一个更好的开发人员，具有组件化、层次结构和代码重用的原则。&lt;/p&gt;
    
    </summary>
    
      <category term="翻译" scheme="https://blogs.zhaozf.site/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
      <category term="翻译" scheme="https://blogs.zhaozf.site/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="React" scheme="https://blogs.zhaozf.site/tags/React/"/>
    
      <category term="设计方法" scheme="https://blogs.zhaozf.site/tags/%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>【翻译】 第五篇 The Evolution of UI/UX Designers Into Product Designers</title>
    <link href="https://blogs.zhaozf.site/fbee4d52/"/>
    <id>https://blogs.zhaozf.site/fbee4d52/</id>
    <published>2019-11-30T02:48:41.000Z</published>
    <updated>2019-11-30T05:58:18.348Z</updated>
    
    <content type="html"><![CDATA[<center><h1> 从 ui / ux 设计师到产品设计师的演变</h1></center><blockquote><p>本文来自阅读极客时间专栏《左耳听风》89 | 程序员练级攻略：UI/UX设计 文章中的推荐阅读</p></blockquote><ul><li>原文链接：<a href="https://medium.com/thinking-design/the-evolution-of-ui-ux-designers-into-product-designers-623e4e7eaab3">https://medium.com/thinking-design/the-evolution-of-ui-ux-designers-into-product-designers-623e4e7eaab3</a></li><li>作者：Adobe Creative Cloud</li><li>2017年1月18日</li></ul><p><img src="/assets/translate/201911301134.jpeg"></p><p>What is a product? Until recently, the term was only used in relation to something material and often found in a retail store, but nowadays it is coming to mean digital products as well. Apps are modern products.</p><p>什么是产品？ 直到最近，这个词还只是用来指物质的东西，通常在零售店里才能找到，但是现在它也开始指数字产品了。 应用程序是现代产品。</p><a id="more"></a><p>When it comes to building great products, design is the most important “feature.” We’ve moved into the stage where product design dominates — it’s what sets companies apart and gives a real edge over competitors.</p><p>当谈到建立伟大的产品，设计是最重要的“特征。” 我们已经进入了产品设计占主导地位的阶段ーー这是公司与众不同的地方，也是相对于竞争对手的真正优势所在。</p><p>The design industry has evolved quite a lot in the last few years and today there are a number of different responsibilities encompassed by the umbrella term designer: UX Designers, UI Designers, and Product Designers. “What is the difference between these job roles?” is a fairly common question in design industry. Let’s attempt to distill what each of these titles really mean, and look at why the evolution of UI/UX Designers into Product Designers is a logical development in the era of modern technology.</p><p>在过去的几年里，设计行业已经发生了很大的变化，如今，设计师这个总称涵盖了许多不同的职责: 用户体验设计师、用户界面设计师和产品设计师。 “这些工作角色之间的区别是什么? ” 在设计行业是一个相当普遍的问题。 让我们尝试提炼出每一个标题的真正含义，并且看看为什么 ui / ux 设计师进化成产品设计师是现代技术时代的一个合乎逻辑的发展。</p><h2 id="UX-UI-Product-Who-Does-What"><a href="#UX-UI-Product-Who-Does-What" class="headerlink" title="UX, UI, Product: Who Does What?"></a>UX, UI, Product: Who Does What?</h2><h2 id="用户体验，用户界面，产品-谁做了什么？"><a href="#用户体验，用户界面，产品-谁做了什么？" class="headerlink" title="用户体验，用户界面，产品: 谁做了什么？"></a>用户体验，用户界面，产品: 谁做了什么？</h2><p>All of these roles have one thing in common — they all design how a user interacts with a product. But these people all perform slightly different functions to reach the same goal.</p><p>所有这些角色都有一个共同点: 他们都设计用户如何与产品交互。 但是这些人为了达到同一个目标，所执行的功能略有不同。</p><h3 id="UX-Designer-User-Experience-Designer"><a href="#UX-Designer-User-Experience-Designer" class="headerlink" title="UX Designer (User Experience Designer)"></a>UX Designer (User Experience Designer)</h3><h3 id="用户体验设计师"><a href="#用户体验设计师" class="headerlink" title="用户体验设计师"></a>用户体验设计师</h3><p>UX designers are primarily concerned with how the product feels. The goal is make the user’s interaction as efficient and simple as possible. UX designers look at design from the mindspace of a user and squash potential problems by:</p><p>用户体验设计师主要关心的是产品的感觉。 我们的目标是让用户的交互尽可能的高效和简单。 用户体验设计师从用户的思维空间来看待设计，通过以下方式来消除潜在的问题:</p><ul><li><p>Writing various product user scenarios and building patterns of interaction. </p></li><li><p>编写各种产品用户场景和构建交互模式</p></li><li><p>Resorting to various kinds of testing and watching what users do (e.g. usability-lab studies, eye-tracking, A/B testing, email surveys, etc). </p></li><li><p>通过各种测试和观察用户的行为(例如: 可用性实验室研究、眼球追踪、 a / b 测试、电子邮件调查等)</p></li><li><p>Prototyping an interface and creating the products logic via wireframes. </p></li><li><p>原型化界面并通过线框图创建产品逻辑</p></li></ul><h3 id="UI-Designer-User-Interface-Designer"><a href="#UI-Designer-User-Interface-Designer" class="headerlink" title="UI Designer (User Interface Designer)"></a>UI Designer (User Interface Designer)</h3><h3 id="Ui-设计师-用户界面设计师"><a href="#Ui-设计师-用户界面设计师" class="headerlink" title="Ui 设计师(用户界面设计师)"></a>Ui 设计师(用户界面设计师)</h3><p>UI designers, on the other hand are the people who are primarily concerned how the product looks. They responsible for how we see the product in its final version. They are in charge of designing each screen or page with which a user interacts and ensuring that the user interface visually communicates the logic that a UX designer has offered (for example, a UI designer creating a data dashboard can front load the most important content at the top). UI designers are also responsible for creating a style guide and unified visual language that is applied across the product.</p><p>另一方面，UI 设计师主要关心的是产品的外观。 他们负责我们如何看待产品的最终版本。 他们负责设计用户交互的每个屏幕或页面，并确保用户界面可视化地传达用户体验设计师提供的逻辑(例如，创建数据指示板的用户界面设计师可以在顶部前端加载最重要的内容)。 Ui 设计师还负责创建一个样式指南和统一的视觉语言，应用于整个产品。</p><p><img src="/assets/translate/201911301238.png" alt="Ui 设计师找到了突出显示那些应该吸引用户注意力的元素的最佳方式"></p><h3 id="Product-Designer"><a href="#Product-Designer" class="headerlink" title="Product Designer"></a>Product Designer</h3><h3 id="产品设计师"><a href="#产品设计师" class="headerlink" title="产品设计师"></a>产品设计师</h3><p>Product Designer is a sum-up term used to describe a designer who is generally involved in the creation of the look and feel of a whole product. Many product designers consider themselves to be designers who design experiences. This means that a product designer is the one who gives real insight to UX and UI designers when it comes to how certain features should work, or how a certain UI control should look.</p><p>产品设计师是一个总结术语，用来描述一个设计师，他通常参与创造整个产品的外观和感觉。 许多产品设计师认为自己是有设计经验的设计师。 这意味着产品设计师是那个在特定功能应该如何工作，或者特定 UI 控件应该如何外观方面给用户体验和用户界面设计师提供真正见解的人。</p><p>Companies use the term ‘Product Designer’ differently; the most general definition is a person who’s a champion of a user’s needs. As Justin Edmund said, “A product designer oversees product vision from a high level (how does this feature make sense for where we want to be in 6 months) to a low execution level (how does styling this button this way impact how the user flows through this function).”</p><p>公司使用“产品设计师”这个术语的方式不同; 最普遍的定义是一个能够满足用户需求的人。 正如 Justin Edmund 所说，“产品设计师监督产品远景，从高层次(这个功能对我们6个月后的目标有什么意义)到低层次的执行(这样设计这个按钮如何影响用户通过这个功能的流程)。”</p><h2 id="Drivers-of-Design-Evolution"><a href="#Drivers-of-Design-Evolution" class="headerlink" title="Drivers of Design Evolution"></a>Drivers of Design Evolution</h2><h2 id="设计进化的驱动力"><a href="#设计进化的驱动力" class="headerlink" title="设计进化的驱动力"></a>设计进化的驱动力</h2><p>Design and its component practices are like any other craft: you can always develop a deeper familiarity with the minutiae and master your skills by taking more active role in whole design process. There’s a general positive trend of designers taking on a larger scope of responsibilities within the product development process, and here are some drivers for this trend:</p><p>设计及其组件实践就像其他工艺一样: 你总是可以通过在整个设计过程中扮演更积极的角色，对细节有更深入的了解，并掌握自己的技能。 设计师在产品开发过程中承担更大范围的责任，这是一个普遍的积极趋势，以下是这一趋势的一些驱动因素:</p><h3 id="Design-Thinking"><a href="#Design-Thinking" class="headerlink" title="Design Thinking"></a>Design Thinking</h3><h3 id="设计思维"><a href="#设计思维" class="headerlink" title="设计思维"></a>设计思维</h3><p>Design thinking has become a popular approach for designing a product. The best design reflects the product’s goals. Good designers have always applied design thinking to product design, whether physical or digital, because it’s focussed on end-to-end product development, not just the “design phase” part.</p><p>设计思维已经成为一种流行的产品设计方法。 最好的设计反映了产品的目标。 优秀的设计师总是将设计思维应用到产品设计中，无论是物理设计还是数字设计，因为他们关注的是端到端的产品开发，而不仅仅是“设计阶段”。</p><p><img src="/assets/translate/201911301253.png" alt="设计思维是一个以人为中心的创造过程，为用户构建有意义和有效的解决方案。"></p><p>When thinking in products, designers should understand business objectives and be able to answer the following questions first:</p><p>在思考产品时，设计师应该理解商业目标，并能够首先回答以下问题:</p><ul><li>What problem do we solve? 我们要解决什么问题？</li><li>Who has these problems? 谁有这些问题？</li><li>Why are we doing this? 我们为什么要这么做？</li><li>How are we doing this? 我们要怎么做？</li><li>What do we want to achieve? 我们想要实现什么？</li></ul><p>Answering these questions helps designers understand the user experience of a product as a whole; not purely as interaction (feel) or visual (look) design part. Only after that it makes sense to move to the actual state offinding a design solution which includes following 6 phases:</p><p>回答这些问题可以帮助设计师理解整个产品的用户体验，而不仅仅是交互(感觉)或视觉(外观)设计部分。 只有在这之后，才有意义转移到实际状态，提出一个包括以下6个阶段的设计方案:</p><ul><li><p>Empathize: Conduct research to develop a deeper understanding of your users. </p></li><li><p>感同身受: 进行研究，深入了解你的用户</p></li><li><p>Define: Combine your research and observe where your users’ problem exist. In pinpointing your users’ needs, begin to highlight opportunities for innovation. </p></li><li><p>定义: 结合你的研究，观察用户存在问题的地方。 在精确定位用户的需求时，开始强调创新的机会</p></li><li><p>Ideate: Generate a range of potential solutions by giving yourself and your team total freedom. </p></li><li><p>想法: 通过给你自己和你的团队完全的自由来产生一系列可能的解决方案</p></li><li><p>Prototype: Build a prototype (or series of prototypes) to test your solution. Creating a prototype lets designer see if they’re on the right track, and often sparks different ideas that wouldn’t come in other cases. </p></li><li><p>Prototype: 构建一个原型(或一系列原型)来测试您的解决方案。 创建一个原型让设计师看看他们是否在正确的轨道上，并经常会激发不同的想法，不会出现在其他情况下</p></li><li><p>Test: Return to your users for feedback. Ask yourself ‘Does this solution meet users’ needs?’ </p></li><li><p>测试: 返回给你的用户以获得反馈。 问问自己这个解决方案是否满足用户的需求</p></li><li><p>Implement” Put the vision into effect. Ensure that your solution is materialized and works for your users. This step is crucial for the entire process. </p></li><li><p>实施”把愿景付诸实施。 确保您的解决方案是具体化的，并且对用户有效。 这一步对整个过程至关重要</p></li></ul><p><img src="/assets/translate/201911301259.png" alt="设计思维框架"></p><h3 id="Collaborative-Work"><a href="#Collaborative-Work" class="headerlink" title="Collaborative Work"></a>Collaborative Work</h3><h3 id="协同工作"><a href="#协同工作" class="headerlink" title="协同工作"></a>协同工作</h3><p>More and more companies try to unify designers and developers into the development process. This new way of product development has two major benefits:</p><p>越来越多的公司试图将设计师和开发人员统一到开发过程中。 这种新的产品开发方式有两个主要好处:</p><p>Working together in a collaborative environment creates a situation where team members are encouraged to think wildly. Also embracing the critique of a whole team is the best way to refine something that, if designed in isolation, is at risk of becoming impossible to use. </p><p>在一个协作的环境中共同工作创造了一种鼓励团队成员广泛思考的情况。 接受整个团队的批评也是改进某些东西的最好方法，如果单独设计，就有变得不可能使用的风险</p><p>Methodologies such as Agile and Lean leads to designers and other team members working more cross-functionally with larger scopes of responsibility. 方法论，例如敏捷及倾斜导致设计师和其他团队成员在更大的职责范围内跨职能地工作</p><p><img src="/assets/translate/201911301305.png" alt="一个统一的过程促进更好的工作"></p><h3 id="Continuous-Improvement-Iterative-Design"><a href="#Continuous-Improvement-Iterative-Design" class="headerlink" title="Continuous Improvement (Iterative Design)"></a>Continuous Improvement (Iterative Design)</h3><h3 id="持续改进-迭代设计"><a href="#持续改进-迭代设计" class="headerlink" title="持续改进(迭代设计)"></a>持续改进(迭代设计)</h3><p>Unlike more traditional forms of design, design process for digital products isn’t a one-time thing and designers should never assume to get everything right on the first go. Implementation often reveals gaps in the design: undocumented conditions or bad assumptions about product usage, which hard to predict without shipping the product.</p><p>与传统的设计形式不同，数字产品的设计过程不是一次性的，设计师永远不应该假设一开始就把每件事都做对。 实现往往会揭示设计中的差距: 没有记录的条件或关于产品使用的错误假设，如果没有运输产品，就很难预测。</p><p><img src="/assets/translate/201911301308.png" alt="如何构建产品"></p><p>To design a successful product you need to adopt a process of continuous improvement. Iterative design follows the idea that design should be done in repeated cycles: it’s a process of constantly refining and improving the product based on both qualitative and quantitative feedback data from your users. This is a great opportunity for designers to see a bigger picture, improve their work based on user feedback and make the product inherently more valuable to the user.</p><p>为了设计一个成功的产品，你需要采用一个持续改进的过程。 迭代设计遵循的思想是设计应该在重复的循环中进行: 它是一个不断地改进和提高产品的过程，这个过程基于来自用户的定性和定量的反馈数据。 对于设计师来说，这是一个很好的机会，他们可以看到更大的图景，根据用户的反馈改进他们的工作，使产品对用户来说更有价值。</p><p><img src="/assets/translate/201911301309.png" alt="产品设计是一个依赖于设计思维的迭代过程。"></p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Product design represents the next enlargement of design scope, from just user experience design towards an even broader state of design for an entire product.</p><p>产品设计代表了下一次设计范围的扩大，从单纯的用户体验设计到更广泛的整个产品设计状态。</p><p>The best products are built by people who understand the whole product, not just their silo. In order to make such products, UI/UX Designers should look to evolve into Product Designers who are able to generate and process a additional information to get the best result.</p><p>最好的产品是由了解整个产品的人创造的，而不仅仅是他们自己的筒仓。 为了制造这样的产品，ui / ux 设计师应该考虑发展成为能够生成和处理附加信息以获得最佳结果的产品设计师。</p>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;&lt;h1&gt; 从 ui / ux 设计师到产品设计师的演变&lt;/h1&gt;&lt;/center&gt;

&lt;blockquote&gt;
&lt;p&gt;本文来自阅读极客时间专栏《左耳听风》89 | 程序员练级攻略：UI/UX设计 文章中的推荐阅读&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;原文链接：&lt;a href=&quot;https://medium.com/thinking-design/the-evolution-of-ui-ux-designers-into-product-designers-623e4e7eaab3&quot;&gt;https://medium.com/thinking-design/the-evolution-of-ui-ux-designers-into-product-designers-623e4e7eaab3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;作者：Adobe Creative Cloud&lt;/li&gt;
&lt;li&gt;2017年1月18日&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/assets/translate/201911301134.jpeg&quot;&gt;&lt;/p&gt;
&lt;p&gt;What is a product? Until recently, the term was only used in relation to something material and often found in a retail store, but nowadays it is coming to mean digital products as well. Apps are modern products.&lt;/p&gt;
&lt;p&gt;什么是产品？ 直到最近，这个词还只是用来指物质的东西，通常在零售店里才能找到，但是现在它也开始指数字产品了。 应用程序是现代产品。&lt;/p&gt;
    
    </summary>
    
      <category term="翻译" scheme="https://blogs.zhaozf.site/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
      <category term="翻译" scheme="https://blogs.zhaozf.site/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="Adobe" scheme="https://blogs.zhaozf.site/tags/Adobe/"/>
    
      <category term="产品设计的演化过程" scheme="https://blogs.zhaozf.site/tags/%E4%BA%A7%E5%93%81%E8%AE%BE%E8%AE%A1%E7%9A%84%E6%BC%94%E5%8C%96%E8%BF%87%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>如何在 Windows 上安装 Django并创建应用</title>
    <link href="https://blogs.zhaozf.site/7b73b3e5/"/>
    <id>https://blogs.zhaozf.site/7b73b3e5/</id>
    <published>2019-10-17T10:03:31.000Z</published>
    <updated>2019-10-25T10:29:41.693Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/blogImg/201910251755.jfif"></p><blockquote><p>本文将指导您如何在 Windows 上安装 Python 3.7.4和 Django。<br>它还提供了关于安装 virtualenv 和 virtualenvwrapper 的说明。<br>这使得在 Python 项目中工作更加容易。<br>这是为 Django 项目工作的用户提供的初学者指南，并不反映在为 Django 本身开发补丁时应该如何安装 Django。</p></blockquote><p>本指南中的步骤已经在 Windows 7、8和10中测试过了。 在其他版本中，步骤类似。 你将需要熟悉使用命令提示符。</p><a id="more"></a><h2 id="安装-Python"><a href="#安装-Python" class="headerlink" title="安装 Python"></a>安装 Python</h2><p>Django 是一个 Python web 框架，因此需要在机器上安装 Python。 在撰写本文时，使用的是Python 3.7.4版本。</p><p>要在你的机器上安装 Python，请访问 google <a href="https://python.org/downloads/">https://Python.org/downloads/</a> 。 这个网站应该为你提供一个最新版本的 Python 下载按钮。 下载可执行安装程序并运行它。 选中“向 PATH 添加 Python 3.5”旁边的复选框，然后单击“立即安装”。</p><p>安装完成后，打开命令提示符并检查 Python 版本是否与您通过执行以下命令安装的版本相匹配:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">python</span> --<span class="keyword">version</span></span><br></pre></td></tr></table></figure><h2 id="关于pip"><a href="#关于pip" class="headerlink" title="关于pip"></a>关于pip</h2><p>Pip 是 Python 的一个包管理。 它进行安装和卸载 Python 包(比如 Django!) 很简单。 对于安装的其余部分，我们将使用 pip 从命令行安装 Python 包。</p><p>要在您的计算机上安装 pip，请转到安装 <a href="https://pip.pypa.io/en/latest/Installing/">https://pip.pypa.io/en/latest/Installing/</a> ，并按照 get-pip.py 说明进行安装。</p><p>如果您正在使用 Python 22.7.9或 Python 33.4，或者您正在 virtualenv 或 pyvenv 创建的虚拟环境中工作，那么 pip 已经安装。 只需确保升级 pip 即可。</p><h2 id="安装virtualenv-及virtualenvwrapper"><a href="#安装virtualenv-及virtualenvwrapper" class="headerlink" title="安装virtualenv 及virtualenvwrapper"></a>安装virtualenv 及virtualenvwrapper</h2><p>Virtualenv 和 virtualenvwrapper 为您创建的每个 Django 项目提供一个专用的环境。 虽然不是强制性的，但这被认为是最佳实践，并且在将来准备部署项目时将为您节省时间。 简单地输入:</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install</span> virtualenvwrapper-win</span><br></pre></td></tr></table></figure><p>然后为你的项目创建一个虚拟环境:</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">mkvirtualenv myproject</span></span><br></pre></td></tr></table></figure><p>虚拟环境将被自动激活，您将在命令提示符旁边看到“(myproject)”来指定该虚拟环境。 如果你启动一个新的命令提示符，你需要使用以下命令再次激活环境:</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">workon myproject</span></span><br></pre></td></tr></table></figure><h2 id="安装-Django"><a href="#安装-Django" class="headerlink" title="安装 Django"></a>安装 Django</h2><p>可以在虚拟环境中使用 pip 轻松地安装 Django。</p><p>在命令提示符中，确保虚拟环境处于活动状态，并执行以下命令:</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install</span> django</span><br></pre></td></tr></table></figure><p>这将下载并安装最新的 Django 版本。</p><p>安装完成后，您可以通过在命令提示符中执行 Django-admin – version 来验证您的 Django 安装。</p><h2 id="编写你的第一个-Django-应用程序"><a href="#编写你的第一个-Django-应用程序" class="headerlink" title="编写你的第一个 Django 应用程序"></a>编写你的第一个 Django 应用程序</h2><h4 id="创建一个项目"><a href="#创建一个项目" class="headerlink" title="创建一个项目"></a>创建一个项目</h4><p>如果这是您第一次使用 Django，那么您必须处理一些初始设置。 也就是说，您需要自动生成一些代码来建立 Django 项目—— Django 实例的设置集合，包括数据库配置、特定于 Django 的选项和特定于应用程序的设置。</p><p>从命令行中，cd 进入你想存储代码的目录，然后运行以下命令:</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">...</span>\&gt; django-admin startproject mysite</span><br></pre></td></tr></table></figure><p>这将在你的工作目录文件夹中创建一个 mysite 目录。 如果不起作用，请参阅运行 django-admin 的问题。</p><p>让我们来看看 startproject 创建了什么:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">mysite</span>/</span><br><span class="line">    <span class="selector-tag">manage</span><span class="selector-class">.py</span></span><br><span class="line">    <span class="selector-tag">mysite</span>/</span><br><span class="line">        __<span class="selector-tag">init__</span><span class="selector-class">.py</span></span><br><span class="line">        <span class="selector-tag">settings</span><span class="selector-class">.py</span></span><br><span class="line">        <span class="selector-tag">urls</span><span class="selector-class">.py</span></span><br><span class="line">        <span class="selector-tag">wsgi</span><span class="selector-class">.py</span></span><br></pre></td></tr></table></figure><ul><li>manage.py：命令行实用程序，允许您以各种方式与这个 django 项目交互。</li><li>mysite/<strong>init</strong>.py: 一个空文件，它告诉 Python 这个目录应该被视为一个 Python 包。</li><li>mysite/settings.py: 此 Djangoproject 的设置 / 配置。</li><li>mysite/urls.py: 这个 Django 项目的 URL 声明; 您的 Django 驱动站点的“目录”。</li><li>mysite/wsgi.py:为您的项目提供与 wsgi 兼容的 web 服务器的入口点。</li></ul><h2 id="开发服务器"><a href="#开发服务器" class="headerlink" title="开发服务器"></a>开发服务器</h2><p>让我们验证一下您的 Django 项目是否正常工作。 如果你还没有进入外部 mysite 目录，可以运行以下命令:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">...\&gt; <span class="keyword">py</span> manage.<span class="keyword">py</span> runserver</span><br></pre></td></tr></table></figure><p>您将在命令行上看到以下输出:</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Performing<span class="keyword"> system</span> checks...</span><br><span class="line"></span><br><span class="line">System<span class="built_in"> check </span>identified no issues (0 silenced).</span><br><span class="line"></span><br><span class="line">You have unapplied migrations; your app may<span class="built_in"> not </span>work properly until they are applied.</span><br><span class="line">Run &#x27;python manage.py migrate&#x27; to apply them.</span><br><span class="line"></span><br><span class="line">October 16, 2019 - 15:50:53</span><br><span class="line">Django version 2.2, using settings &#x27;mysite.settings&#x27;</span><br><span class="line">Starting development server at http://127.0.0.1:8000/</span><br><span class="line">Quit the server with CONTROL-C.</span><br></pre></td></tr></table></figure><p>您已经启动了 Django 开发服务器，这是一个纯粹用 Python 编写的轻量级 Web 服务器。 我们已经在 Django 中包含了这一点，这样您就可以快速开发，而无需配置生产服务器(比如 Apache) ，直到您准备好投入生产。</p><p>现在是注意的好时机: 不要在任何类似于生产环境的环境中使用此服务器。 它只能在开发过程中使用。 (我们的业务是制作 Web 框架，而不是 Web 服务器。)</p><p>现在服务器已经运行，可以使用 Web 浏览器访问 google <a href="http://127.0.0.1:8000/">http://127.0.0.1:8000/</a> 。 你会看到一个“恭喜! ” 佩奇，火箭正在起飞。 成功了！</p><p><img src="/assets/blogImg/201910171811.png"></p><h4 id="①改变端口"><a href="#①改变端口" class="headerlink" title="①改变端口"></a>①改变端口</h4><p>默认情况下，runserver 命令在内部 IP 端口8000启动开发服务器。<br>如果要更改服务器端口，请将其作为命令行参数传递。 例如，这个命令在端口8080上启动服务器:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">...\&gt; <span class="keyword">py</span> manage.<span class="keyword">py</span> runserver <span class="number">8080</span></span><br></pre></td></tr></table></figure><p>如果您想更改服务器的 IP，请将它与端口一起传递。 例如，要侦听所有可用的公共 ip (如果你正在运行 Vagrant 或者想在网络上的其他计算机上炫耀你的工作，这是很有用的) ，使用:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">...\&gt; <span class="selector-tag">py</span> <span class="selector-tag">manage</span><span class="selector-class">.py</span> <span class="selector-tag">runserver</span> 0<span class="selector-pseudo">:8000</span></span><br></pre></td></tr></table></figure><p>0是0.0.0.0的捷径。 开发服务器的完整文档可以在 runserver 参考中找到。</p><h4 id="②运行服务器的自动重新加载"><a href="#②运行服务器的自动重新加载" class="headerlink" title="②运行服务器的自动重新加载"></a>②运行服务器的自动重新加载</h4><p>开发服务器根据需要为每个请求自动重新加载 Python 代码。 您不需要重新启动服务器，代码更改即可生效。 但是，像添加文件样的<br>操作不会触发重新启动，因此在这些情况下必须重新启动服务器。</p><h2 id="创建投票应用程序"><a href="#创建投票应用程序" class="headerlink" title="创建投票应用程序"></a>创建投票应用程序</h2><p>现在您的环境(一个“项目”)已经设置好了，您就可以开始工作了。</p><p>您在 Django 中编写的每个应用程序都由遵循某种约定的 Python 包组成。 自带了一个工具，可以自动生成应用程序的基本目录结构，所以你可以专注于编写代码而不是创建目录。</p><blockquote><h2 id="项目-vs-应用程序"><a href="#项目-vs-应用程序" class="headerlink" title="项目 vs 应用程序"></a>项目 vs 应用程序</h2><p>项目和应用程序有什么区别？ 应用程序是一个 Web 应用程序，它可以做一些事情，比如 Weblog 系统、公共记录数据库或者一个简单的投票应用程序。 项目是针对特定网站的配置和应用程序的集合。 一个项目可以包含多个应用程序。 一个应用程序可以在多个项目中。</p></blockquote><p>你的应用程序可以在你的 Python 路径上的任何地方运行。 在本教程中，我们将在 manage.py 文件旁边创建我们的投票应用程序，这样它就可以作为自己的顶级模块导入，而不是 mysite 的子模块。</p><p>要创建你的应用程序，确保你和 manage.py 在同一个目录下，然后输入以下命令:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">...\&gt; <span class="keyword">py</span> manage.<span class="keyword">py</span> startapp polls</span><br></pre></td></tr></table></figure><p>这将创建一个目录民意调查，如下所示:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">polls</span>/</span><br><span class="line">    __<span class="selector-tag">init__</span><span class="selector-class">.py</span></span><br><span class="line">    <span class="selector-tag">admin</span><span class="selector-class">.py</span></span><br><span class="line">    <span class="selector-tag">apps</span><span class="selector-class">.py</span></span><br><span class="line">    <span class="selector-tag">migrations</span>/</span><br><span class="line">        __<span class="selector-tag">init__</span><span class="selector-class">.py</span></span><br><span class="line">    <span class="selector-tag">models</span><span class="selector-class">.py</span></span><br><span class="line">    <span class="selector-tag">tests</span><span class="selector-class">.py</span></span><br><span class="line">    <span class="selector-tag">views</span><span class="selector-class">.py</span></span><br></pre></td></tr></table></figure><p>这个目录结构将存放轮询应用程序。</p><h2 id="写下你的第一个观点"><a href="#写下你的第一个观点" class="headerlink" title="写下你的第一个观点"></a>写下你的第一个观点</h2><p>让我们编写第一个视图。 打开文件 polls / views.py 并在其中放入以下 Python 代码:</p><blockquote><p>polls/views.py</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;Hello, world. You&#x27;re at the polls index.&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这是 Django 中最简单的视图。 要调用这个视图，我们需要将它映射到一个 URL ——为此我们需要一个 URLconf。</p><p>要在 polls 目录中创建 URLconf，请创建一个名为 urls.py 的文件。 你的应用程序目录现在应该是这样的:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">polls</span>/</span><br><span class="line">    __<span class="selector-tag">init__</span><span class="selector-class">.py</span></span><br><span class="line">    <span class="selector-tag">admin</span><span class="selector-class">.py</span></span><br><span class="line">    <span class="selector-tag">apps</span><span class="selector-class">.py</span></span><br><span class="line">    <span class="selector-tag">migrations</span>/</span><br><span class="line">        __<span class="selector-tag">init__</span><span class="selector-class">.py</span></span><br><span class="line">    <span class="selector-tag">models</span><span class="selector-class">.py</span></span><br><span class="line">    <span class="selector-tag">tests</span><span class="selector-class">.py</span></span><br><span class="line">    <span class="selector-tag">urls</span><span class="selector-class">.py</span></span><br><span class="line">    <span class="selector-tag">views</span><span class="selector-class">.py</span></span><br></pre></td></tr></table></figure><p>在 polls / urls.py 文件中包含以下代码:</p><blockquote><p>polls/urls.py</p></blockquote><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> <span class="type">path</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, views.<span class="keyword">index</span>, <span class="type">name</span>=<span class="string">&#x27;index&#x27;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>下一步是将根 URLconf 指向 polls.url 模块。 在 mysite / urls.py 中，为 django.urls.include 添加一个导入，并在 urlpatterns 列表中插入一个 include () ，这样就可以:</p><blockquote><p>mysite/urls.py</p></blockquote><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> <span class="keyword">admin</span></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> <span class="keyword">include</span>, <span class="type">path</span></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;polls/&#x27;</span>, <span class="keyword">include</span>(<span class="string">&#x27;polls.urls&#x27;</span>)),</span><br><span class="line">    path(<span class="string">&#x27;admin/&#x27;</span>, <span class="keyword">admin</span>.site.urls),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>函数允许引用其他 URLconfs。 无论 Django 遇到什么 include () ，它都会删除与该点匹配的 URL 的任何部分，并将剩余的字符串发送到包含的 URLconf 进行进一步处理。</p><p>Include ()背后的思想是为了便于插入和播放 url。 因为民意调查是在它们自己的 URLconf (polls / urls.py)中，所以它们可以放在“ / polls / ” ，或者“ / fun polls / ” ，或者“ / content / polls / ” ，或者任何其他路径根目录下，这个应用程序仍然可以工作。</p><blockquote><h4 id="何时使用-include"><a href="#何时使用-include" class="headerlink" title="何时使用 include ()"></a>何时使用 include ()</h4><p>当您包含其他 URL 模式时，您应该始终使用 include ()。 Url 是唯一的例外。</p></blockquote><p>您现在已经将索引视图连接到 URLconf。 确认它正在使用以下命令:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">...\&gt; <span class="keyword">py</span> manage.<span class="keyword">py</span> runserver</span><br></pre></td></tr></table></figure><p>在你的浏览器中进入 <a href="http://localhost:8000/polls/">http://localhost:8000/polls/</a> ，你会看到文本“Hello, world. You’re at the polls index.” ，您在索引视图中定义的。</p><blockquote><h4 id="页面没有找到？"><a href="#页面没有找到？" class="headerlink" title="页面没有找到？"></a>页面没有找到？</h4><p>如果你在这里得到一个错误页面，检查你要去的是 <a href="http://localhost:8000/polls/">http://localhost:8000/polls/</a> ，而不是 <a href="http://localhost:8000/">http://localhost:8000/</a> 。</p></blockquote><p>Path ()函数传递了四个参数，其中两个是必需的: route 和 view，两个是可选的: kwargs 和 name。 在这一点上，我们有必要回顾一下这些争论的目的。</p><h3 id="path-argument-route"><a href="#path-argument-route" class="headerlink" title="path() argument: route"></a>path() argument: route</h3><p>Route 是一个包含 URL 模式的字符串。 当处理一个请求时，Django 从 urlpatterns 中的第一个模式开始，沿着列表一路向下，将请求的 URL 与每个模式进行比较，直到找到匹配的模式。</p><p>模式不搜索 GET 和 POST 参数或域名。 例如，在对 myapp / <a href="https://www.example.com/myapp/">https://www.example.com/myapp/</a> 的请求中，URLconf 将查找 myapp / 。 在 <a href="https://www.example.com/myapp/?page=3%E7%9A%84%E8%AF%B7%E6%B1%82%E4%B8%AD%EF%BC%8CURLconf">https://www.example.com/myapp/?page=3的请求中，URLconf</a> 也会查找 myapp / 。</p><h3 id="path-argument-view"><a href="#path-argument-view" class="headerlink" title="path() argument: view"></a>path() argument: view</h3><p>当 Django 找到一个匹配模式时，它调用指定的视图函数，其中以 HttpRequest 对象作为第一个参数，并将 route 中的任何“捕获”值作为关键字参数。 我们稍后会给出一个例子。</p><h3 id="path-argument-kwargs"><a href="#path-argument-kwargs" class="headerlink" title="path() argument: kwargs"></a>path() argument: kwargs</h3><p>可以在字典中将任意关键字参数传递给目标视图。 我们不打算在本教程中使用 Django 的这个特性。</p><h3 id="path-argument-name"><a href="#path-argument-name" class="headerlink" title="path() argument: name"></a>path() argument: name</h3><p>命名 URL 可以让您明确地从 Django 中的其他地方引用它，尤其是从模板中。 这个功能强大的特性允许您对项目的 URL 模式进行全局更改，同时只触及单个文件。</p><p>当您熟悉了基本的请求和响应流后，请阅读本教程的第2部分以开始使用数据库。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/blogImg/201910251755.jfif&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本文将指导您如何在 Windows 上安装 Python 3.7.4和 Django。&lt;br&gt;它还提供了关于安装 virtualenv 和 virtualenvwrapper 的说明。&lt;br&gt;这使得在 Python 项目中工作更加容易。&lt;br&gt;这是为 Django 项目工作的用户提供的初学者指南，并不反映在为 Django 本身开发补丁时应该如何安装 Django。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本指南中的步骤已经在 Windows 7、8和10中测试过了。 在其他版本中，步骤类似。 你将需要熟悉使用命令提示符。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://blogs.zhaozf.site/categories/Python/"/>
    
    
      <category term="python" scheme="https://blogs.zhaozf.site/tags/python/"/>
    
      <category term="Django" scheme="https://blogs.zhaozf.site/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>三阶魔方教程</title>
    <link href="https://blogs.zhaozf.site/f14f7f57/"/>
    <id>https://blogs.zhaozf.site/f14f7f57/</id>
    <published>2019-09-15T13:19:28.000Z</published>
    <updated>2019-10-25T10:29:41.691Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/blogImg/201909152135.jpg"></p><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>魔方 ，英文名为Rubik’s Cube，又叫鲁比克方块，台湾地区称之为魔术方块，香港地区称之为扭计骰，最早是由匈牙利布达佩斯建筑学院厄尔诺·鲁比克（又称作厄尔诺·卢比克）教授于1974年发明的。魔方与中国人发明的“华容道”，法国人发明的“独立钻石”一起被称为世界三大智力运动。魔方竞速是一项手部极限运动。</p><p>三阶发明以后，许多其他种类型的魔方纷纷出现靠，如二阶（2<em>2</em>2）、四阶、五阶、六阶…..至今已达到十三阶。还有许多节点的异形魔方，如五魔方、镜面。金字塔、斜转、SQ1、不等阶、捆绑、连体、空心、齿轮、魔中魔、超级转角、智慧之轮、时间机器等等……</p><a id="more"></a><h2 id="二、魔方的比赛相关"><a href="#二、魔方的比赛相关" class="headerlink" title="二、魔方的比赛相关"></a>二、魔方的比赛相关</h2><p>世界魔方协会（英文 ：Word Cube Association，简称WCA）是魔方官方的国际性赛事组织，成立于2003年，只有通过世界魔方协会的比赛才能记载入世界纪录。WCA现有的比赛记录：</p><table><thead><tr><th>~</th><th align="center">单次</th><th align="right">平均</th></tr></thead><tbody><tr><td>二阶</td><td align="center">0.49</td><td align="right">1.51</td></tr><tr><td>三阶</td><td align="center">4.9</td><td align="right">6.45</td></tr><tr><td>四阶</td><td align="center">21.54</td><td align="right">26.06</td></tr><tr><td>五阶</td><td align="center">44.83</td><td align="right">53.08</td></tr><tr><td>六阶</td><td align="center">1:33.55</td><td align="right">1:44.88</td></tr><tr><td>七阶</td><td align="center">2:20.66</td><td align="right">2:25.06</td></tr><tr><td>三阶盲拧</td><td align="center">21.05</td><td align="right">24.72</td></tr><tr><td>三阶单手</td><td align="center">6.88</td><td align="right">10.7</td></tr><tr><td>魔表</td><td align="center">2.76</td><td align="right">5.72</td></tr><tr><td>脚拧</td><td align="center">20.57</td><td align="right">28.16</td></tr><tr><td>五魔方</td><td align="center">35.94</td><td align="right">42.89</td></tr><tr><td>金字塔</td><td align="center">1.32</td><td align="right">2.41</td></tr><tr><td>SQ1</td><td align="center">6.84</td><td align="right">9.90</td></tr><tr><td>斜转</td><td align="center">1.10</td><td align="right">2.76</td></tr><tr><td>最小步</td><td align="center">19步</td><td align="right">24.33步</td></tr></tbody></table><h2 id="三、魔方的其他玩法"><a href="#三、魔方的其他玩法" class="headerlink" title="三、魔方的其他玩法"></a>三、魔方的其他玩法</h2><ul><li>速拧–有15秒观察时间，用最短的时间复原一个魔方，快者为胜。</li><li>盲拧–将魔方记忆下来，不得做笔记，接着戴上眼罩并且由裁判用纸板挡住视线，复原魔方。记忆魔方的时间也算入最终成绩。</li><li>多盲–参赛者在比赛项目开始前必须说明将还原的魔方数目，每个魔方有十分钟的记忆时间，总时间限制为一个小时，最终成绩分数成功个数减去失败个数，<br>相同分数时用时最短者胜。</li><li>单拧–也称三单，即用单手复原魔方，复原阶段开始后一旦接触到魔方，则不能用其他部位包括另一只手或物品接触魔方。</li><li>脚拧–用脚复原魔方，一般为坐在合适高度的椅子上复原。</li><li>最小步–可自备最多三个魔方，白纸和笔若干，在1小时内把解法写在纸上，最小步者为胜。</li></ul><h2 id="四、魔方界名人"><a href="#四、魔方界名人" class="headerlink" title="四、魔方界名人"></a>四、魔方界名人</h2><p>菲神：Feliks Zemdegs，1995年12月20日出生在澳大利亚墨尔本。魔方界的天才，目前已打破78项魔方世界记录，并且多数是打破自己的记录。<br>庄海燕：网名瓦西里（老瓦），盲拧传奇人物。<br>张砷镓：国内首个WCA赛中单次SUB10的魔友，魔方系列文章非常有水准，特别是《十字天书》对许多CROSS提速有非常大的帮助。<br>中岛悠：曾打破多项世界纪录，“中岛非标”可以说是速拧必修课。<br>江淦源：前中国世界纪录保持者，其编写的GANCFOP和其创立的江淦源GAN品牌三阶魔方均受到广大魔友的好评。</p><h2 id="五、魔方常用术语"><a href="#五、魔方常用术语" class="headerlink" title="五、魔方常用术语"></a>五、魔方常用术语</h2><p>N阶：阶数一般指魔方主体部分两个相邻旋转面共有的块数，如三阶魔方每个边有三个小块，四阶每边有四个小块。<br>复原：指魔方从非原始状态到原始状态的过程。<br>容错：魔方没转到位，仍然可以转动其它层的一个能力。<br>SUB：Subtraction，在魔方圈内一般指在xx以下、以内。<br>AVG：Average，指平均成绩。<br>DNF：Did not finish，指放弃此次成绩。<br>DNS：Did not start ，指复原开始前弃权。<br>PB: Personal Best.指个人魔方最快记录。<br>UWR：Unofficial World Record，指非官方统计世界纪录。<br>WR：World Record，指世界纪录；（世界WR全国NR亚洲AsR欧洲ER北美洲NAR南美SAR大洋OcR 非洲AfR）<br>WCA：World Cube Association，指世界魔方协会。<br>FSC：  Finger Short Cut的缩写。指由一组旋转动作组成的、在公式中经常出现的顺手手法（如 R U R’ U’）。<br>CZZ：有两种含义①拆再装法 ②Cross+ZBF2L+ZBLL法。<br>BLD：Blindfold Cubing，指盲拧。<br>PSC：Prepared Solve Challenge，指同一条打乱公式，自行研究解法并录制视频上传，以还原时间最短者为胜。<br>LBL：Layer By Layer的简称。指层先法（七步法、基础法）。<br>CFOP：Fridrich Method 的简称，三阶速拧复原法，流程为Cross、F2L、OLL、PLL，取每一步骤的首字母作为简称。<br>Cross：十字。指还原底层的4个棱块。<br>F2L：Frist Two Layers的缩写。指CFOP法复制前两层的方法。<br>OLL：Orientation of Last Layer 的缩写。指最后一层朝向。<br>PLL：Permutation of Last Layer 的缩写。指最后一层换位。<br>跳P：指魔方幸运地直接复原，跳过了PLL步骤。跳0同理。</p><h2 id="六、魔方花样公式"><a href="#六、魔方花样公式" class="headerlink" title="六、魔方花样公式"></a>六、魔方花样公式</h2><p>六面回字： U’  D  F’  B  L  R’  U’  D<br>四色回字： B2  L  R  B  L2  B  F  D  U’  B  F  R2  F’  L  R<br>对称棋盘： L2  R2  F2  B2  U2   D2<br>循环棋盘： D2  F2  U’  B2  F2  L2  R2  D  R’  B  F  D’  U  L  R  D2  U2  F’  U2<br>六面十字： B2  F’  L2  R2  D2  B2  F2  L2  R2  U2  F’<br>四面十字： U2  R  B  D  B  F’  L’  U’  B  F’  L  F  L’  R  D  U2  F’  R’  U2<br>六面五色： U  B2  L2  B  F’  U  F’  D2  L  D2  F  D  R2  F2  R’  B’  U’  R’<br>六面六色： D2  U2  L2  B  R2  D’  L2  R2  D2  B2  F2  U’ R2  B’  R2<br>六面彩条： F2  U2  F2  B2  U2  F  B<br>六面三条：（U2  L2）3  (U2  R2)3  U  D  L2  R2<br>六面凹字： F2  L’  R  B2  U2  L  R’  D2<br>六面凹字： U  D  L2  F2  U  D’  B2  R2  D2<br>六面凹：    F2  R  F2  R’    U2  F2  L  U2  B2  U2  F’  U2  R  D’  B2  D  F’  D2  R  F<br>六面工字： D2  M  L’  F2  B2  M  D2<br>六面Q字：  D  F2  U’  B  F’  L  R’  D  L2  U’  B  R2  B’  U  L2  U’<br>六面J字：   D2  L2  D  R2  U  B2  U2  B R’  B’  D  B2  R’  F  R2  F’  U  R’<br>六面L字：   L  R  U  D  F’  B’  L  R<br>六面E字：   F2  R2  F2  U’  R’  B2  F  L  R’  U  L’  R U B  U2 F2  D’  U’<br>六面U字：  D’  U  B  D’  L’ R  F  D’  U  L<br>六面T字：  U2  F2  R2  D  U’  L2  B2 D  U     或者    B2  D2  L  R’  D2  B2  L  R<br>CCTV字：  B2  R2  D2  U2  F2  L  R’  U2  L’  R’<br>大小魔方： U2L2F2  U’B2D  RF’RF’RF’  D’B2U’</p><h2 id="七、公式说明"><a href="#七、公式说明" class="headerlink" title="七、公式说明"></a>七、公式说明</h2><p>R  =  right 右面        F = front 前面        U =  up  上面<br>L  =  left  左面          B = back 后面        D =  down 下面</p><p>图：</p><p>公式记忆技巧：<br>大写表示一层，小写表示两层，带撇表示逆时针，不带撇表示顺时针。  M表示中间层（Middle），xyz表示魔方整体转动。</p><p>在四节或更高阶魔方里，由于多了很多层，所以另做以下定义：</p><p>M3R 表示从R层往左数的第三层单独转动，M2R缩写成MR。<br>T3R  表示从R层往左数的三个层同时转动。T2R缩写TR。<br>同理M4L,T3L<br>注意：顺逆时针，是基于正式着对应面的时候判断的。</p><h2 id="八、三阶魔方教程"><a href="#八、三阶魔方教程" class="headerlink" title="八、三阶魔方教程"></a>八、三阶魔方教程</h2><h4 id="①本教程以白色为底，建议大家也先按教程来，方便学习。"><a href="#①本教程以白色为底，建议大家也先按教程来，方便学习。" class="headerlink" title="①本教程以白色为底，建议大家也先按教程来，方便学习。"></a>①本教程以白色为底，建议大家也先按教程来，方便学习。</h4><p>1.1 在顶层组成小花<br>黄色中心块朝上，找到四个白色的棱块（白红，白橙，白绿，白蓝），如果在中层则可直接将其转到顶面。<br>如果他在底层或者顶层，需要先转到中层再处理。<br>注意：如果已有白棱在顶层，应先转动顶层避开，在归位。</p><p>如果已有白棱在顶层，应先转动顶层避开，在归位：</p><p>1.2  复原白色十字<br>转动顶层，使白色的棱块侧面颜色和中块颜色一致，将此层转动180度到底面。四个白色棱块注意按此方法归位到底层，第一步完成。</p><h4 id="②对好侧面T字"><a href="#②对好侧面T字" class="headerlink" title="②对好侧面T字"></a>②对好侧面T字</h4><p>第二步目标：此步目标是复位四个带有白色的角块（白红蓝、白红绿、白橙蓝、白橙绿），令第一层复原，在侧面可以看到一个倒着的“T”字。</p><p>2.1 复原顶层白色角块</p><p>公式1： R U R’ U’</p><p>2.2 复原底层白色角块<br>当顶层找不到白色角块后，在进行这一步：</p><p>用上述方法即可复原四个白色角块，至此底层完成进行下一步。</p><h4 id="③复原中层棱块"><a href="#③复原中层棱块" class="headerlink" title="③复原中层棱块"></a>③复原中层棱块</h4><p>此步目标是复原四个没有黄色面的棱块（红蓝，红绿，橙蓝，橙绿）。</p><p>3.1 复原在顶层的中层棱块<br>转动顶层（U）使要复原的块停在侧面颜色和中心块颜色相同的位置，对照以下两种情况做对应处理（目标位置要对着我们）</p><p>公式2： U R U’ R’ U’ F’ U F</p><p>公式3： U’ F’ U F U R U’ R’</p><p>大家可以发现这两个情况是镜像的，公式也是镜像的。这两条简单公式可以观察规律，结合自己的理解来记忆。</p><p>3.2 复原在中层错误的棱块</p><p>当第三层无合适的棱块时，在第二层找到未复原的棱块，接着转一次公式2可将其移动到顶层，再按对应情况处理。至此第三步完成。</p><p>前两层都完成后，恭喜你可以进行下一步了。</p><h4 id="④对顶层的黄色十字"><a href="#④对顶层的黄色十字" class="headerlink" title="④对顶层的黄色十字"></a>④对顶层的黄色十字</h4><p>顶层有以下四种情况，对照图中的所示的朝向，转公式4处理即可。</p><p>公式4： F  R  U  R’  U’  F’</p><p>当你的魔方完成上图所示后，可进行下一步。</p><h4 id="⑤复原顶层"><a href="#⑤复原顶层" class="headerlink" title="⑤复原顶层"></a>⑤复原顶层</h4><p>重复一下步骤最多三次即可复原顶层。</p><p>1、转动顶层将魔方和某个俯视图朝向保持一致（俯视图的黄条表示侧面的黄色面，黄条也要对应上。）<br>2、转公式5<br>    公式5：R  U  R’  U  R  U2  R’<br>为了方便记忆观察顶面的四个角块，以上情况可总结成三种：<br>A: 有0面黄色面时（十字），把侧面两个黄色面朝向左边。<br>B：有两面黄色面时（坦克、双鱼），把侧面黄色面放在前面左侧。<br>C：有1面黄色面时（小鱼），把鱼头朝向左下。</p><h4 id="⑥对凹字"><a href="#⑥对凹字" class="headerlink" title="⑥对凹字"></a>⑥对凹字</h4><p>一直转动U层知道前面左上和右上角颜色相同，转公式6即可对好凹字。如果找不到相同的，则先直接转一次公式6在观察。</p><p>公式6： R’  U  L’  U2  R  U’  R’  U2  L  R</p><h4 id="⑦复原顶棱"><a href="#⑦复原顶棱" class="headerlink" title="⑦复原顶棱"></a>⑦复原顶棱</h4><p>如果剩下的四个棱块都未归位，则直接转一次公式7即可归位其中的一个，如果剩下三个棱块未复原，则把已复原好的棱块放在背面，转公式7最多两次即可<br>复原魔方。</p><p>公式7：R2  U  R  U  R’  U’  R’  U’  R’  U  R’</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/blogImg/201909152135.jpg&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;一、简介&quot;&gt;&lt;a href=&quot;#一、简介&quot; class=&quot;headerlink&quot; title=&quot;一、简介&quot;&gt;&lt;/a&gt;一、简介&lt;/h2&gt;&lt;p&gt;魔方 ，英文名为Rubik’s Cube，又叫鲁比克方块，台湾地区称之为魔术方块，香港地区称之为扭计骰，最早是由匈牙利布达佩斯建筑学院厄尔诺·鲁比克（又称作厄尔诺·卢比克）教授于1974年发明的。魔方与中国人发明的“华容道”，法国人发明的“独立钻石”一起被称为世界三大智力运动。魔方竞速是一项手部极限运动。&lt;/p&gt;
&lt;p&gt;三阶发明以后，许多其他种类型的魔方纷纷出现靠，如二阶（2&lt;em&gt;2&lt;/em&gt;2）、四阶、五阶、六阶…..至今已达到十三阶。还有许多节点的异形魔方，如五魔方、镜面。金字塔、斜转、SQ1、不等阶、捆绑、连体、空心、齿轮、魔中魔、超级转角、智慧之轮、时间机器等等……&lt;/p&gt;
    
    </summary>
    
      <category term="魔方" scheme="https://blogs.zhaozf.site/categories/%E9%AD%94%E6%96%B9/"/>
    
    
      <category term="三阶魔方" scheme="https://blogs.zhaozf.site/tags/%E4%B8%89%E9%98%B6%E9%AD%94%E6%96%B9/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 面试题收集    --持续更新</title>
    <link href="https://blogs.zhaozf.site/80c1f29a/"/>
    <id>https://blogs.zhaozf.site/80c1f29a/</id>
    <published>2019-08-30T13:52:57.000Z</published>
    <updated>2019-10-25T10:29:41.680Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/blogImg/201908302202.jpg"></p><h2 id="送你-43-道-JavaScript-面试题"><a href="#送你-43-道-JavaScript-面试题" class="headerlink" title="送你 43 道 JavaScript 面试题"></a>送你 43 道 JavaScript 面试题</h2><p>原文链接：<a href="https://juejin.im/post/5d0644976fb9a07ed064b0ca">https://juejin.im/post/5d0644976fb9a07ed064b0ca</a></p><ol><li>下面代码的输出是什么？</li></ol><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(name);</span><br><span class="line">  <span class="built_in">console</span>.log(age);</span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">&quot;Lydia&quot;</span>;</span><br><span class="line">  <span class="keyword">let</span> age = <span class="number">21</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sayHi();</span><br></pre></td></tr></table></figure><p>A: Lydia 和 undefined<br>B: Lydia 和 ReferenceError<br>C: ReferenceError 和 21<br>D: undefined 和 ReferenceError</p><p>答案: D</p><a id="more"></a><p>在函数中，我们首先使用var关键字声明了name变量。 这意味着变量在创建阶段会被提升（JavaScript会在创建变量创建阶段为其分配内存空间），默认值为undefined，直到我们实际执行到使用该变量的行。 我们还没有为name变量赋值，所以它仍然保持undefined的值。<br>使用let关键字（和const）声明的变量也会存在变量提升，但与var不同，初始化没有被提升。 在我们声明（初始化）它们之前，它们是不可访问的。 这被称为“暂时死区”。 当我们在声明变量之前尝试访问变量时，JavaScript会抛出一个ReferenceError。<br>译者注：<br>关于let的是否存在变量提升，我们何以用下面的例子来验证：</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span><span class="built_in"> name</span> = <span class="string">&#x27;ConardLi&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  console.log<span class="built_in">(name</span>) // Uncaught ReferenceError:<span class="built_in"> name</span> <span class="literal">is</span><span class="built_in"> not</span> defined</span><br><span class="line">  <span class="keyword">let</span><span class="built_in"> name</span> = <span class="string">&#x27;code秘密花园&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>let变量如果不存在变量提升，console.log(name)就会输出ConardLi，结果却抛出了ReferenceError，那么这很好的说明了，let也存在变量提升，但是它存在一个“暂时死区”，在变量未初始化或赋值前不允许访问。<br>变量的赋值可以分为三个阶段：</p><p>创建变量，在内存中开辟空间<br>初始化变量，将变量初始化为undefined<br>真正赋值</p><p>关于let、var和function：</p><ul><li>let 的「创建」过程被提升了，但是初始化没有提升。</li><li>var 的「创建」和「初始化」都被提升了。</li><li>function 的「创建」「初始化」和「赋值」都被提升了。</li></ul><hr><ol start="2"><li>下面代码的输出是什么?</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(i), <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(i), <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>A: 0 1 2 and 0 1 2<br>B: 0 1 2 and 3 3 3<br>C: 3 3 3 and 0 1 2</p><p>答案: C<br>由于JavaScript中的事件执行机制，setTimeout函数真正被执行时，循环已经走完。 由于第一个循环中的变量i是使用var关键字声明的，因此该值是全局的。 在循环期间，我们每次使用一元运算符++都会将i的值增加1。 因此在第一个例子中，当调用setTimeout函数时，i已经被赋值为3。<br>在第二个循环中，使用let关键字声明变量i：使用let（和const）关键字声明的变量是具有块作用域的（块是{}之间的任何东西）。 在每次迭代期间，i将被创建为一个新值，并且每个值都会存在于循环内的块级作用域。</p><hr><ol start="3"><li>下面代码的输出是什么?</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> shape = &#123;</span><br><span class="line">  radius: <span class="number">10</span>,</span><br><span class="line">  <span class="function"><span class="title">diameter</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.radius * <span class="number">2</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  perimeter: <span class="function">() =&gt;</span> <span class="number">2</span> * <span class="built_in">Math</span>.PI * <span class="built_in">this</span>.radius</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">shape.diameter();</span><br><span class="line">shape.perimeter();</span><br></pre></td></tr></table></figure><p>A: 20 and 62.83185307179586<br>B: 20 and NaN<br>C: 20 and 63<br>D: NaN and 63</p><p>答案: B<br>请注意，diameter是普通函数，而perimeter是箭头函数。<br>对于箭头函数，this关键字指向是它所在上下文（定义时的位置）的环境，与普通函数不同！ 这意味着当我们调用perimeter时，它不是指向shape对象，而是指其定义时的环境（window）。没有值radius属性，返回undefined。</p><hr><h2 id="28-道-JavaScript-面试题，看看能错几道？"><a href="#28-道-JavaScript-面试题，看看能错几道？" class="headerlink" title="28 道 JavaScript 面试题，看看能错几道？"></a>28 道 JavaScript 面试题，看看能错几道？</h2><p>原文链接：<a href="https://mp.weixin.qq.com/s/o260IGR5FxvN-P8Kgtz1uA">https://mp.weixin.qq.com/s/o260IGR5FxvN-P8Kgtz1uA</a></p><ol><li> 下面代码输出什么?</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/blogImg/201908302202.jpg&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;送你-43-道-JavaScript-面试题&quot;&gt;&lt;a href=&quot;#送你-43-道-JavaScript-面试题&quot; class=&quot;headerlink&quot; title=&quot;送你 43 道 JavaScript 面试题&quot;&gt;&lt;/a&gt;送你 43 道 JavaScript 面试题&lt;/h2&gt;&lt;p&gt;原文链接：&lt;a href=&quot;https://juejin.im/post/5d0644976fb9a07ed064b0ca&quot;&gt;https://juejin.im/post/5d0644976fb9a07ed064b0ca&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;下面代码的输出是什么？&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight qml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sayHi&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(age);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; name = &lt;span class=&quot;string&quot;&gt;&amp;quot;Lydia&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; age = &lt;span class=&quot;number&quot;&gt;21&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sayHi();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;A: Lydia 和 undefined&lt;br&gt;B: Lydia 和 ReferenceError&lt;br&gt;C: ReferenceError 和 21&lt;br&gt;D: undefined 和 ReferenceError&lt;/p&gt;
&lt;p&gt;答案: D&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>【翻译】(第四篇)18 designers predict UI/UX trends for 2018</title>
    <link href="https://blogs.zhaozf.site/ac8354aa/"/>
    <id>https://blogs.zhaozf.site/ac8354aa/</id>
    <published>2019-08-10T07:25:22.000Z</published>
    <updated>2019-10-25T10:29:41.693Z</updated>
    
    <content type="html"><![CDATA[<center><h1> 18位设计师预测2018年用户界面/用户体验趋势</h1></center><blockquote><p>本文来自阅读极客时间专栏《左耳听风》89 | 程序员练级攻略：UI/UX设计 文章中的推荐阅读</p></blockquote><p>** 原文链接：<a href="https://www.figma.com/blog/eighteen-designers-predict-ui-ux-trends-for-2018/">https://www.figma.com/blog/eighteen-designers-predict-ui-ux-trends-for-2018/</a> **</p><ul><li>作者：Valerie Veteto</li><li>2017年12月15日</li></ul><p><img src="/assets/translate/UX_Design_Trends_Cover.jfif"></p><p>Designers are always looking toward the future — in our “build and ship it now” industry we’re programmed to iterate ad finitum. In the end, a designer’s obsession always circles back to one simple question: How can we improve the user’s experience?</p><a id="more"></a><p>设计师总是在展望未来-在我们的“现在制造和推广”行业中，我们被编程为迭代定义。最后，设计师的痴迷总是绕回到一个简单的问题上：我们如何才能改善用户体验？</p><p>With that in mind, Figma asked 18 designers what UI/UX trends they predict for 2018. December, with its flurry of holiday parties, cheery OOO auto-replies and introspective weather patterns, provided the perfect opportunity to pause and survey the landscape.<br>考虑到这一点，Figma询问了18位设计师，他们预测2018年的用户界面/用户体验趋势。12月，伴随着节日派对的风潮，欢快的OOO自动回复和反省的天气模式，提供了一个完美的机会来暂停和调查景观。</p><p>Designers were culled from a few different sources: those who attended last month’s Figma sponsored design systems dinner, speakers at this year’s Clarity Conference and friends of the Figma family. You’ll read through opinions from designers who work anywhere from Facebook to Google to Airbnb. We even crowdsourced Twitter, receiving 61 thoughtful responses that were much appreciated.<br>设计师们被从几个不同的来源中挑选出来: 那些参加了上个月 Figma 赞助的设计系统晚宴的人，今年 Clarity 大会的演讲者，以及 Figma 家族的朋友。 你可以阅读从 Facebook 到 Google 再到 Airbnb 的设计师们的意见。 我们甚至把 Twitter 众包出去，收到了61条深思熟虑的回复，这些回复都非常令人感激。</p><p>Like a collective hive brain, many designers touched on similar topics, from accessibility and ethical accountability, to collaborative design.<br>像一个集体蜂巢大脑一样，许多设计师也谈到了类似的话题，从可及性和道德责任，到协同设计。</p><p><img src="/assets/translate/blue_guy.png"></p><h1 id="1-Accessibility-will-be-first-ego-second"><a href="#1-Accessibility-will-be-first-ego-second" class="headerlink" title="1. Accessibility will be first, ego second"></a>1. Accessibility will be first, ego second</h1><h1 id="1-可达性第一，自我第二"><a href="#1-可达性第一，自我第二" class="headerlink" title="1. 可达性第一，自我第二"></a>1. 可达性第一，自我第二</h1><p>“I really hope 2018 is the year designers commit to designing with accessibility in mind. We need to stop using ultra light grays for essential elements, we need to stop animating every single pixel just because it looks nice, and we need to stop making it harder on people to understand the content of a page only because we want to prove ourselves as designers.”<br>“我真的希望2018年是设计师们致力于设计时考虑到无障碍性的一年。 我们需要停止使用超轻灰色作为基本元素，我们需要停止仅仅因为每个像素看起来漂亮就对其进行动画处理，我们需要停止仅仅因为我们想证明自己是设计师就让人们更难理解页面的内容。”</p><p>Hubert Florin, Product Designer at Slack<br>休伯特 · 弗洛林，Slack 的产品设计师</p><p><img src="/assets/translate/red_woman.png"></p><h1 id="2-Collaboration-in-design-will-echo-engineering"><a href="#2-Collaboration-in-design-will-echo-engineering" class="headerlink" title="2. Collaboration in design will echo engineering"></a>2. Collaboration in design will echo engineering</h1><h1 id="2-设计方面的合作将与工程学相呼应"><a href="#2-设计方面的合作将与工程学相呼应" class="headerlink" title="2. 设计方面的合作将与工程学相呼应"></a>2. 设计方面的合作将与工程学相呼应</h1><p>“Whether or not designers code, I think that design teams will start to collaborate a lot more like engineering teams. That might include design reviews akin to code reviews, design tools that function like code linters, or an uptick in open source design patterns. What would software be like if all open source engineering projects had design equivalents driving industry standards in user experience or information design?”<br>“无论设计师是否编写代码，我认为设计团队将开始更像工程团队一样合作。 这可能包括类似于代码审查的设计审查，功能类似于代码短片的设计工具，或者开源设计模式的提升。 如果所有的开源工程项目在用户体验或信息设计方面都有驱动行业标准的设计等价物，那么软件会是什么样子呢？”</p><p>Jules Forrest, Senior Product Designer at Credit Karma<br>朱尔斯 · 福里斯特，Credit Karma 高级产品设计师</p><p><img src="/assets/translate/tim_belonax.png"></p><h1 id="3-Designers-will-focus-on-ethics"><a href="#3-Designers-will-focus-on-ethics" class="headerlink" title="3. Designers will focus on ethics"></a>3. Designers will focus on ethics</h1><h1 id="3-设计师会关注道德"><a href="#3-设计师会关注道德" class="headerlink" title="3. 设计师会关注道德"></a>3. 设计师会关注道德</h1><p>“My hope is UX/UI designers become more aware of their influence in 2018 and take into greater account the ethical ramifications of their design choices for the people that use their products.”<br>“我希望用户体验 / 用户界面设计师在2018年能够更多地意识到他们的影响力，更多地考虑他们的设计选择对使用他们产品的人的道德影响。”</p><p>Tim Belonax, Lead Designer at Pinterest.<br>Pinterest的首席设计师 Tim Belonax</p><p><img src="/assets/translate/johan_ronsse.png"></p><h1 id="4-Designers-will-lean-too-heavily-on-the-industry-standard"><a href="#4-Designers-will-lean-too-heavily-on-the-industry-standard" class="headerlink" title="4. Designers will lean too heavily on the industry standard"></a>4. Designers will lean too heavily on the industry standard</h1><h1 id="4-设计师过于依赖行业标准"><a href="#4-设计师过于依赖行业标准" class="headerlink" title="4. 设计师过于依赖行业标准"></a>4. 设计师过于依赖行业标准</h1><p>“Unfortunately I predict increased reliance on prescribed design systems (I.e. Material, Fluent) without questioning them.”<br>“不幸的是，我预测会越来越依赖规定的设计系统(即 Material，Fluent) ，而不去质疑它们。”</p><p>Johan Ronsse, UI/UX Designer and Partner at Mono Design<br>Johan Ronsse，ui / ux 设计师，Mono Design 合伙人</p><p><img src="/assets/translate/diana_mounter.png"></p><h1 id="5-With-great-efficiency-comes-great-responsibility"><a href="#5-With-great-efficiency-comes-great-responsibility" class="headerlink" title="5. With great efficiency comes great responsibility"></a>5. With great efficiency comes great responsibility</h1><h1 id="5-效率越高，责任越大"><a href="#5-效率越高，责任越大" class="headerlink" title="5. 效率越高，责任越大"></a>5. 效率越高，责任越大</h1><p>“In 2018, I think we’ll see design and development tools continue to converge, with more centralized tools helping to design and build systems to work with whatever technology or platform you need. We’ll see CSS grid, custom variables, and frameworks like Vue and React bring new possibilities and greater efficiencies to design implementation — I hope this creates the space to spend more time designing responsibly, and building more inclusive experiences.”<br>“在2018年，我认为我们将看到设计和开发工具继续融合，更多的集中化工具帮助设计和构建系统，以满足您所需的任何技术或平台。 我们将看到 CSS 网格、自定义变量，以及 Vue 和 React 等框架为设计实现带来了新的可能性和更高的效率ーー我希望这能创造空间，让我们花更多时间进行负责任的设计，构建更具包容性的体验。”</p><p>Diana Mounter, Design Systems Manager at GitHub<br>戴安娜 · 蒙特，GitHub 设计系统经理</p><p><img src="/assets/translate/matthew_morek.png"></p><h1 id="6-We’re-going-to-ignore-the-one-trend-we-all-need"><a href="#6-We’re-going-to-ignore-the-one-trend-we-all-need" class="headerlink" title="6. We’re going to ignore the one trend we all need"></a>6. We’re going to ignore the one trend we all need</h1><h1 id="6-我们将忽略我们都需要的一个趋势"><a href="#6-我们将忽略我们都需要的一个趋势" class="headerlink" title="6. 我们将忽略我们都需要的一个趋势"></a>6. 我们将忽略我们都需要的一个趋势</h1><p>“The one trend we all need, but is not likely to take the industry by storm or even make headlines, is design for accessibility and inclusive design. There’s a lot of work in that area and barely anyone wants to touch it. #accessibility”<br>“我们都需要的一个趋势是无障碍设计和包容性设计，但这个趋势不太可能席卷整个行业，甚至不会成为头条新闻。 那个领域有很多工作，几乎没有人愿意去碰它。 # 无障碍”</p><p>Matthew Morek, UI/UX Design Consultant<br>Matthew Morek，ui / ux 设计顾问</p><p><img src="/assets/translate/michelle_morrison.png"></p><h1 id="7-Design-will-be-a-major-player-in-social-change"><a href="#7-Design-will-be-a-major-player-in-social-change" class="headerlink" title="7. Design will be a major player in social change"></a>7. Design will be a major player in social change</h1><h1 id="7-设计将在社会变革中扮演重要角色"><a href="#7-设计将在社会变革中扮演重要角色" class="headerlink" title="7. 设计将在社会变革中扮演重要角色"></a>7. 设计将在社会变革中扮演重要角色</h1><p>“Design that matters most is design that solves real human problems. Forward looking, I see design playing a major role in how we tackle the big, nasty issues in society. Design will become more political, more accessible, and a toolset that affects real change.”<br>“最重要的设计是解决真正的人类问题的设计。 展望未来，我认为设计在我们如何处理社会中的重大问题上扮演着重要的角色。 设计将变得更加政治化，更加易于理解，并成为影响真正变化的工具集。”</p><p>Michelle Morrison, Design Program Manager at Facebook<br>米歇尔 · 莫里森，Facebook 设计项目经理</p><p><img src="/assets/translate/noah_levin.png"></p><h1 id="8-Design-tools-will-make-a-designer-out-of-everyone"><a href="#8-Design-tools-will-make-a-designer-out-of-everyone" class="headerlink" title="8. Design tools will make a designer out of everyone"></a>8. Design tools will make a designer out of everyone</h1><h1 id="8-设计工具能让每个人都成为设计师"><a href="#8-设计工具能让每个人都成为设计师" class="headerlink" title="8. 设计工具能让每个人都成为设计师"></a>8. 设计工具能让每个人都成为设计师</h1><p>“Modern design tools will become approachable enough that more people will be able to contribute to the design process on a level-playing field. We’ll think of “designers” less as an isolated role, but as a thing many people contribute to.”<br>“现代设计工具将变得足够容易接近，更多的人将能够在公平竞争的环境中为设计过程做出贡献。 我们不会把“设计师”看作是一个孤立的角色，而是许多人为之贡献的东西。”</p><p>Noah Levin, Design Manager at Figma<br>诺亚 · 莱文，Figma 设计经理</p><p><img src="/assets/translate/zachary_gibson.png"></p><h1 id="9-Jason-Schwartzman-said-it-best"><a href="#9-Jason-Schwartzman-said-it-best" class="headerlink" title="9. Jason Schwartzman said it best"></a>9. Jason Schwartzman said it best</h1><h1 id="9-詹森·舒瓦兹曼说的最好"><a href="#9-詹森·舒瓦兹曼说的最好" class="headerlink" title="9. 詹森·舒瓦兹曼说的最好"></a>9. 詹森·舒瓦兹曼说的最好</h1><p>“Can I quote I Heart Huckabees? The interconnection thing is definitely for real.”<br>“我可以引用笑看人心的话吗? 互连这件事绝对是真的。”</p><p>Zachary Gibson, Material Design Creative Lead at Google<br>扎卡里 · 吉布森，谷歌材料设计创意主管</p><p><img src="/assets/translate/nicole_tollefson.png"></p><h1 id="10-Time-to-check-your-ego-at-the-door"><a href="#10-Time-to-check-your-ego-at-the-door" class="headerlink" title="10. Time to check your ego at the door"></a>10. Time to check your ego at the door</h1><h1 id="10-是时候在门口检查一下你的自负了"><a href="#10-是时候在门口检查一下你的自负了" class="headerlink" title="10. 是时候在门口检查一下你的自负了"></a>10. 是时候在门口检查一下你的自负了</h1><p>“We’ve given the word “empathy” a lot of deserving fanfare in the last few years, and next we’ll need to add to that rally-cry with ‘ego-less.’ Many still find it uncomfortable to invite “non-designers” into their headspace and discover that their best design is ultimately 90% (or more) other peoples’ input and 10% (or less) their own ideas, but the most successful teams and companies have known this about design for a long time.”<br>“在过去的几年里，我们已经为“同理心”这个词大张旗鼓地宣传了很多次，接下来，我们需要用“没有自我”来加强这种集会式的呐喊 许多人仍然觉得邀请“非设计师”进入他们的思维空间并发现他们最好的设计最终是90% (或更多)其他人的投入和10% (或更少)他们自己的想法是不舒服的，但是最成功的团队和公司早就知道这一点。”</p><p>Nicole Tollefson, Lead Designer at Atlassian Buyer Experience<br>Nicole Tollefson，Atlassian 采购经验的首席设计师</p><p><img src="/assets/translate/josh_silverman.png"></p><h1 id="11-People-skills-will-matter-more-than-ever"><a href="#11-People-skills-will-matter-more-than-ever" class="headerlink" title="11. People skills will matter more than ever"></a>11. People skills will matter more than ever</h1><h1 id="11-人际交往技巧将比以往任何时候都重要"><a href="#11-人际交往技巧将比以往任何时候都重要" class="headerlink" title="11. 人际交往技巧将比以往任何时候都重要"></a>11. 人际交往技巧将比以往任何时候都重要</h1><p>“It’s becoming increasingly critical to hone our people skills — the stuff that persists amidst so much change. This means we’ll listen and collaborate more with each other; ensure diverse, cross-team voices are present and heard throughout our work; and cultivate optimal environments for optimal performance. Underneath every tech problem is a people problem.”<br>“磨练我们的人际交往技能变得越来越重要——这些技能在如此多的变化中依然存在。 这意味着我们将更多地相互倾听和协作; 确保不同的、跨团队的声音在整个工作过程中都能被听到; 培养最佳的工作环境。 每个技术问题的背后都有一个人的问题。”</p><p>Josh Silverman, Design Producer at Twitter<br>乔什 · 西尔弗曼，Twitter 设计制作人</p><p><img src="/assets/translate/linda_dong.png"></p><h1 id="12-It’s-time-to-dynamically-react-to-the-environment"><a href="#12-It’s-time-to-dynamically-react-to-the-environment" class="headerlink" title="12. It’s time to dynamically react to the environment"></a>12. It’s time to dynamically react to the environment</h1><h1 id="12-是时候对环境做出动态反应了"><a href="#12-是时候对环境做出动态反应了" class="headerlink" title="12. 是时候对环境做出动态反应了"></a>12. 是时候对环境做出动态反应了</h1><p>“I see future designs integrating the real world in a big way. Whether that’s through hardware sensors, alternate reality, or context-driven UI — designers will understand design lives outside of a screen. Designs will dynamically react to the environment around them and will take full advantage of hardware capabilities.”<br>“我预见未来的设计将以一种很大的方式整合现实世界。 无论是通过硬件传感器、虚拟现实还是上下文驱动的用户界面ーー设计师都将理解屏幕之外的设计世界。 设计将根据周围的环境动态地做出反应，并充分利用硬件功能。”</p><p>Linda Dong, Design Manager at Lyft<br>设计经理 Linda Dong</p><p><img src="/assets/translate/lucas_smith.png"></p><h1 id="13-Better-design-tools-will-lead-to-better-branding-through-design-systems"><a href="#13-Better-design-tools-will-lead-to-better-branding-through-design-systems" class="headerlink" title="13. Better design tools will lead to better branding through design systems"></a>13. Better design tools will lead to better branding through design systems</h1><h1 id="13-更好的设计工具将通过设计系统带来更好的品牌"><a href="#13-更好的设计工具将通过设计系统带来更好的品牌" class="headerlink" title="13. 更好的设计工具将通过设计系统带来更好的品牌"></a>13. 更好的设计工具将通过设计系统带来更好的品牌</h1><p>“As tooling catches up to the prevailing winds of design systems, it will be easier to collaborate and evolve the expression of a brand through a design system. This will allow designers to work at a higher fidelity earlier in the product process — improving decision making and lowering the cost to produce great digital work.”</p><p>Lucas Smith, Design Technologist at Airbnb<br>卢卡斯 · 史密斯，Airbnb 设计技术专家</p><p><img src="/assets/translate/daniel_eden.png"></p><h1 id="14-Design-systems-will-serve-people-not-products"><a href="#14-Design-systems-will-serve-people-not-products" class="headerlink" title="14. Design systems will serve people, not products"></a>14. Design systems will serve people, not products</h1><h1 id="14-设计系统将服务于人，而不是产品"><a href="#14-设计系统将服务于人，而不是产品" class="headerlink" title="14. 设计系统将服务于人，而不是产品"></a>14. 设计系统将服务于人，而不是产品</h1><p>“The next monumental shift in design requires us to think of design systems as a service and not a product. We tend to think of a design system as a “product serving products,” but I think that does a disservice to the relationships, negotiation, compromise, and human interaction that makes working on systems so challenging and rewarding.”<br>“设计的下一个重大转变要求我们把设计系统看作是一种服务，而不是一种产品。 我们倾向于认为设计系统是一个“为产品服务的产品” ，但是我认为这对人际关系、谈判、妥协和人际交往是有害的，而这些使得系统的工作变得如此具有挑战性和回报性。”</p><p>Daniel Eden, Product Designer at Facebook<br>丹尼尔 · 伊登，Facebook 产品设计师</p><p><img src="/assets/translate/jerel_johnson.png"></p><h1 id="15-Design-systems-will-only-grow-in-importance"><a href="#15-Design-systems-will-only-grow-in-importance" class="headerlink" title="15. Design systems will only grow in importance"></a>15. Design systems will only grow in importance</h1><h1 id="15-设计系统只会变得越来越重要"><a href="#15-设计系统只会变得越来越重要" class="headerlink" title="15. 设计系统只会变得越来越重要"></a>15. 设计系统只会变得越来越重要</h1><p>“We will continue to see the rise of design systems in response to scaling design teams, templatization, and increased reliance on machine learning and AI-based content. Designers will add procedural literacy and algorithmic thinking to their skillsets to meet the needs and manifest the desires of people.”<br>“我们将继续看到设计系统的崛起，以应对缩放设计团队、模板化、以及对机器学习和基于 ai 的内容的更多依赖。 设计师将在他们的技能中加入程序素养和算法思维，以满足人们的需求和实现人们的愿望。”</p><p>Jerel Johnson, Sr. Product Designer at Backpack Health<br>背包健康公司高级产品设计师杰瑞尔 · 约翰逊</p><p><img src="/assets/translate/una_kravets.png"></p><h1 id="16-Flat-design-will-no-longer-be-a-focus"><a href="#16-Flat-design-will-no-longer-be-a-focus" class="headerlink" title="16. Flat design will no longer be a focus"></a>16. Flat design will no longer be a focus</h1><h1 id="16-扁平化设计将不再是焦点"><a href="#16-扁平化设计将不再是焦点" class="headerlink" title="16. 扁平化设计将不再是焦点"></a>16. 扁平化设计将不再是焦点</h1><p>“I think we’ll see a lot more creativity in interfaces in the coming year as we move away from flat design, with interaction and accessibility in mind.”<br>“我认为，随着我们逐渐远离扁平化设计，将交互性和可访问性考虑在内，未来一年我们将在界面上看到更多的创造力。”</p><p>Una Kravets, Sr. UI Engineer at DigitalOcean<br>Una Kravets DigitalOcean 的高级 UI 工程师</p><p><img src="/assets/translate/isha_kasliwal.png"></p><h1 id="17-Design-systems-will-bridge-the-gap-across-departments"><a href="#17-Design-systems-will-bridge-the-gap-across-departments" class="headerlink" title="17. Design systems will bridge the gap across departments"></a>17. Design systems will bridge the gap across departments</h1><h1 id="17-设计系统将弥合各部门之间的差距"><a href="#17-设计系统将弥合各部门之间的差距" class="headerlink" title="17. 设计系统将弥合各部门之间的差距"></a>17. 设计系统将弥合各部门之间的差距</h1><p>“Design trends for the next year will definitely include, just like this year, an uptick in design systems. More and more companies are learning the benefits of systemizing design, especially how it bridges the gaps between product, design, and engineering. Also, I feel like 3D modeling and 3D visualizations are continuing to grow in popularity. I can imagine showing depth in UI will be trendy as a result of that.”<br>“明年的设计趋势肯定会包括，就像今年一样，设计系统的上升。 越来越多的公司正在学习系统化设计的好处，尤其是它如何在产品、设计和工程之间搭建桥梁。 此外，我觉得3 d 建模和3 d 可视化正在持续增长的普及。 我可以想象在 UI 中显示深度将会成为时尚的结果。”</p><p>Isha Kasliwal, Senior UI/UX Designer/Developer at Twitch<br>Isha Kasliwal，Twitch 高级 ui / ux 设计师 / 开发人员</p><p><img src="/assets/translate/miriam_suzanne.png"></p><h1 id="18-Improvements-in-CSS-will-affect-web-design-in-surprising-ways"><a href="#18-Improvements-in-CSS-will-affect-web-design-in-surprising-ways" class="headerlink" title="18. Improvements in CSS will affect web design in surprising ways"></a>18. Improvements in CSS will affect web design in surprising ways</h1><h1 id="18-CSS-的改进会以令人惊讶的方式影响网页设计"><a href="#18-CSS-的改进会以令人惊讶的方式影响网页设计" class="headerlink" title="18. CSS 的改进会以令人惊讶的方式影响网页设计"></a>18. CSS 的改进会以令人惊讶的方式影响网页设计</h1><p>“There’s a lot to be excited about in CSS — integrating new tools, like Grid and Custom Properties, with existing features like Calc and Viewport Units. Modern CSS allow a new level of interaction, responsiveness, and data-visualization that previously required extensive Javascript involvement. I’m excited to see what new trends grow out of that technology.”<br>“在 CSS 中有很多令人兴奋的东西ーー集成新的工具，如 Grid 和 Custom Properties，以及现有的特性，如 Calc 和 Viewport Units。 现代 CSS 允许一个新的层次的交互、响应和数据可视化，以前需要大量的 Javascript 参与。 我很高兴看到这项技术带来了什么新的趋势。”</p><p>Miriam Suzanne, Designer and Developer at OddBird<br>米里亚姆苏珊娜，OddBird 的设计师和开发人员</p><p>An honorary mention goes to…<br>获得荣誉提名的是..</p>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;&lt;h1&gt; 18位设计师预测2018年用户界面/用户体验趋势&lt;/h1&gt;&lt;/center&gt;

&lt;blockquote&gt;
&lt;p&gt;本文来自阅读极客时间专栏《左耳听风》89 | 程序员练级攻略：UI/UX设计 文章中的推荐阅读&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;** 原文链接：&lt;a href=&quot;https://www.figma.com/blog/eighteen-designers-predict-ui-ux-trends-for-2018/&quot;&gt;https://www.figma.com/blog/eighteen-designers-predict-ui-ux-trends-for-2018/&lt;/a&gt; **&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;作者：Valerie Veteto&lt;/li&gt;
&lt;li&gt;2017年12月15日&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/assets/translate/UX_Design_Trends_Cover.jfif&quot;&gt;&lt;/p&gt;
&lt;p&gt;Designers are always looking toward the future — in our “build and ship it now” industry we’re programmed to iterate ad finitum. In the end, a designer’s obsession always circles back to one simple question: How can we improve the user’s experience?&lt;/p&gt;
    
    </summary>
    
      <category term="翻译" scheme="https://blogs.zhaozf.site/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
      <category term="UI/UX" scheme="https://blogs.zhaozf.site/tags/UI-UX/"/>
    
      <category term="designers" scheme="https://blogs.zhaozf.site/tags/designers/"/>
    
  </entry>
  
  <entry>
    <title>MATLAB学习笔记</title>
    <link href="https://blogs.zhaozf.site/112d01e5/"/>
    <id>https://blogs.zhaozf.site/112d01e5/</id>
    <published>2019-08-05T10:24:44.000Z</published>
    <updated>2019-10-25T10:29:41.681Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/blogImg/201908051827.png"></p><h2 id="本文是MATLAB官网教程的学习记录笔记"><a href="#本文是MATLAB官网教程的学习记录笔记" class="headerlink" title="本文是MATLAB官网教程的学习记录笔记"></a>本文是MATLAB官网教程的学习记录笔记</h2><h4 id="1-1命令"><a href="#1-1命令" class="headerlink" title="1.1命令"></a>1.1命令</h4><pre><code>clear 用于删除工作区变量，clc 用于清除命令行窗口。MATLAB 包含内置的常量，例如 pi 表示 πMATLAB 包含许多内置的函数，例如 abs（计算绝对值）和 eig（计算特征值）sqrt（计算平方根）。</code></pre><a id="more"></a><pre><code>MATLAB 变量命名为符合以下规则的任何名称：以字母开头，并且仅包含字母、数字和下划线 (_)。您可以使用方括号创建包含多个元素的数组。&gt;&gt; x = [3 5]x =     3    5当您用空格（或逗号）分隔数值时，MATLAB 会将这些数值组合为一个行向量，行向量是一个包含一行多列的数组 (1×n)。当您用分号分隔数值时，MATLAB 会创建一个列向量 (n×1)&gt;&gt; x = [1;3]。您可以组合使用空格和分号来创建矩阵，即包含多行多列的数组。输入矩阵时，您必须逐行输入它们。&gt;&gt; x = [3 4 5;6 7 8]x =     3    4    5    6    7    8在 MATLAB 中，您可以在方括号内执行计算。&gt;&gt; x = [abs(-4) 4^2]x =      4    16对于长向量，输入单个数值是不实际的。可用来创建等间距向量的替代便捷方法是使用 : 运算符并仅指定起始值和最终值：    first:last。&gt;&gt; y = 5:8y =     5    6    7    8: 运算符使用默认的间距 1，但是您可以指定您自己的间距，如下所示。&gt;&gt; x = 20:2:26x =     20    22    24    26如果您知道向量中所需的元素数目（而不是每个元素之间的间距），则可以改用 linspace 函数：linspace    (first,last,number_of_elements)。注意，请使用逗号 (,) 分隔 linspace 函数的输入。&gt;&gt; x = linspace(0,1,5)x =     0    0.250    0.500    0.750    1.000linspace 和 : 运算符都可创建行向量。但是，您可以使用转置运算符 (&#39;) 将行向量转换为列向量。&gt;&gt; x = 1:3;&gt;&gt; x = x&#39;x =     1    2    3您可以通过在一条命令中创建行向量并将其全部转置来创建列向量。注意此处使用圆括号来指定运算的顺序。&gt;&gt; x = (1:2:5)&#39;x =     1    3    5</code></pre><p>linspace<br><a href="https://www.mathworks.cn/help/matlab/ref/linspace.html">https://www.mathworks.cn/help/matlab/ref/linspace.html</a></p><p>3.3 数组创建函数</p><pre><code>许多矩阵创建函数允许您输入一个数值来创建方阵 (n×n)，或者输入两个数值来创建非方阵。&gt;&gt; x = rand(2)x =     0.8147    0.1270    0.9058    0.9134    &gt;&gt; x = rand(2,3)x =     0.6324    0.2785    0.9575    0.0975    0.5469    0.9649</code></pre><p>4.1 保存和加载变量</p><pre><code>您可以使用 save 命令将工作区中的变量保存到称为 MAT 文件的 MATLAB 特定格式文件中。  &gt;&gt; save foo x以上命令将名为 x 的变量保存到名为 foo.mat 的 MAT 文件中。您可以使用 load 命令从 MAT 文件加载变量。&gt;&gt; load foo</code></pre><p>附加资源：保存、加载和删除工作区变量<br><a href="https://www.mathworks.cn/help/matlab/matlab_env/save-load-and-delete-workspace-variables.html">https://www.mathworks.cn/help/matlab/matlab_env/save-load-and-delete-workspace-variables.html</a></p><p>5.1 对数组进行索引</p><pre><code>您可以使用行、列索引从数组中提取值。&gt;&gt; x = A(5,7);此语法将会提取 A 的第 5 行第 7 列的值，然后将结果赋给变量 x。    您可以使用 MATLAB 关键字 end，作为行或列索引来引用最后一个元素。&gt;&gt; x = A(end,2);请注意，您可以将算术运算与关键字 end 结合使用。例如：&gt;&gt; x = A(end-1,end-2)</code></pre><p>5.2 提取多个元素</p><pre><code>用作索引时，冒号运算符 (:) 可指代该维度中的所有元素。以下语法&gt;&gt; x = A(2,:)会创建一个包含 A 中第 2 行上所有元素的行向量。冒号运算符可以引用某个值范围。以下语法会创建一个包含矩阵 A 的第 1 行、第 2 行和第 3 行所有元素的矩阵。&gt;&gt; x = A(1:3,:)单个索引值可用于引用向量元素。例如，以下语句&gt;&gt; x = v(3)会返回向量 v 的第 3 个元素（当 v 为行向量或列向量时）。单个索引值范围可用于引用向量元素的子集。例如 &gt;&gt; x = v(3:end)返回向量 v 的一个子集，其中包含从第三个到最后一个元素范围内的所有元素</code></pre><p>附加资源：矩阵索引 | 数组索引<br><a href="https://www.mathworks.cn/help/matlab/math/array-indexing.html">https://www.mathworks.cn/help/matlab/math/array-indexing.html</a><br><a href="https://www.mathworks.com/help/matlab/learn_matlab/array-indexing.html">https://www.mathworks.com/help/matlab/learn_matlab/array-indexing.html</a></p><p>5.3 更改数组中的值</p><pre><code>记住您可以使用 : 字符来提取整列数据。可以通过组合使用索引与赋值来修改变量的元素。A(2,5) = 11将 data 的第一行最后一列的值更改为 0.5。&gt;&gt;data(1,end)=0.5</code></pre><p>6.1 执行数组运算</p><pre><code>MATLAB 的设计让您能够自然地处理数组。例如，您可以将一个标量值与数组中的所有元素相加。&gt;&gt; y = x + 2您可以将任意两个大小相同的数组相加。&gt;&gt; z = x + y您可以将数组中的所有元素与某个标量相乘或相除。&gt;&gt; z = 2*x&gt;&gt; y = x/3MATLAB 中的基本统计函数可应用于某个向量以生成单个输出。可以使用 max 函数来确定向量的最大值。&gt;&gt; xMax = max(x)MATLAB 的函数可在单个命令中对整个向量或值数组执行数学运算。&gt;&gt; xSqrt = sqrt(x)使用 round 函数创建一个名为 vr 的变量，其中包含四舍五入为整数的平均体积 vavr=round(va)* 运算符执行矩阵乘法。因此，如果您使用 * 将两个大小相同的向量相乘，则由于内部维度不一致，您将会收到一条错误消息。&gt;&gt; z = [3 4] * [10 20]用于矩阵乘法的维度不正确。请检查并确保第一个矩阵中的列数与第二个矩阵中的行数匹配。要执行按元素相乘，请使用 &#39;.*&#39;。而 .* 运算符执行按元素乘法，允许您将两个大小相同的数组的对应元素相乘。&gt;&gt; z = [3 4] .* [10 20]z =     30    80</code></pre><p>附加资源：数组与矩阵运算<br><a href="https://ww2.mathworks.cn/help/matlab/matlab_prog/array-vs-matrix-operations.html">https://ww2.mathworks.cn/help/matlab/matlab_prog/array-vs-matrix-operations.html</a></p><p>7.1 从函数调用获取多个输出</p><pre><code>size 函数可以应用于数组，以生成包含数组大小的单个输出变量。&gt;&gt; s = size(x)size 函数可以应用于矩阵，以生成单个输出变量或两个输出变量。使用方括号 ([ ]) 获取多个输出。&gt;&gt; [xrow,xcol] = size(x)可以使用 max 函数确定向量的最大值及其对应的索引值。max 函数的第一个输出为输入向量的最大值。执行带两个输出的调用时，第二个输出为索引值。&gt;&gt; [xMax,idx] = max(x)</code></pre><p>9.1 绘制向量图</p><pre><code>可以使用 plot 函数在一张图上绘制两个相同长度的向量。&gt;&gt; plot(x,y)plot 函数接受一个附加参数，该参数让您能够在单引号中使用各种符号来指定颜色、线型和标记样式。&gt;&gt; plot(x,y,&#39;r--o&#39;)以上命令将会绘制一条红色 (r) 虚线 (--)，并使用圆圈 (o) 作为标记。您可以在线条设定的文档中了解有关可用符号的详细信息。https://ww2.mathworks.cn/help/matlab/ref/linespec.html您会注意到，最开始创建的绘图消失了。要在一张图上先后绘制两条线，请使用 hold on 命令保留之前的绘图，然后添加另一条线。您也可以使用 hold off 命令返回到默认行为。close all 命令以关闭所有打开的图窗窗口。当您单独绘制一个向量时，MATLAB 会使用向量值作为 y 轴数据，并将 x 轴数据的范围设置为从 1 到 n（向量中的元素数目）。plot 函数接受可选的附加输入，这些输入由一个属性名称和一个关联的值组成。&gt;&gt; plot(y,&#39;LineWidth&#39;,5)以上命令将绘制一条粗线。您可以在 Line 属性文档中了解更多可用属性的详细信息。</code></pre><p><a href="https://www.mathworks.com/help/matlab/ref/matlab.graphics.chart.primitive.line-properties.html">https://www.mathworks.com/help/matlab/ref/matlab.graphics.chart.primitive.line-properties.html</a></p><p>9.2 编写绘图注释</p><pre><code>可以使用绘图注释函数（例如 title）在绘图中添加标签。这些函数的输入是一个字符串。MATLAB 中的字符串是用单引号 (&#39;) 引起来的。&gt;&gt; title(&#39;Plot Title&#39;)    使用 ylabel 函数添加y轴标签</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/blogImg/201908051827.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;本文是MATLAB官网教程的学习记录笔记&quot;&gt;&lt;a href=&quot;#本文是MATLAB官网教程的学习记录笔记&quot; class=&quot;headerlink&quot; title=&quot;本文是MATLAB官网教程的学习记录笔记&quot;&gt;&lt;/a&gt;本文是MATLAB官网教程的学习记录笔记&lt;/h2&gt;&lt;h4 id=&quot;1-1命令&quot;&gt;&lt;a href=&quot;#1-1命令&quot; class=&quot;headerlink&quot; title=&quot;1.1命令&quot;&gt;&lt;/a&gt;1.1命令&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;clear 用于删除工作区变量，clc 用于清除命令行窗口。

MATLAB 包含内置的常量，例如 pi 表示 π

MATLAB 包含许多内置的函数，例如 abs（计算绝对值）和 eig（计算特征值）sqrt（计算平方根）。&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="https://blogs.zhaozf.site/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="MATLAB" scheme="https://blogs.zhaozf.site/tags/MATLAB/"/>
    
  </entry>
  
  <entry>
    <title>【微信小程序采坑之路】①radio实现接收后台数据并展示</title>
    <link href="https://blogs.zhaozf.site/59d14174/"/>
    <id>https://blogs.zhaozf.site/59d14174/</id>
    <published>2019-08-04T11:46:31.000Z</published>
    <updated>2019-10-25T10:29:41.682Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/blogImg/201908042042.jpg" alt="微信小程序"></p><p>   新手开发学习采坑之路，只为记录一下遇到问题：</p><p>  今天在开发微信小程序的时候遇到了一个小坑，在获取后台返回的数据之后想要在前台渲染。</p><p>  首先要实现的功能是页面的展示，代码是from表单写的，用户通过这个表单提交数据到后台，然后在下一次用户打开这个页面的时候展示上一次通过from表单提交的数据。</p><a id="more"></a><p>  然后我最初的想法是通过wx:for循环把数据里的每一个元素提出，再用item提取出来，但是实际的结果不尽人意，通过wx:for循环之后整个表单页面在渲染层就不显示了。这样一来，这个方法就实现不了了，后台的数据都已经获取到了，就差渲染到页面上了。</p><p>  最后想到了通过setData方法来进行数据绑定，直接使用来进行展示， 运行了一下，可以。没想到直接使用了一个最简单的办法就实现了。</p><ul><li><p>Js逻辑层代码：<br><img src="https://cdn.nlark.com/yuque/0/2019/png/262649/1550204492288-30ff1ba7-a92b-4aa3-bf50-0490732601ac-image1.png"></p></li><li><p>Wxml渲染层代码：<br><img src="https://cdn.nlark.com/yuque/0/2019/png/262649/1550204492310-14ad7b94-d16e-4ac0-9570-65744d8cb0e7-image2.png"></p></li><li><p>显示的页面样式是这样的：<br><img src="https://cdn.nlark.com/yuque/0/2019/png/262649/1550204492350-38a749ad-c5c1-49b5-bf70-788d2afacd26-image3.png"></p><p>虽然，input组件可以显示了，但是还有一个radio单选组件，这个怎么才能让接收到数据显示到radio组件上呢？</p><p>在网上搜索得到的结果是 正常的JavaScript代码里需要定义一个方法然后通过传递的元素名获取元素对象，获取到对象之后进行遍历，寻找值等于所获取值的子对象，找到子对象之后用rObj[i].checked =  ‘checked’;将数据显示到radio选项里。但是微信小程序这个就比较麻烦，checked这个属性的值是boolean值，只有true和false，我就在这个值里绑定一个三元运算符进行判断，如果这个值等于提交给后台的value值，那么就是true然后radio里的选项上这个就是选中状态。</p><p>在实验的时候，我的代码是这样写的：（错误的范例）</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;form-item&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;form-item-hd&quot;</span>&gt;</span>特技方式：<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;section__title&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">radio-group</span> <span class="attr">name</span>=<span class="string">&quot;style&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">radio</span> <span class="attr">value</span>=<span class="string">&quot;4&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;&#123;<span class="name">leds.model</span>==<span class="number">4</span>?’<span class="literal">true</span>’:’<span class="literal">false</span>’&#125;&#125;</span><span class="xml"><span class="tag"><span class="string">&quot;</span> /&gt;</span>向左移动<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">radio</span> <span class="attr">value</span>=<span class="string">&quot;38&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;&#123;<span class="name">leds.model</span>==<span class="number">38</span>?’<span class="literal">true</span>’:’<span class="literal">false</span>’&#125;&#125;</span><span class="xml"><span class="tag"><span class="string">&quot;</span>/&gt;</span>向右移动<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">radio-group</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>不管上一次发送的是什么它总是显示的是最后一个radio选项，就像这样：<br><img src="https://cdn.nlark.com/yuque/0/2019/png/262649/1550204492371-6e26f89b-3b83-42d4-b4a3-965d93526434-image4.png"></p><p>不太记得了是哪位伟大的名人说过一句话：“这样的结果那就只有一种可能了，那就是代码是问题”。接着找bug吧！把checked的属性全都试了一遍。但是结果还是不好使。What？（一个黑人大大问号），难道是三元运算符的问题吗？找了一下小程序的文档，一看果然是，运算的结果true是不加单引号的，（emmm！！！）运行之后正确执行了。这一个小坑让我转了这么一大圈。但是结果是圆满的。</p><p>这个错误让我想起了一个笑话：一个程序员在肯德基编程，一个乞丐边上坐下来，向他乞讨。他给了一块钱，继续写代码。乞丐没有走，看着他。过了一会，悄悄地说：“这行少了一个分号” 他惊诧地睁大眼睛问：“这个你也懂? ” 乞丐满眼含泪：“就是因为懂这个，所以我才落的今天这下场。”……</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/blogImg/201908042042.jpg&quot; alt=&quot;微信小程序&quot;&gt;&lt;/p&gt;
&lt;p&gt;   新手开发学习采坑之路，只为记录一下遇到问题：&lt;/p&gt;
&lt;p&gt;  今天在开发微信小程序的时候遇到了一个小坑，在获取后台返回的数据之后想要在前台渲染。&lt;/p&gt;
&lt;p&gt;  首先要实现的功能是页面的展示，代码是from表单写的，用户通过这个表单提交数据到后台，然后在下一次用户打开这个页面的时候展示上一次通过from表单提交的数据。&lt;/p&gt;
    
    </summary>
    
      <category term="微信小程序" scheme="https://blogs.zhaozf.site/categories/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="Radio组件" scheme="https://blogs.zhaozf.site/tags/Radio%E7%BB%84%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>【翻译】(第三篇) The Psychology Principles Every UI/UX Designer Needs to Know</title>
    <link href="https://blogs.zhaozf.site/e0f7ecd4/"/>
    <id>https://blogs.zhaozf.site/e0f7ecd4/</id>
    <published>2019-07-16T14:42:49.000Z</published>
    <updated>2019-10-25T10:29:41.690Z</updated>
    
    <content type="html"><![CDATA[<center><h1> 每一个UI/UX设计者需要知道的心理学原则</h1></center><blockquote><p>本文来自阅读极客时间专栏《左耳听风》89 | 程序员练级攻略：UI/UX设计 文章中的推荐阅读</p></blockquote><p>** 原文链接：<a href="https://uxplanet.org/the-psychology-principles-every-ui-ux-designer-needs-to-know-24116fd65778">https://uxplanet.org/the-psychology-principles-every-ui-ux-designer-needs-to-know-24116fd65778</a> **</p><ul><li>作者：Thanasis Rigopoulos</li><li>2017年6月8日</li></ul><p><img src="/assets/translate/translate3-1.png"></p><a id="more"></a><p>Psychology plays a big part in a user’s experience with an application. By understanding how our designs are perceived, we can make adjustments so that the apps we create are more effective in achieving the goals of the user.<br>心理学在用户的应用体验中起着重要作用。通过了解我们的设计是如何被感知的，我们可以进行调整，以便我们创建的应用程序在实现用户目标方面更有效。</p><p>To help you understand the perception of the user, I will introduce some design principles which I think are the most important, and also provide common examples of these principles in practice. Let’s start with the Von Restorff effect:<br>帮助你理解用户的感受，我将介绍一些我认为最重要的设计原则，并在实践中提供这些原则的常见例子。让我们从冯·雷斯托夫效应（Von Restorff effect）开始：</p><h2 id="冯·雷斯托夫效应（Von-Restorff-effect）"><a href="#冯·雷斯托夫效应（Von-Restorff-effect）" class="headerlink" title="冯·雷斯托夫效应（Von Restorff effect）"></a>冯·雷斯托夫效应（Von Restorff effect）</h2><p>The Von Restorff effect (also known as the isolation effect) predicts that when multiple similar objects are present, the one that differs from the rest is most likely to be remembered!<br>Von Restorff效应（也称为隔离效应）预测，当存在多个类似对象时，最有可能记住与其他对象不同的对象！</p><p>Does this ring any bells?<br>这个预测准确吗？</p><p>This is the main reason why all call-to-actions (CTAs) look different from the rest of the action buttons on a site or application!<br>这就是为什么所有动作调用（CTAs）看起来都不同于网站上或应用程序上的其他动作按钮的主要原因！</p><p><img src="/assets/translate/translate3-2.png" alt="Von Restorff Effect Example"></p><p>We want users to be able to differentiate between a simple action button and a CTA, in order for them to have a clear understanding what the CTA does, whilst also remembering it throughout their use of the application or site.<br>我们希望用户能够区分简单的操作按钮和CTA，以便他们清楚地了解CTA的作用，同时在使用应用程序或网站的过程中记住它。</p><blockquote><p>“When multiple similar objects are present, the one that differs from the rest is most likely to be remembered!”<br>当存在多个相似的物体时，最有可能记住与其他物体不同的物体！</p></blockquote><h2 id="序列位置效应（Serial-position-effect）"><a href="#序列位置效应（Serial-position-effect）" class="headerlink" title="序列位置效应（Serial position effect）"></a>序列位置效应（Serial position effect）</h2><p>The Serial Position Effect is the propensity of a user to best remember the first and last items in a series.<br>序列位置效应是用户倾向于最好地记住序列中第一项和最后一项。</p><p><img src="/assets/translate/translate3-3.png" alt="From left to right, Twitter, Medium, ProductHunt"></p><p>This is why most applications nowadays ditch the hamburger menu and go for a bottom or top bar navigation, placing the most important user actions to the right or left. In the image above, you can see some examples from popular iOS applications. Each put the “Home” and “Profile” items all the way to the left and right, with serial position effect in mind.<br>这就是为什么现在大多数应用程序放弃汉堡包菜单，选择底部或顶部的导航条，将最重要的用户操作放在右侧或左侧。在上图中，您可以看到一些流行的iOS应用程序的示例。每个都将“主页”和“配置文件”项目一直放在左右两侧，并考虑到序列位置效应。</p><h2 id="认知负荷（Cognitive-load）"><a href="#认知负荷（Cognitive-load）" class="headerlink" title="认知负荷（Cognitive load）"></a>认知负荷（Cognitive load）</h2><p>Cognitive load refers to the total amount of mental effort being used in a person’s working memory. To put it simply, it is the amount of thought you need to exercise in order to complete a specific task.<br>认知负荷是指在一个人的工作记忆中所使用的脑力的总量。简单地说，它是完成一项特定任务所需要的思考量。</p><blockquote><p>“Cognitive load is the amount of thought you need to exercise in order to complete a specific task.”<br>认知负荷是为了完成一项特定的任务而需要锻炼的思想量。</p></blockquote><p>Cognitive load theory can be differentiated into three types:<br>认知负荷理论可分为三种类型：</p><p>1.Intrinsic cognitive load<br>1.内在认知负荷</p><p>2.Extraneous cognitive load<br>2.外来认知负荷</p><p>3.Germane cognitive load<br>3.相关认知负荷</p><p>I will touch upon the Intrinsic and Germane types as I think that these are the most applicable to UX design.<br>我将讨论内在的和相关联系的类型，因为我认为它们最适用于UX设计。</p><h2 id="内在认知负荷（Intrinsic-Cognitive-Load）"><a href="#内在认知负荷（Intrinsic-Cognitive-Load）" class="headerlink" title="内在认知负荷（Intrinsic Cognitive Load）"></a>内在认知负荷（Intrinsic Cognitive Load）</h2><p>Intrinsic cognitive load is the difficulty associated with a specific instructional topic. It’s the main reason micro-copy and copy play a huge role in a good user experience.<br>内在认知负荷是与特定教学主题相关的困难。这是微拷贝和拷贝在良好的用户体验中发挥巨大作用的主要原因。</p><p>For example most of the time on applications’ empty states, we prompt users to complete a task. Here, the copy needs to be short, simple and with the appropriate words in order for the user to be able to easily follow the instructions.<br>例如，大多数情况下，在应用程序的空状态下，我们会提示用户完成一项任务。在这里，副本需要简短、简单和适当的文字，以便用户能够轻松地按照说明进行操作。</p><p><img src="/assets/translate/translate3-4.png" alt="From left to right, Stayful, Serist, Lucidchart"></p><h2 id="相关认知负荷（Germane-Cognitive-Load）"><a href="#相关认知负荷（Germane-Cognitive-Load）" class="headerlink" title="相关认知负荷（Germane Cognitive Load）"></a>相关认知负荷（Germane Cognitive Load）</h2><p>Germane cognitive load is the cognitive load devoted to processing information and construction of schemas. The schemas describe a pattern of thought that organises categories of information and any relationships among them.<br>相关认知负荷是专门用于信息处理和模式构建的认知负载。这些图式描述了一种思维模式，它组织信息的类别和它们之间的任何关系。</p><p>One of the reasons we use design patterns is because they’re something we’re programmed to do by default — so it’s easier for the users to recognise and learn something new if they can discern it into a pattern from something they already understand.<br>我们使用设计模式的其中一个原因是，它们是我们在默认情况下编程要做的事情——因此，如果用户能够从他们已经理解的东西中将其识别为模式，那么他们就更容易识别和学习新的东西。</p><blockquote><p>“It’s easier for users to learn something new if they can discern it to a pattern from something they understand”<br>“如果用户能够从他们所理解的事物中辨别出某种模式，那么他们更容易学习新事物。”</p></blockquote><h2 id="希克定律（Hick’s-Law）"><a href="#希克定律（Hick’s-Law）" class="headerlink" title="希克定律（Hick’s Law）"></a>希克定律（Hick’s Law）</h2><p>Hick’s Law is the most popular principle, along with the Gestalt Laws.<br>希克定律是除了格式塔定律之外最流行的原理。</p><p>It’s also very simple to understand and practice. Hick’s Law describes that the time it takes for a person to make a decision depends on the choices available to him or her. So if the number of choices increases, the time to make a decision increases logarithmically.<br>它也很容易理解和实践。希克定律描述了一个人做出决定所需的时间取决于他或她所能做出的选择。因此，如果选择的数量增加，做出决定的时间将以对数方式增加。</p><p>A very nice example of Hick’s Law that applies to user experience design are lists:<br>适用于用户体验设计的希克定律的一个很好的例子是列表：</p><p><img src="/assets/translate/translate3-5.png" alt="Hick’s Law Example"></p><h2 id="邻近定律（Law-of-Proximity）"><a href="#邻近定律（Law-of-Proximity）" class="headerlink" title="邻近定律（Law of Proximity）"></a>邻近定律（Law of Proximity）</h2><p>Law of proximity is part of the Gestalt Laws of Perceptual Organization, and it states that objects that are near, or proximate to each other, tend to be grouped together. To put it in simpler terms, our brain can easily associate objects close to each other, better than it does objects that are spaced far apart. This clustering occurs because humans have a natural tendency to organise and group things together.<br>邻近法则是知觉组织的格式塔法则的一部分，它指出，接近或接近彼此的物体倾向于组合在一起。简单地说，我们的大脑可以很容易地将彼此靠近的物体联系在一起，这比那些相隔很远的物体要好。这种聚集的发生是因为人类有一种自然的倾向，将事物组织在一起。</p><p><img src="/assets/translate/translate3-6.png" alt="Law of Proximity Example"></p><blockquote><p>“The Law of Proximity states that objects that are near, or proximate to each other, tend to be grouped together”<br>邻近定律规定，彼此接近或接近的物体倾向于组合在一起。</p></blockquote><p>In the example above, there are 72 circles. We recognise the circles in groups, based on the distance between them. Categorically, we also perceive that there’s a group of 36 circles on the left side of the image, and 3 groups of 12 circles on the right side of the image.<br>在上面的例子中，有72个圆。我们根据两个圆之间的距离，对它们进行分组识别。明确地说，我们还发现图像左侧有一组36个圆圈，右侧有3组12个圆圈。</p><p>I believe this example makes it clear that there is a need to group things together when designing a UI, as well as the importance of being careful when putting things together since users may naturally think they are associated with each other.<br>我相信这个例子清楚地表明，在设计一个UI时需要将事物分组在一起，并且在将事物组合在一起时要小心，因为用户可能会自然地认为它们是相互关联的。</p><p>Originally published at blog.marvelapp.com on June 8, 2017.<br>最初于2017年6月8日在blog.marvelapp.com上发布。</p>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;&lt;h1&gt; 每一个UI/UX设计者需要知道的心理学原则&lt;/h1&gt;&lt;/center&gt;


&lt;blockquote&gt;
&lt;p&gt;本文来自阅读极客时间专栏《左耳听风》89 | 程序员练级攻略：UI/UX设计 文章中的推荐阅读&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;** 原文链接：&lt;a href=&quot;https://uxplanet.org/the-psychology-principles-every-ui-ux-designer-needs-to-know-24116fd65778&quot;&gt;https://uxplanet.org/the-psychology-principles-every-ui-ux-designer-needs-to-know-24116fd65778&lt;/a&gt; **&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;作者：Thanasis Rigopoulos&lt;/li&gt;
&lt;li&gt;2017年6月8日&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/assets/translate/translate3-1.png&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="翻译" scheme="https://blogs.zhaozf.site/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
      <category term="设计" scheme="https://blogs.zhaozf.site/tags/%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="UI/UX" scheme="https://blogs.zhaozf.site/tags/UI-UX/"/>
    
      <category term="心理学" scheme="https://blogs.zhaozf.site/tags/%E5%BF%83%E7%90%86%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>【致自己-心灵鸡汤】放下，需要勇气，更考验智慧</title>
    <link href="https://blogs.zhaozf.site/23b7c6d1/"/>
    <id>https://blogs.zhaozf.site/23b7c6d1/</id>
    <published>2019-07-12T09:58:22.000Z</published>
    <updated>2020-05-01T16:03:16.118Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">这是一篇加密文章，内容可能是个人情感宣泄或者收费技术。如果你确实想看，请微信搜索公众号名称【无聊才读书呀】 或微信号：【zhaozfsite】回复关键字【博客密码】，获取文章密码。</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="6b18f9803dc8b3d1d33b677a2dd203ea0dc69e6af12d9264b04be8089ef882f5"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      查看文章，请输入文章密码。
    
    </summary>
    
    
      <category term="致自己" scheme="https://blogs.zhaozf.site/tags/%E8%87%B4%E8%87%AA%E5%B7%B1/"/>
    
      <category term="心灵鸡汤" scheme="https://blogs.zhaozf.site/tags/%E5%BF%83%E7%81%B5%E9%B8%A1%E6%B1%A4/"/>
    
  </entry>
  
  <entry>
    <title>【翻译】(第二篇) How to streamline your UI/UX workflow with Figma</title>
    <link href="https://blogs.zhaozf.site/c7ae177f/"/>
    <id>https://blogs.zhaozf.site/c7ae177f/</id>
    <published>2019-07-12T01:22:59.000Z</published>
    <updated>2019-10-25T10:29:41.683Z</updated>
    
    <content type="html"><![CDATA[<center><h1> 如何使用Figma简化您的UI/UX工作流</h1></center><h4 id="如何在下一个项目中节省90-的时间"><a href="#如何在下一个项目中节省90-的时间" class="headerlink" title="如何在下一个项目中节省90%的时间"></a>如何在下一个项目中节省90%的时间</h4><ul><li><p>作者：Nicole Saidy</p></li><li><p>2018年2月12日</p></li><li><p>原文地址：<a href="https://blog.nicolesaidy.com/how-to-streamline-your-ui-ux-workflow-with-figma-b72c30596435">https://blog.nicolesaidy.com/how-to-streamline-your-ui-ux-workflow-with-figma-b72c30596435</a></p><p><img src="https://cdn-images-1.medium.com/max/2400/1*OGwKowQMVnj5Vk-lbbB6OQ.png"></p></li></ul><p>去年，我一直使用Figma软件来进行我的UI/UX设计工作，并且它节省了我很多工作时间。他真的改变了我的工作流。</p><p>除了直观的使用。我喜欢Figma的原因是因为他是完整的一套东西。它使我能够在整个设计过程中工作：线框图、设计、设计系统、原型设计和协作。</p><p>我不想谈论你为什么应该使用Figma。反而，我将向你展示你怎样使用一个简单的黑客软件节省你下一个项目的时间。</p><p>这都归结为Figma中的一个重要特性：✨组件✨。</p><a id="more"></a><p><img src="https://cdn-images-1.medium.com/max/2400/1*zafsrGTkmeVKhMCEldZ34g.gif"></p><p>组件在Figma中是和Sketch中的符号是非常相似的。但是我认为Figma的组件更灵活，更容易使用。如果您对组件不太了解，请先阅读本文或观看本教程。</p><p>Figma 怎样节省我的时间呢？让我们看看传统的设计过程与Figma中的设计过程的对比。</p><h2 id="终极对决："><a href="#终极对决：" class="headerlink" title="终极对决："></a>终极对决：</h2><h4 id="经典过程："><a href="#经典过程：" class="headerlink" title="经典过程："></a>经典过程：</h4><p>最简单的经典过程是在像Balsamiq这样的应用程序中构建线框图，然后在另一个应用程序 Sketch中构建设计，然后在另一个应用程序像 inVision中构建原型。这不是一个相互作用的过程，因为它会引起摩擦并浪费很多时间，更不用说它会在线框和原型之间产生巨大的差距。</p><h4 id="Figma过程："><a href="#Figma过程：" class="headerlink" title="Figma过程："></a>Figma过程：</h4><p>使用Figma，您可以跳过2个步骤，在Figma中构建交互式线框，创建一个UI库（在相同的时间），然后更新已经花费宝贵时间用于创建最终设计原型的UI组件。</p><p>让我换个说法。从一开始就使用组件构建线框。当你这样做时，在你的线框被批准之后，你所需要做的就是更新组件。这将把它们从灰度基本形状转换为详细设计的组件，这些组件可以完全将线框转换为高保真原型。</p><h4 id="他是怎样工作？"><a href="#他是怎样工作？" class="headerlink" title="他是怎样工作？"></a>他是怎样工作？</h4><p>下面是执行步骤</p><h5 id="step-1-构建你的线框"><a href="#step-1-构建你的线框" class="headerlink" title="step 1. 构建你的线框"></a>step 1. 构建你的线框</h5><p>在这步骤之前，你应该已经在纸上画完了你屏幕上的草图。之后，是时候把他们移到数字线框了。</p><p>你开始在屏幕上画之前。第一件事是你需要创建一个UI框架库。这就是所有可重用的UI组件和指导原则将发生的地方。</p><p>第一个组件你应该创建你的文本样式。创建每一个样式的组件（H1,H2,H3,H4,P,Small，等）。保持原样的字体，不要考虑设计。</p><p><img src="https://cdn-images-1.medium.com/max/2400/1*kglcTnnr6lQvK56nHl1k5g.png"></p><p>现在，每当您想向屏幕添加文本时，都可以从UI库中的文本组件中获取一个实例。为什么?当你进入设计阶段，想要改变你所有屏幕的字体样式时，你只需要从这里改变一次，它就会在任何地方更新。你一会就明白了。</p><p>这个概念同样适用于所有其他组件。</p><p>创建所有其他对象作为组件，如按钮、输入、下拉列表、导航栏、卡片、标签、页脚等。我通常喜欢先在屏幕中创建对象，在它的上下文中构建它，然后将它拖到我的UI库并将其转换为组件，然后将其复制回我的屏幕。</p><p>到项目结束时，（几乎）您在设计中创建的每个对象都应该是一个组件。这不仅可以节省您的工作时间，而且还可以保持整个产品的一致性，这是UI/UX设计中的一个关键点。</p><h5 id="Step-2-使线框交互"><a href="#Step-2-使线框交互" class="headerlink" title="Step 2. 使线框交互"></a>Step 2. 使线框交互</h5><p>完成线框图和创建UI库之后，是时候让线框图交互了。幸运的是，Figma让这一切变得非常容易。</p><p>您只需要在原型模式下将每个对象拖到其链接页。请记住，链接原始组件会将相同的链接应用于其所有实例，如下所示。</p><p><img src="https://cdn-images-1.medium.com/max/2400/1*pO1A_LCHEZpOiX9PR42c0g.gif"></p><p>下一步是与利益相关者共享交互式线框，并通过直接在原型上添加评论来获得反馈。</p><p>在几个迭代周期之后，您的线框应该得到批准。</p><h5 id="Step-3-设计系统风格"><a href="#Step-3-设计系统风格" class="headerlink" title="Step 3. 设计系统风格"></a>Step 3. 设计系统风格</h5><p>一旦您的交互式线框获得批准，您现在就可以设计系统的样式。在这个步骤中，您将品牌设计指南、颜色和设计细节添加到您的UI库中已经构建的组件中。此步骤完全将线框转换为高保真设计原型。</p><p><img src="https://cdn-images-1.medium.com/max/2400/1*azAA0jqs7f2hCm4FMCDDKw.gif"></p><p>我喜欢先向利益相关者展示风格指南，以便在向他们展示所有屏幕之前获得关于情绪和设计风格的反馈。我喜欢在其中添加一些UI组件，让他们了解每个组件的设计方式。</p><h5 id="Step-4-原型定稿"><a href="#Step-4-原型定稿" class="headerlink" title="Step 4. 原型定稿"></a>Step 4. 原型定稿</h5><p>一旦样式指南获得批准，剩下的就是对原型进行润色。在这里你可以确保一切都到位。有些对象可能不是需要设计的组件，或者需要填充的组件。确保播放原型并尝试链接以确保所有链接都正常工作。</p><p><img src="https://cdn-images-1.medium.com/max/2400/1*o0XtqMUKt1n7mX_Sw1G85g.gif"></p><p>原型完成了！现在，您可以与利益相关者共享一个链接，以获得最终批准。然后，您将它交给开发人员，向他们展示如何检查和导出Figma中的图像，同时他们还可以直接在原型上提出任何问题。</p><p>您还可以与用户共享一个公共链接来测试原型并收集反馈。</p><p>就这样！我希望我的过程能帮助你节省下一个项目的时间。</p><p>如果你喜欢这个，那么你肯定会喜欢我用Figma简化你的工作流程的SkillShare类，点击这里免费获得我的类（以及2个月的SkillShare溢价）。</p><p>别忘了在下面给我一些👏，在我的博客上写更多与设计相关的文章。</p>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;&lt;h1&gt; 如何使用Figma简化您的UI/UX工作流&lt;/h1&gt;&lt;/center&gt;

&lt;h4 id=&quot;如何在下一个项目中节省90-的时间&quot;&gt;&lt;a href=&quot;#如何在下一个项目中节省90-的时间&quot; class=&quot;headerlink&quot; title=&quot;如何在下一个项目中节省90%的时间&quot;&gt;&lt;/a&gt;如何在下一个项目中节省90%的时间&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;作者：Nicole Saidy&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2018年2月12日&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;原文地址：&lt;a href=&quot;https://blog.nicolesaidy.com/how-to-streamline-your-ui-ux-workflow-with-figma-b72c30596435&quot;&gt;https://blog.nicolesaidy.com/how-to-streamline-your-ui-ux-workflow-with-figma-b72c30596435&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/2400/1*OGwKowQMVnj5Vk-lbbB6OQ.png&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;去年，我一直使用Figma软件来进行我的UI/UX设计工作，并且它节省了我很多工作时间。他真的改变了我的工作流。&lt;/p&gt;
&lt;p&gt;除了直观的使用。我喜欢Figma的原因是因为他是完整的一套东西。它使我能够在整个设计过程中工作：线框图、设计、设计系统、原型设计和协作。&lt;/p&gt;
&lt;p&gt;我不想谈论你为什么应该使用Figma。反而，我将向你展示你怎样使用一个简单的黑客软件节省你下一个项目的时间。&lt;/p&gt;
&lt;p&gt;这都归结为Figma中的一个重要特性：✨组件✨。&lt;/p&gt;
    
    </summary>
    
      <category term="翻译" scheme="https://blogs.zhaozf.site/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
      <category term="翻译" scheme="https://blogs.zhaozf.site/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="设计" scheme="https://blogs.zhaozf.site/tags/%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="软件使用" scheme="https://blogs.zhaozf.site/tags/%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>Flex布局属性</title>
    <link href="https://blogs.zhaozf.site/4c5ee8a2/"/>
    <id>https://blogs.zhaozf.site/4c5ee8a2/</id>
    <published>2019-07-11T01:34:30.000Z</published>
    <updated>2019-10-25T10:29:41.678Z</updated>
    
    <content type="html"><![CDATA[<p>Flex是Flexible Box的缩写，意为弹性布局，用来为盒子模型提供最大的灵活性、任何一个容器都可以指定为Flex布局。</p><ul><li>下图是Flex布局属性图：<br><img src="/assets/blogImg/flexLayoutAttribute.jpg" alt="Flex布局属性图"></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Flex是Flexible Box的缩写，意为弹性布局，用来为盒子模型提供最大的灵活性、任何一个容器都可以指定为Flex布局。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;下图是Flex布局属性图：&lt;br&gt;&lt;img src=&quot;/assets/blogImg/flexLayoutAttribu
      
    
    </summary>
    
      <category term="CSS" scheme="https://blogs.zhaozf.site/categories/CSS/"/>
    
    
      <category term="弹性布局" scheme="https://blogs.zhaozf.site/tags/%E5%BC%B9%E6%80%A7%E5%B8%83%E5%B1%80/"/>
    
      <category term="Flexible Box" scheme="https://blogs.zhaozf.site/tags/Flexible-Box/"/>
    
  </entry>
  
  <entry>
    <title>【翻译】(第一篇) 7 steps to become a UI/UX designer</title>
    <link href="https://blogs.zhaozf.site/5a2c16d3/"/>
    <id>https://blogs.zhaozf.site/5a2c16d3/</id>
    <published>2019-06-19T11:42:59.000Z</published>
    <updated>2019-10-25T10:29:41.689Z</updated>
    
    <content type="html"><![CDATA[<center><h1>七步成为UI/UX设计师</h1></center><blockquote><p>本文来自阅读极客时间专栏《左耳听风》89 | 程序员练级攻略：UI/UX设计 文章中的推荐阅读</p></blockquote><h4 id="提示：帮助您开始的资源"><a href="#提示：帮助您开始的资源" class="headerlink" title="提示：帮助您开始的资源"></a>提示：帮助您开始的资源</h4><ul><li>作者：Nicole Saidy</li><li>2017年5月25日</li></ul><p>** 原文链接：<a href="https://blog.nicolesaidy.com/7-steps-to-become-a-ui-ux-designer-8beed7639a95">https://blog.nicolesaidy.com/7-steps-to-become-a-ui-ux-designer-8beed7639a95</a> **</p><p> <img src="/assets/translate/translate1.jpeg"></p><p>最近，我收到很多人的的相似问题：<br>●    我怎么样才能深入的了解UI或UX？<br>●    我作为一名程序员/营销经理/社交媒体策划师并且想要知道更多的关于设计。我该从哪里开始？<br>●    你知道什么是好的设计和什么事坏的设计吗？<br>●    成为一名设计师需要什么？</p><a id="more"></a><h3 id="“如何开始？”"><a href="#“如何开始？”" class="headerlink" title="“如何开始？”"></a>“如何开始？”</h3><p>这个问题使我回到我刚开始职业生涯的时候。7年前，在我第一份设计工作的第一天。我坐在iMac上的一个空白Photoshop文件前（那是我是Windows用户）。我想知道我的经理刚刚向我介绍了什么。我没有灵感怎样开始。大脑一片空白。</p><p>在就职那份工作之前，我只是大学毕业获得多媒体学位。那么，为什么我对设计一无所知呢？大学不教我们实用设计。大多数的大学课程只教我们原理和有时候教我们怎样使用设计软件像Adobe套件。但那还不够—甚至还不够接近。<br>只有自己练习和学习才能使你成为更好的设计师<br>自学七年后，我现在是一名设计教师和国际会议演讲者。<br>你应该知道的第一件事是：</p><blockquote><p>你不必生来就拥有它<br>我们不是天生就是设计师的独角兽。设计是学来的。设计就是解决问题。这是一个不断发现问题并为其创造解决方案的过程。<br>设计有很多领域：用户界面、用户体验、产品设计师、图形设计师、交互设计师、信息架构师，并且列表还在继续。首先找出你更感兴趣的专业。现在，让我们集中讨论最常见的类型：界面和体验的混合：UI/UX设计师。</p></blockquote><h1 id="1-熟悉用户界面原则"><a href="#1-熟悉用户界面原则" class="headerlink" title="1.    熟悉用户界面原则"></a>1.    熟悉用户界面原则</h1><p>练习设计之前，第一件事你需要学习一些设计的原则。由此，你将要能够进入设计的世界并且开始具有创造力的思想。你将要学习心理方面的设计：为什么它看起来好看和不好看<br>这是一些你应该知道的基础原则</p><h3 id="1-颜色"><a href="#1-颜色" class="headerlink" title="1.    颜色"></a>1.    颜色</h3><p>颜色词汇，基础与色彩心理学。<br><a href="https://www.sitepoint.com/principles-of-design-colour/">设计原则：颜色</a></p><h3 id="2-平衡"><a href="#2-平衡" class="headerlink" title="2.    平衡"></a>2.    平衡</h3><p>对称与非对称<br><a href="https://www.sitepoint.com/principles-of-good-design-balance/">设计原则：平衡</a></p><h3 id="3-对比度"><a href="#3-对比度" class="headerlink" title="3.    对比度"></a>3.    对比度</h3><p>使用对比度去组织信息，构建层次结构和创造焦点。<br><a href="https://www.sitepoint.com/principles-of-design-contrast/">设计原则：对比度</a></p><h3 id="4-排版"><a href="#4-排版" class="headerlink" title="4.    排版"></a>4.    排版</h3><p>选择字体并且在网页上创建可读文档。<br><a href="https://www.smashingmagazine.com/2009/03/10-principles-for-readable-web-typography/">10条原则中的可读性和网页排版原则</a></p><h3 id="5-一致性"><a href="#5-一致性" class="headerlink" title="5.    一致性"></a>5.    一致性</h3><p>最重要的原则，从这里开始创建直观和可用的设计。<br><a href="https://uxdesign.cc/design-principle-consistency-6b0cf7e7339f">设计原则：一致性</a><br><a href="https://goodui.org/">这里</a>有一些很好的做和不做的设计一个好的用户界面。</p><h1 id="2-学习创造性的用户体验过程"><a href="#2-学习创造性的用户体验过程" class="headerlink" title="2.    学习创造性的用户体验过程"></a>2.    学习创造性的用户体验过程</h1><p>接下来的事是明白创造性的过程。UI/Ux设计是每个创意人经历的一个特殊的阶段。<br>分为四个不同的阶段-发现、定义、开发和交付-<a href="https://www.thoughtworks.com/insights/blog/double-diamond">双菱形</a>是设计过程的简单可视图</p><h3 id="发现"><a href="#发现" class="headerlink" title="发现"></a>发现</h3><p>这是一个开始阶段，设计师开始研究，获得灵感，收集想法。</p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>这是定义阶段，设计师定义从发现阶段提取的想法。在此基础上，创建了一个清晰的创意简报。</p><h3 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h3><p>这就是创建、原型化、测试和迭代解决方案或概念的地方。这个试错的过程帮助设计师改进和完善他们的想法</p><h3 id="交付"><a href="#交付" class="headerlink" title="交付"></a>交付</h3><p>最后阶段是交付，最终项目完成、生产和启动的地方。<br>查看我的文章<a href="https://blog.prototypr.io/how-to-streamline-your-ui-ux-workflow-with-figma-b72c30596435">如何使用Figma简化您的UI/UX工作流。</a></p><h1 id="3-培养你的设计眼光"><a href="#3-培养你的设计眼光" class="headerlink" title="3.    培养你的设计眼光"></a>3.    培养你的设计眼光</h1><p>知道设计原则是很好的，但有时这还不够，你还必须训练你的眼睛去看好的设计和坏的设计，并找出设计的优缺点。</p><p>最有效的训练你的设计眼光的方法是通过灵感。在打开一张空白的画布并盯着它看半个小时之前，要知道只有通过研究才能获得创造性。有时候大脑不能自己创造想法，你必须先看看其他的设计才能开始创造自己的想法，尤其是当你是一个初学者的时候。</p><p>所以看看其他设计师在Dribbble上做了什么，每当你遇到漂亮的设计或与你的项目相关的东西时，把它保存在你的笔记中，并提到你喜欢它的地方，你也可以截图。这样，您就可以从一系列鼓舞人心的设计开始你的创作。</p><p>这是我最喜欢的灵感网站：</p><ul><li><a href="https://onepagelove.com/">onepagelove.com</a>一页的网站设计给你灵感</li><li><a href="https://www.awwwards.com/">awwwards.com</a>奖励网站，促进设计人才</li><li><a href="https://dribbble.com/">dribbble.com</a>分享工作的设计师社区</li><li><a href="https://pttrns.com/">pttrns.com</a>移动设计模式的集合。</li><li><a href="https://uimovement.com/">uimovement.com</a>最好的用户界面设计灵感，每一天。</li></ul><h1 id="4-每天阅读设计文章"><a href="#4-每天阅读设计文章" class="headerlink" title="4.    每天阅读设计文章"></a>4.    每天阅读设计文章</h1><p>为了让我们熟悉设计，最好的方法是每天阅读几篇文章。</p><p>使阅读设计新闻和博客成为日常习惯。在线上有数以百万计的文章可供我们发现新的趋势、用例和教程。我们要做的就是找到他们。没有什么比从别人的经历中学习更好的了。</p><p>所以，从一杯咖啡和一些鼓舞人心的文章开始你的一天吧，这些文章都是关于中型杂志或是零碎杂志的文章。早晨学习新事物会开阔你的思维，为你的一天创造空间。</p><p>然后，在你的一天中，时不时地休息一下，多读些东西。休息对创造力非常重要，尤其是当你陷入困境，觉得没有效率的时候。将您喜欢的网站作为浏览器主页添加书签或订阅设计时事通讯。</p><p>以下是我最喜欢的博客和新闻网站：</p><ul><li>blog.marvelapp.com</li><li>medium.com/design</li><li>smashingmagazine.com</li><li>webdesignernews.com</li><li>sitepoint.com/design-ux</li></ul><h1 id="5-设计假项目"><a href="#5-设计假项目" class="headerlink" title="5.    设计假项目"></a>5.    设计假项目</h1><p>熟能生巧。我们都知道，没有经验，我们找不到客户/工作。但是没有工作或项目，我们就不能练习，对吗？</p><p>但是我们可以通过自己练习打破这个循环，通过创建假项目来娱乐！Dribbble 就可以满足它了。</p><p>腾出时间选择一个你已经使用的网站或应用程序，然后重新设计它。它可以是任何你认为更好的东西。你也可以设计自己的应用程序想法。</p><p>从这里，你将建立你的设计组合，你将实践设计。</p><h1 id="6-学习最新的网页设计工具。"><a href="#6-学习最新的网页设计工具。" class="headerlink" title="6.    学习最新的网页设计工具。"></a>6.    学习最新的网页设计工具。</h1><p>外面有很多设计工具，但是你不需要知道所有这些工具。了解最棒的产品，选择最喜爱的产品，并随时掌握最新的功能和趋势。</p><p>以下是我在设计过程中使用的最新工具：</p><p><a href="https://www.sketch.com/">Sketch</a>用于界面设计<br><a href="https://www.figma.com/">Figma</a>用于协同界面设计<br><a href="https://balsamiq.com/">Balsamiq</a>用于低保真线框<br><a href="https://www.adobe.com/products/xd.html">Adobe XD</a>用于界面设计和原型设计<br><a href="https://marvelapp.com/">Marvel App</a>用于模型交互设计<br><a href="https://www.invisionapp.com/">Invision App</a>用于原型设计和协作</p><h1 id="7-指导并得到指导"><a href="#7-指导并得到指导" class="headerlink" title="7.    指导并得到指导"></a>7.    指导并得到指导</h1><p>学习设计的另一个好方法是找一个愿意帮忙的设计导师或设计师朋友。他们将帮助你加快学习过程。</p><p>设计师会审查你的作品并尽可能给出他们的评论。这就像一条捷径。他们也会给你从他们的经验中学到的技巧和诀窍。所以，继续给设计师发电子邮件，提出问题，讨论你的问题。</p><p>而且，从我教设计和前端的几年中，我学到的比我教的还多。当你准备好和别人谈论设计时，你可以指导或教育别人设计。你将学会从不同的角度看待它，你会得到你可能从未想过的反馈和问题。</p><p>每当你和别人谈论设计的时候，你的大脑总是处于“头脑风暴”的状态，你会发现自己对设计越来越感兴趣。</p><p>查看我的<a href="https://github.com/nicolesaidy/awesome-web-design">很棒的网页设计</a>Github存储库，这是一个网站设计师的资源管理列表。</p><p>如果你喜欢这篇文章，一定要在下面给我一些👏，并在我的<a href="https://blog.nicolesaidy.com/">博客</a>上找到更多的设计文章。另外，还可以在<a href="https://twitter.com/nicolesaidy">Twitter</a>上打个招呼🙋🏽‍</p>]]></content>
    
    <summary type="html">
    
      &lt;center&gt;&lt;h1&gt;七步成为UI/UX设计师&lt;/h1&gt;&lt;/center&gt;

&lt;blockquote&gt;
&lt;p&gt;本文来自阅读极客时间专栏《左耳听风》89 | 程序员练级攻略：UI/UX设计 文章中的推荐阅读&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;提示：帮助您开始的资源&quot;&gt;&lt;a href=&quot;#提示：帮助您开始的资源&quot; class=&quot;headerlink&quot; title=&quot;提示：帮助您开始的资源&quot;&gt;&lt;/a&gt;提示：帮助您开始的资源&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;作者：Nicole Saidy&lt;/li&gt;
&lt;li&gt;2017年5月25日&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;** 原文链接：&lt;a href=&quot;https://blog.nicolesaidy.com/7-steps-to-become-a-ui-ux-designer-8beed7639a95&quot;&gt;https://blog.nicolesaidy.com/7-steps-to-become-a-ui-ux-designer-8beed7639a95&lt;/a&gt; **&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;/assets/translate/translate1.jpeg&quot;&gt;&lt;/p&gt;
&lt;p&gt;最近，我收到很多人的的相似问题：&lt;br&gt;●    我怎么样才能深入的了解UI或UX？&lt;br&gt;●    我作为一名程序员/营销经理/社交媒体策划师并且想要知道更多的关于设计。我该从哪里开始？&lt;br&gt;●    你知道什么是好的设计和什么事坏的设计吗？&lt;br&gt;●    成为一名设计师需要什么？&lt;/p&gt;
    
    </summary>
    
      <category term="翻译" scheme="https://blogs.zhaozf.site/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
      <category term="翻译" scheme="https://blogs.zhaozf.site/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="设计" scheme="https://blogs.zhaozf.site/tags/%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="UI/UX" scheme="https://blogs.zhaozf.site/tags/UI-UX/"/>
    
  </entry>
  
  <entry>
    <title>规划</title>
    <link href="https://blogs.zhaozf.site/a99ba8c6/"/>
    <id>https://blogs.zhaozf.site/a99ba8c6/</id>
    <published>2019-06-09T13:38:43.000Z</published>
    <updated>2020-12-09T12:58:08.931Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/blogImg/201907241010.jpg"><br>5：30  起床 洗漱 之后有可能运动（跑步或者跳绳）<br>6：00  学习 （学习前端知识，vue，python Django等）<br>7：00  吃早饭<br>7：30  上班</p><p>中午 （目标英语连读无障碍。四级六级的水平或者读英文文档无障碍。下一级托福雅思的水平【这一级别遥遥无期，前面的实现了再说】）<br>英语做题软件</p><ul><li>10分钟百斩词</li><li>10分钟流利说</li><li>10分钟爱阅读</li></ul><p>18：30  跑步<br>19：30  吃饭<br>20：30  学习</p><ul><li>练习书法（和直播一起多了解书法方面的知识）</li><li>练习尤克里里</li><li>看书（kindle和微信读书或纸质书【各种方面的】） </li></ul><p>22：30  洗漱睡觉</p><a id="more"></a><h5 id="想做的事（不知道能实现多少）："><a href="#想做的事（不知道能实现多少）：" class="headerlink" title="想做的事（不知道能实现多少）："></a>想做的事（不知道能实现多少）：</h5><ol><li>利用vue重新公司网站。（边学边做）</li><li>学习uniapp和taro制作多端小程序。（想做一个医学方面的应用[app、小程序或网页]）【周易方面的万年历等】【工具类的应用】</li><li>学习前端app方面的知识。         （想做一个医学方面的应用[app、小程序或网页]）【周易方面的万年历等】【工具类的应用】</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/blogImg/201907241010.jpg&quot;&gt;&lt;br&gt;5：30  起床 洗漱 之后有可能运动（跑步或者跳绳）&lt;br&gt;6：00  学习 （学习前端知识，vue，python Django等）&lt;br&gt;7：00  吃早饭&lt;br&gt;7：30  上班&lt;/p&gt;
&lt;p&gt;中午 （目标英语连读无障碍。四级六级的水平或者读英文文档无障碍。下一级托福雅思的水平【这一级别遥遥无期，前面的实现了再说】）&lt;br&gt;英语做题软件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;10分钟百斩词&lt;/li&gt;
&lt;li&gt;10分钟流利说&lt;/li&gt;
&lt;li&gt;10分钟爱阅读&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;18：30  跑步&lt;br&gt;19：30  吃饭&lt;br&gt;20：30  学习&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;练习书法（和直播一起多了解书法方面的知识）&lt;/li&gt;
&lt;li&gt;练习尤克里里&lt;/li&gt;
&lt;li&gt;看书（kindle和微信读书或纸质书【各种方面的】） &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;22：30  洗漱睡觉&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>书单</title>
    <link href="https://blogs.zhaozf.site/e8a1470d/"/>
    <id>https://blogs.zhaozf.site/e8a1470d/</id>
    <published>2019-06-04T04:51:17.000Z</published>
    <updated>2019-10-25T10:29:41.691Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/blogImg/linian6.jpg" alt="李念"></p><h3 id="2019年6月4日记录将要阅读的书单"><a href="#2019年6月4日记录将要阅读的书单" class="headerlink" title="2019年6月4日记录将要阅读的书单"></a>2019年6月4日记录将要阅读的书单</h3><ol><li>《白夜行》                                                                  –（东野圭吾） 世界上有两样东西不可以直视，一是太阳，二是人心。</li><li>《平凡的世界》                                                              –（路遥） 最平凡的人，也得要为他那个世界的存在而战斗。</li><li>《狼图腾》                                                                  –（姜戎） </li><li>《杀死一只知更鸟》                                                           –（哈珀·李一）</li><li>《人性的弱点》                                                               –（戴尔·卡耐基）</li><li>《三国演义》 </li><li>《明朝那些事儿》                                                              –（当年明月）</li><li>《人类简史：从动物到上帝》<font color="red"> [已读完·粗读]  </font>             –（[以]尤瓦尔·赫拉利）</li><li>《未来简史：从智人到智神》                                                     –（[以]尤瓦尔·赫拉利）</li><li>《数学简史》           <font color="red">  [已读完·粗读]  </font>             – （蔡天新）</li><li>《时间简史》                                                                 – （史蒂芬·霍金）</li><li>《算法图解》                                                                 – （[美]巴尔加瓦）   以python语言为基础的算法介绍</li><li>《程序员的自我修养》     <font color="red">  [已读完]   </font>               – （陈逸鹤）</li><li>《增长黑客》                                                                 –（范冰）</li></ol><a id="more"></a><h2 id="一、程序员的自我修养–陈逸鹤"><a href="#一、程序员的自我修养–陈逸鹤" class="headerlink" title="一、程序员的自我修养–陈逸鹤"></a>一、程序员的自我修养–陈逸鹤</h2><p><img src="/assets/book/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB--%E9%99%88%E9%80%B8%E9%B9%A4.jpg" alt="程序员的自我修养--陈逸鹤"></p><blockquote><p>阅读总结：</p></blockquote><p>一、职业生涯</p><p>1．正确地认识自己<br>2．比一般人更加努力<br>3．适时建立个人权威<br>4．遵循最佳实践<br>5．保持好奇心并乐于探索新的事物<br>6．抛开代码与人沟通<br>7．要为优秀的人工作<br>8．生活、睡眠、旅行</p><ul><li>生活：尝试有节制和有规律的生活，程序员生涯绝不是一次冲刺跑，而更像是一场马拉松。你需要合理规划自己的时间分配（学习、阅读、写代码）并持之以恒地去做。</li><li>睡眠；充足的睡眠往往能使你更有效率地投入到新一天的工作中，你也会变得更有创造力。</li><li>旅行：因为这能让你发现和感受新的东西，而这些是从电脑屏幕上无法获得。<br>9．相信自己的天赋和创造力</li></ul><p>二、每个程序员都应该了解的一件事</p><p>1．读与技术无关的书<br>2．会写文档<br>3．学会包装<br>4．尝试多讲<br>5．建立社会化联系</p><p>三、实践</p><p>1.快速构建web应用并成为一个全栈工程师<br>2.学习使用命令行<br>3.重构：自动化编译、测试、部署</p><p>四、个人发展</p><p>1.自由程序员<br>2.专家（10000小时定律）<br>3.创业<br>4.建立自己的品牌<br>5.团队协作<br>6.写出优秀的技术博客</p><p>五、自学设计</p><p>1.使用网格来确定秩序<br>2.应用黄金比例<br>3.恰到好处的强调与对比<br>4.寻找设计灵感<br>5.读书<br>6.收集与思考</p><h2 id="二、数学简史–蔡天新"><a href="#二、数学简史–蔡天新" class="headerlink" title="二、数学简史–蔡天新"></a>二、数学简史–蔡天新</h2><p><img src="/assets/book/%E6%95%B0%E5%AD%A6%E7%AE%80%E5%8F%B2--%E8%94%A1%E5%A4%A9%E6%96%B0.jpg" alt="数学简史--蔡天新"></p><blockquote><p>阅读总结：</p></blockquote><h3 id="数学年表"><a href="#数学年表" class="headerlink" title="数学年表"></a>数学年表</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">约公元前3000年，埃及出现象形数字。</span></span><br><span class="line"><span class="string">公元前2400—前1600年，巴比伦泥板书使用六十进制计数法，已知毕达哥拉斯定理（勾股定理）。</span></span><br><span class="line"><span class="string">公元前1850—前1650年，埃及纸草书使用十进制计数法。</span></span><br><span class="line"><span class="string">公元前1400—前1100年，中国殷墟甲骨文使用十进制计数法；公元前11世纪，周公和商高已知“勾三、股四、弦五”。</span></span><br><span class="line"><span class="string">约公元前600年，希腊泰勒斯开始命题论证；中国荣方和陈子已知勾股定理。</span></span><br><span class="line"><span class="string">约公元前540年，希腊毕达哥拉斯学派证明毕氏定理，由[插图]发现不可通约量。</span></span><br><span class="line"><span class="string">约公元前500年，印度《绳法经》给出[插图]的精确值，已知毕达哥拉斯定理。</span></span><br><span class="line"><span class="string">约公元前460年，希腊智人学派（也称巧辩学派）提出三大几何作图难题。</span></span><br><span class="line"><span class="string">约公元前450年，希腊埃利亚学派的芝诺提出“芝诺悖论”。</span></span><br><span class="line"><span class="string">约公元前380年，希腊柏拉图在雅典创办“柏拉图学园”，主张通过学习几何培养逻辑思维能力。</span></span><br><span class="line"><span class="string">约公元前335年，希腊欧德莫斯著《几何学史》，成为第一个数学史家。</span></span><br><span class="line"><span class="string">约公元前300年，希腊欧几里得著《几何原本》，用公理法建立演绎数学体系。</span></span><br><span class="line"><span class="string">公元前287—前212年，希腊阿基米德给出球体积计算公式、圆周率上下界，隐含近代积分学思想。</span></span><br><span class="line"><span class="string">公元前230年，希腊埃拉托色尼发明“筛法”，用于建立素数表。</span></span><br><span class="line"><span class="string">公元前225年，希腊阿波罗尼奥斯著《圆锥曲线论》。</span></span><br><span class="line"><span class="string">约公元前150年，中国出现最早的数学书《算数书》，之后又有《周髀算经》《九章算术》。</span></span><br><span class="line"><span class="string">约150年，希腊托勒密著《天文学大成》，发展了三角学。</span></span><br><span class="line"><span class="string">约250年，希腊丢番图著《算术》，提出不定方程，引入未知数，创建未知数的符号。</span></span><br><span class="line"><span class="string">约370年，希腊希帕蒂娅出生，成为史上第一位女数学家。</span></span><br><span class="line"><span class="number">462</span><span class="string">年，中国祖冲之计算圆周率，精确到小数点后7位，以355/113为密率。</span></span><br><span class="line"><span class="number">820</span><span class="string">年，阿拉伯花拉子密著《代数学》，此书12世纪传入欧洲，代数学因此得名。</span></span><br><span class="line"><span class="number">850</span><span class="string">年，印度马哈维拉著《计算精华》，率先给出二项式定理的计算公式。</span></span><br><span class="line"><span class="string">约870年，印度出现包括零的十进制数字，后传至阿拉伯变成印度—阿拉伯数字。</span></span><br><span class="line"><span class="number">1100</span><span class="string">年，阿拉伯欧玛尔·海亚姆用圆与抛物线的交点求三次方程的根。</span></span><br><span class="line"><span class="number">1150</span><span class="string">年，印度婆什迦罗对负数有所认识，并接纳了无理数。</span></span><br><span class="line"><span class="number">1202</span><span class="string">年，意大利斐波那契著《算经》，提出“兔子问题”。</span></span><br><span class="line"><span class="number">1247</span><span class="string">年，中国秦九韶著《数书九章》，发现大衍术和秦九韶算法。</span></span><br><span class="line"><span class="number">1482</span><span class="string">年，欧几里得《几何原本》（拉丁文译本）首次出版。</span></span><br><span class="line"><span class="number">1545</span><span class="string">年，意大利卡尔达诺著《大术》，给出三次和四次方程求解法。</span></span><br><span class="line"><span class="number">1572</span><span class="string">年，意大利邦贝利著《代数学》，提出初步的虚数理论。</span></span><br><span class="line"><span class="number">1591</span><span class="string">年，法国韦达讨论方程根与系数的关系，成为现代代数符号之父。</span></span><br><span class="line"><span class="number">1614</span><span class="string">年，英国纳皮尔建立对数理论。</span></span><br><span class="line"><span class="number">1629</span><span class="string">年，荷兰吉拉尔提出代数基本定理。</span></span><br><span class="line"><span class="number">1637</span><span class="string">年，法国笛卡尔创立解析几何学；费尔马提出“费尔马大定理”。</span></span><br><span class="line"><span class="number">1642</span><span class="string">年，法国帕斯卡尔发明世界第一台加减法机械计算机。</span></span><br><span class="line"><span class="number">1657</span><span class="string">年，荷兰惠更斯提出数学期望概念，此前帕斯卡尔和费尔马在通信中已谈及概率问题。</span></span><br><span class="line"><span class="number">1665</span><span class="string">年，英国牛顿研究流数术，他和德国莱布尼茨先后创立微积分，后者发表在先。</span></span><br><span class="line"><span class="number">1666</span><span class="string">年，德国莱布尼茨著《论组合的艺术》，提出数理逻辑的思想。</span></span><br><span class="line"><span class="number">1680</span><span class="string">年，日本关孝和始创“和算”，引入行列式概念。</span></span><br><span class="line"><span class="number">1736</span><span class="string">年，瑞士欧拉解决哥尼斯堡七桥问题，创立图论和几何拓扑学。</span></span><br><span class="line"><span class="number">1777</span><span class="string">年，法国布丰提出“投针问题”，推动概率论的发展。</span></span><br><span class="line"><span class="number">1799</span><span class="string">年，法国蒙日创立画法几何学。</span></span><br><span class="line"><span class="number">1801</span><span class="string">年，德国高斯著《算术研究》，奠定了近代数论的基础。</span></span><br><span class="line"><span class="number">1802</span><span class="string">年，法国蒙蒂克拉和拉朗德合著四卷本《数学史》出版，成为最早系统论述数学史的著作。</span></span><br><span class="line"><span class="number">1810</span><span class="string">年，法国热尔岗编辑出版《纯粹与应用数学年刊》，是最早的专门数学期刊。</span></span><br><span class="line"><span class="number">1812</span><span class="string">年，英国剑桥分析学会成立，是最早的数学分支学会。</span></span><br><span class="line"><span class="number">1824</span><span class="string">年，挪威阿贝尔证明五次或五次以上的一般代数方程不存在根式解。</span></span><br><span class="line"><span class="number">1829</span><span class="string">年，俄国罗巴切夫斯基发表最早的非欧几何论著——《论几何基础》。</span></span><br><span class="line"><span class="number">1832</span><span class="string">年，法国伽罗华彻底解决代数方程根式可解性问题，确立群论的基本概念。</span></span><br><span class="line"><span class="number">1843</span><span class="string">年，英国哈密尔顿发现四元数，首次提出非交换代数的概念。</span></span><br><span class="line"><span class="number">1851</span><span class="string">年，德国黎曼提出“黎曼猜想”。</span></span><br><span class="line"><span class="number">1864</span><span class="string">年，莫斯科数学会成立，是历史上的第一个数学会。</span></span><br><span class="line"><span class="number">1868</span><span class="string">年，意大利贝尔特拉米首先提出伪球面可作为实现双曲几何的模型。</span></span><br><span class="line"><span class="number">1871</span><span class="string">年，德国G．康托尔首次引进无穷集合的概念，随后创立集合论。</span></span><br><span class="line"><span class="number">1872</span><span class="string">年，德国F．克莱因发表《埃尔朗根纲领》，试图以群论为基础统一几何学。</span></span><br><span class="line"><span class="number">1889</span><span class="string">年，意大利皮亚诺建立了自然数的皮亚诺公理系统。</span></span><br><span class="line"><span class="number">1897</span><span class="string">年，第一届国际数学家大会在瑞士苏黎世举行。</span></span><br><span class="line"><span class="number">1898</span><span class="string">年，英国皮尔逊创立数理统计学。</span></span><br><span class="line"><span class="number">1899</span><span class="string">年，德国希尔伯特著《几何基础》，开创公理化方法。</span></span><br><span class="line"><span class="number">1900</span><span class="string">年，希尔伯特在巴黎国际数学家大会上提出了23个著名的数学问题。</span></span><br><span class="line"><span class="number">1903</span><span class="string">年，英国罗素提出“理发师悖论”，引发第三次数学危机。</span></span><br><span class="line"><span class="number">1904</span><span class="string">年，法国庞加莱提出“庞加莱猜想”。</span></span><br><span class="line"><span class="number">1907</span><span class="string">年，德国闵可夫斯基提出四维时空结构，为狭义相对论提供了最适用数学模型。</span></span><br><span class="line"><span class="number">1910</span><span class="string">年，希尔伯特建立了希尔伯特空间，把几何学的维数从有限推进到无限。</span></span><br><span class="line"><span class="number">1931</span><span class="string">年，奥地利哥德尔提出了公理化数学体系的不完备性定理。</span></span><br><span class="line"><span class="number">1933</span><span class="string">年，苏联柯尔莫哥洛夫建立概率论的公理系统。</span></span><br><span class="line"><span class="number">1936</span><span class="string">年，奥斯陆国际数学家大会第一次颁发菲尔兹奖。</span></span><br><span class="line"><span class="number">1938</span><span class="string">年，布尔巴基丛书《数学原理》出版。</span></span><br><span class="line"><span class="number">1944</span><span class="string">年，美籍匈牙利人冯·诺依曼等建立博弈论。</span></span><br><span class="line"><span class="number">1948</span><span class="string">年，美国维纳著《控制论》。</span></span><br><span class="line"><span class="number">1949</span><span class="string">年，英国剑桥大学设计制造出第一台存储程序的电子计算机EDSAC。</span></span><br><span class="line"><span class="number">1976</span><span class="string">年，美国阿佩尔和哈肯利用计算机证明了地图四色定理。</span></span><br><span class="line"><span class="number">1977</span><span class="string">年，曼德勃罗建立分形几何学，维度从整数推进到分数。</span></span><br><span class="line"><span class="number">1978</span><span class="string">年，沃尔夫数学奖开始颁发。</span></span><br><span class="line"><span class="number">1995</span><span class="string">年，英国怀尔斯证明费尔马大定理。</span></span><br><span class="line"><span class="number">2003</span><span class="string">年，阿贝尔奖开始颁发。</span></span><br><span class="line"><span class="number">2006</span><span class="string">年，数学界最终确认俄罗斯的佩雷尔曼证明了庞加莱猜想。</span></span><br></pre></td></tr></table></figure><h2 id="三、人类简史：从动物到上帝–-以-尤瓦尔·赫拉利"><a href="#三、人类简史：从动物到上帝–-以-尤瓦尔·赫拉利" class="headerlink" title="三、人类简史：从动物到上帝–[以]尤瓦尔·赫拉利"></a>三、人类简史：从动物到上帝–[以]尤瓦尔·赫拉利</h2><p><img src="/assets/book/%E4%BA%BA%E7%B1%BB%E7%AE%80%E5%8F%B2.jpg" alt="人类简史"></p><blockquote><p>阅读总结：</p></blockquote><p>自己感觉不太好总结，没有思绪（也是没有读透吧）！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/blogImg/linian6.jpg&quot; alt=&quot;李念&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;2019年6月4日记录将要阅读的书单&quot;&gt;&lt;a href=&quot;#2019年6月4日记录将要阅读的书单&quot; class=&quot;headerlink&quot; title=&quot;2019年6月4日记录将要阅读的书单&quot;&gt;&lt;/a&gt;2019年6月4日记录将要阅读的书单&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;《白夜行》                                                                  –（东野圭吾） 世界上有两样东西不可以直视，一是太阳，二是人心。&lt;/li&gt;
&lt;li&gt;《平凡的世界》                                                              –（路遥） 最平凡的人，也得要为他那个世界的存在而战斗。&lt;/li&gt;
&lt;li&gt;《狼图腾》                                                                  –（姜戎） &lt;/li&gt;
&lt;li&gt;《杀死一只知更鸟》                                                           –（哈珀·李一）&lt;/li&gt;
&lt;li&gt;《人性的弱点》                                                               –（戴尔·卡耐基）&lt;/li&gt;
&lt;li&gt;《三国演义》 &lt;/li&gt;
&lt;li&gt;《明朝那些事儿》                                                              –（当年明月）&lt;/li&gt;
&lt;li&gt;《人类简史：从动物到上帝》&lt;font color=&quot;red&quot;&gt; [已读完·粗读]  &lt;/font&gt;             –（[以]尤瓦尔·赫拉利）&lt;/li&gt;
&lt;li&gt;《未来简史：从智人到智神》                                                     –（[以]尤瓦尔·赫拉利）&lt;/li&gt;
&lt;li&gt;《数学简史》           &lt;font color=&quot;red&quot;&gt;  [已读完·粗读]  &lt;/font&gt;             – （蔡天新）&lt;/li&gt;
&lt;li&gt;《时间简史》                                                                 – （史蒂芬·霍金）&lt;/li&gt;
&lt;li&gt;《算法图解》                                                                 – （[美]巴尔加瓦）   以python语言为基础的算法介绍&lt;/li&gt;
&lt;li&gt;《程序员的自我修养》     &lt;font color=&quot;red&quot;&gt;  [已读完]   &lt;/font&gt;               – （陈逸鹤）&lt;/li&gt;
&lt;li&gt;《增长黑客》                                                                 –（范冰）&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="书单" scheme="https://blogs.zhaozf.site/tags/%E4%B9%A6%E5%8D%95/"/>
    
      <category term="资源" scheme="https://blogs.zhaozf.site/tags/%E8%B5%84%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>Algorithm training</title>
    <link href="https://blogs.zhaozf.site/5fd3f732/"/>
    <id>https://blogs.zhaozf.site/5fd3f732/</id>
    <published>2019-06-02T14:27:46.000Z</published>
    <updated>2019-10-25T10:29:41.687Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一周"><a href="#第一周" class="headerlink" title="第一周"></a>第一周</h1><h3 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h3><ol><li>每周至少完成给定题目中的两道算法题</li><li>围绕每周重点学习的算法知识点，撰写一篇有观点和思考的技术文章（字数不限）<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3></li><li>下面列出的题目中，按照知识点进行了简单分类，但并不意味着使用相应的数据结构或算法一定是解决该题目的最优解，这样分类只是为了方便大家有针对性的练习；</li><li>有的题目可能需要结合多个算法或数据结构进行求解。<h3 id="第一周题目"><a href="#第一周题目" class="headerlink" title="第一周题目"></a>第一周题目</h3><a id="more"></a><h4 id="中文网站："><a href="#中文网站：" class="headerlink" title="中文网站："></a>中文网站：</h4><h5 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h5>简单：<a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list/">https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list/</a><br>简单：<a href="https://leetcode-cn.com/problems/merge-two-sorted-lists">https://leetcode-cn.com/problems/merge-two-sorted-lists</a><br>中等：<a href="https://leetcode-cn.com/problems/swap-nodes-in-pairs/">https://leetcode-cn.com/problems/swap-nodes-in-pairs/</a><br>中等：<a href="https://leetcode-cn.com/problems/linked-list-cycle-ii">https://leetcode-cn.com/problems/linked-list-cycle-ii</a><br>困难：<a href="https://leetcode-cn.com/problems/reverse-nodes-in-k-group/">https://leetcode-cn.com/problems/reverse-nodes-in-k-group/</a></li></ol><h5 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h5><p>简单：<a href="https://leetcode-cn.com/problems/sort-array-by-parity/">https://leetcode-cn.com/problems/sort-array-by-parity/</a><br>简单：<a href="https://leetcode-cn.com/problems/sort-array-by-parity-ii/">https://leetcode-cn.com/problems/sort-array-by-parity-ii/</a><br>中等：<a href="https://leetcode-cn.com/problems/search-in-rotated-sorted-array-ii/">https://leetcode-cn.com/problems/search-in-rotated-sorted-array-ii/</a><br>中等：<a href="https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array/">https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array/</a><br>困难：<a href="https://leetcode-cn.com/problems/search-in-rotated-sorted-array">https://leetcode-cn.com/problems/search-in-rotated-sorted-array</a></p><h5 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h5><p>简单：<a href="https://leetcode-cn.com/problems/valid-parentheses/">https://leetcode-cn.com/problems/valid-parentheses/</a><br>中等：<a href="https://leetcode-cn.com/problems/next-greater-element-ii/">https://leetcode-cn.com/problems/next-greater-element-ii/</a><br>困难：<a href="https://leetcode-cn.com/problems/maximum-frequency-stack/">https://leetcode-cn.com/problems/maximum-frequency-stack/</a></p><h5 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h5><p>简单：<a href="https://leetcode-cn.com/problems/longest-univalue-path/">https://leetcode-cn.com/problems/longest-univalue-path/</a><br>中等：<a href="https://leetcode-cn.com/problems/partition-to-k-equal-sum-subsets/">https://leetcode-cn.com/problems/partition-to-k-equal-sum-subsets/</a><br>困难：<a href="https://leetcode-cn.com/problems/special-binary-string/">https://leetcode-cn.com/problems/special-binary-string/</a></p><h5 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h5><p>简单：<a href="https://leetcode-cn.com/problems/valid-anagram/">https://leetcode-cn.com/problems/valid-anagram/</a><br>中等：<a href="https://leetcode-cn.com/problems/wiggle-sort-ii/">https://leetcode-cn.com/problems/wiggle-sort-ii/</a><br>困难：<a href="https://leetcode-cn.com/problems/maximum-gap/">https://leetcode-cn.com/problems/maximum-gap/</a></p><h5 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h5><p>简单：<a href="https://leetcode-cn.com/problems/arranging-coins/">https://leetcode-cn.com/problems/arranging-coins/</a><br>中等：<a href="https://leetcode-cn.com/problems/powx-n/">https://leetcode-cn.com/problems/powx-n/</a><br>困难：<a href="https://leetcode-cn.com/problems/dungeon-game/">https://leetcode-cn.com/problems/dungeon-game/</a></p><h4 id="英文网站："><a href="#英文网站：" class="headerlink" title="英文网站："></a>英文网站：</h4><h5 id="链表-1"><a href="#链表-1" class="headerlink" title="链表"></a>链表</h5><p>简单：<a href="https://leetcode.com/problems/remove-duplicates-from-sorted-list/">https://leetcode.com/problems/remove-duplicates-from-sorted-list/</a><br>简单：<a href="https://leetcode.com/problems/merge-two-sorted-lists">https://leetcode.com/problems/merge-two-sorted-lists</a><br>中等：<a href="https://leetcode.com/problems/swap-nodes-in-pairs/">https://leetcode.com/problems/swap-nodes-in-pairs/</a><br>中等：<a href="https://leetcode.com/problems/linked-list-cycle-ii">https://leetcode.com/problems/linked-list-cycle-ii</a><br>困难：<a href="https://leetcode.com/problems/reverse-nodes-in-k-group/">https://leetcode.com/problems/reverse-nodes-in-k-group/</a></p><h5 id="数组-1"><a href="#数组-1" class="headerlink" title="数组"></a>数组</h5><p>简单：<a href="https://leetcode.com/problems/sort-array-by-parity/">https://leetcode.com/problems/sort-array-by-parity/</a><br>简单：<a href="https://leetcode.com/problems/sort-array-by-parity-ii/">https://leetcode.com/problems/sort-array-by-parity-ii/</a><br>中等：<a href="https://leetcode.com/problems/search-in-rotated-sorted-array-ii/">https://leetcode.com/problems/search-in-rotated-sorted-array-ii/</a><br>中等：<a href="https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/">https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/</a><br>困难：<a href="https://leetcode.com/problems/search-in-rotated-sorted-array">https://leetcode.com/problems/search-in-rotated-sorted-array</a></p><h5 id="栈-1"><a href="#栈-1" class="headerlink" title="栈"></a>栈</h5><p>简单：<a href="https://leetcode.com/problems/valid-parentheses/">https://leetcode.com/problems/valid-parentheses/</a><br>中等：<a href="https://leetcode.com/problems/next-greater-element-ii/">https://leetcode.com/problems/next-greater-element-ii/</a><br>困难：<a href="https://leetcode.com/problems/maximum-frequency-stack/">https://leetcode.com/problems/maximum-frequency-stack/</a></p><h5 id="递归-1"><a href="#递归-1" class="headerlink" title="递归"></a>递归</h5><p>简单：<a href="https://leetcode.com/problems/longest-univalue-path/">https://leetcode.com/problems/longest-univalue-path/</a><br>中等：<a href="https://leetcode.com/problems/partition-to-k-equal-sum-subsets/">https://leetcode.com/problems/partition-to-k-equal-sum-subsets/</a><br>困难：<a href="https://leetcode.com/problems/special-binary-string/">https://leetcode.com/problems/special-binary-string/</a></p><h5 id="排序-1"><a href="#排序-1" class="headerlink" title="排序"></a>排序</h5><p>简单：<a href="https://leetcode.com/problems/valid-anagram/">https://leetcode.com/problems/valid-anagram/</a><br>中等：<a href="https://leetcode.com/problems/wiggle-sort-ii/">https://leetcode.com/problems/wiggle-sort-ii/</a><br>困难：<a href="https://leetcode.com/problems/maximum-gap/">https://leetcode.com/problems/maximum-gap/</a></p><h5 id="二分查找-1"><a href="#二分查找-1" class="headerlink" title="二分查找"></a>二分查找</h5><p>简单：<a href="https://leetcode.com/problems/arranging-coins/">https://leetcode.com/problems/arranging-coins/</a><br>中等：<a href="https://leetcode.com/problems/powx-n/">https://leetcode.com/problems/powx-n/</a><br>困难：<a href="https://leetcode.com/problems/dungeon-game/">https://leetcode.com/problems/dungeon-game/</a></p><h1 id="第二周"><a href="#第二周" class="headerlink" title="第二周"></a>第二周</h1><h3 id="本周重点学习知识点"><a href="#本周重点学习知识点" class="headerlink" title="本周重点学习知识点"></a>本周重点学习知识点</h3><p>跳表、散列表、哈希算法、二叉树、红黑树</p><h3 id="要求-1"><a href="#要求-1" class="headerlink" title="要求"></a>要求</h3><ol><li>每周至少完成给定题目中的两道算法题</li><li>围绕每周重点学习的算法知识点，撰写一篇有观点和思考的技术文章（字数不限）<h3 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h3></li><li>下面列出的题目中，按照知识点进行了简单分类，但并不意味着使用相应的数据结构或算法一定是解决该题目的最优解，这样分类只是为了方便大家有针对性的练习；</li><li>有的题目可能需要结合多个算法或数据结构进行求解。<h3 id="第二周题目"><a href="#第二周题目" class="headerlink" title="第二周题目"></a>第二周题目</h3><h4 id="中文网站：-1"><a href="#中文网站：-1" class="headerlink" title="中文网站："></a>中文网站：</h4><h5 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h5>简单：<a href="https://leetcode-cn.com/problems/valid-anagram/">https://leetcode-cn.com/problems/valid-anagram/</a><br>中等：<a href="https://leetcode-cn.com/problems/top-k-frequent-words">https://leetcode-cn.com/problems/top-k-frequent-words</a><br>中等：<a href="https://leetcode-cn.com/problems/find-duplicate-file-in-system/">https://leetcode-cn.com/problems/find-duplicate-file-in-system/</a><br>困难：<a href="https://leetcode-cn.com/problems/substring-with-concatenation-of-all-words/">https://leetcode-cn.com/problems/substring-with-concatenation-of-all-words/</a><br>困难：<a href="https://leetcode-cn.com/problems/number-of-atoms/">https://leetcode-cn.com/problems/number-of-atoms/</a></li></ol><h5 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h5><p>简单：<a href="https://leetcode-cn.com/problems/second-minimum-node-in-a-binary-tree/">https://leetcode-cn.com/problems/second-minimum-node-in-a-binary-tree/</a><br>中等：<a href="https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/">https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/</a><br>中等：<a href="https://leetcode-cn.com/problems/all-nodes-distance-k-in-binary-tree/">https://leetcode-cn.com/problems/all-nodes-distance-k-in-binary-tree/</a><br>困难：<a href="https://leetcode-cn.com/problems/count-of-smaller-numbers-after-self/">https://leetcode-cn.com/problems/count-of-smaller-numbers-after-self/</a><br>困难：<a href="https://leetcode-cn.com/problems/binary-tree-maximum-path-sum/">https://leetcode-cn.com/problems/binary-tree-maximum-path-sum/</a></p><h5 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h5><p>简单：<a href="https://leetcode-cn.com/problems/minimum-distance-between-bst-nodes/">https://leetcode-cn.com/problems/minimum-distance-between-bst-nodes/</a><br>中等：<a href="https://leetcode-cn.com/problems/range-sum-of-bst/">https://leetcode-cn.com/problems/range-sum-of-bst/</a><br>中等：<a href="https://leetcode-cn.com/problems/contains-duplicate-iii/">https://leetcode-cn.com/problems/contains-duplicate-iii/</a><br>困难：<a href="https://leetcode-cn.com/problems/count-of-range-sum/">https://leetcode-cn.com/problems/count-of-range-sum/</a><br>困难：<a href="https://leetcode-cn.com/problems/count-of-smaller-numbers-after-self/">https://leetcode-cn.com/problems/count-of-smaller-numbers-after-self/</a></p><h4 id="英文网站：-1"><a href="#英文网站：-1" class="headerlink" title="英文网站："></a>英文网站：</h4><h5 id="哈希表-1"><a href="#哈希表-1" class="headerlink" title="哈希表"></a>哈希表</h5><p>简单：<a href="https://leetcode.com/problems/valid-anagram/">https://leetcode.com/problems/valid-anagram/</a><br>中等：<a href="https://leetcode.com/problems/top-k-frequent-words">https://leetcode.com/problems/top-k-frequent-words</a><br>中等：<a href="https://leetcode.com/problems/find-duplicate-file-in-system/">https://leetcode.com/problems/find-duplicate-file-in-system/</a><br>困难：<a href="https://leetcode.com/problems/substring-with-concatenation-of-all-words/">https://leetcode.com/problems/substring-with-concatenation-of-all-words/</a><br>困难：<a href="https://leetcode.com/problems/number-of-atoms/">https://leetcode.com/problems/number-of-atoms/</a></p><h5 id="二叉树-1"><a href="#二叉树-1" class="headerlink" title="二叉树"></a>二叉树</h5><p>简单：<a href="https://leetcode.com/problems/second-minimum-node-in-a-binary-tree/">https://leetcode.com/problems/second-minimum-node-in-a-binary-tree/</a><br>中等：<a href="https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/">https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/</a><br>中等：<a href="https://leetcode.com/problems/all-nodes-distance-k-in-binary-tree/">https://leetcode.com/problems/all-nodes-distance-k-in-binary-tree/</a><br>困难：<a href="https://leetcode.com/problems/count-of-smaller-numbers-after-self/">https://leetcode.com/problems/count-of-smaller-numbers-after-self/</a><br>困难：<a href="https://leetcode.com/problems/binary-tree-maximum-path-sum/">https://leetcode.com/problems/binary-tree-maximum-path-sum/</a></p><h5 id="二叉搜索树-1"><a href="#二叉搜索树-1" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h5><p>简单：<a href="https://leetcode.com/problems/minimum-distance-between-bst-nodes/">https://leetcode.com/problems/minimum-distance-between-bst-nodes/</a><br>中等：<a href="https://leetcode.com/problems/range-sum-of-bst/">https://leetcode.com/problems/range-sum-of-bst/</a><br>中等：<a href="https://leetcode.com/problems/contains-duplicate-iii/">https://leetcode.com/problems/contains-duplicate-iii/</a><br>困难：<a href="https://leetcode.com/problems/count-of-range-sum/">https://leetcode.com/problems/count-of-range-sum/</a><br>困难：<a href="https://leetcode.com/problems/count-of-smaller-numbers-after-self/">https://leetcode.com/problems/count-of-smaller-numbers-after-self/</a></p><h1 id="第三周"><a href="#第三周" class="headerlink" title="第三周"></a>第三周</h1><h3 id="本周重点学习知识点-1"><a href="#本周重点学习知识点-1" class="headerlink" title="本周重点学习知识点"></a>本周重点学习知识点</h3><p>递归树、堆和排序、图、深度和广度优先搜索、字符串匹配</p><h3 id="要求-2"><a href="#要求-2" class="headerlink" title="要求"></a>要求</h3><ol><li>每周至少完成给定题目中的两道算法题</li><li>围绕每周重点学习的算法知识点，撰写一篇有观点和思考的技术文章（字数不限）<h3 id="注意事项-2"><a href="#注意事项-2" class="headerlink" title="注意事项"></a>注意事项</h3></li><li>下面列出的题目中，按照知识点进行了简单分类，但并不意味着使用相应的数据结构或算法一定是解决该题目的最优解，这样分类只是为了方便大家有针对性的练习；</li><li>有的题目可能需要结合多个算法或数据结构进行求解。<h3 id="第三周题目"><a href="#第三周题目" class="headerlink" title="第三周题目"></a>第三周题目</h3><h4 id="中文网站：-2"><a href="#中文网站：-2" class="headerlink" title="中文网站："></a>中文网站：</h4><h5 id="图"><a href="#图" class="headerlink" title="图"></a>图</h5>简单：<a href="https://leetcode-cn.com/problems/find-the-town-judge/">https://leetcode-cn.com/problems/find-the-town-judge/</a><br>中等：<a href="https://leetcode-cn.com/problems/course-schedule-ii">https://leetcode-cn.com/problems/course-schedule-ii</a><br>困难：<a href="https://leetcode-cn.com/problems/minimize-malware-spread-ii/">https://leetcode-cn.com/problems/minimize-malware-spread-ii/</a></li></ol><h5 id="堆和排序"><a href="#堆和排序" class="headerlink" title="堆和排序"></a>堆和排序</h5><p>简单：<a href="https://leetcode-cn.com/problems/kth-largest-element-in-a-stream/">https://leetcode-cn.com/problems/kth-largest-element-in-a-stream/</a><br>中等：<a href="https://leetcode-cn.com/problems/find-k-pairs-with-smallest-sums/">https://leetcode-cn.com/problems/find-k-pairs-with-smallest-sums/</a><br>困难：<a href="https://leetcode-cn.com/problems/find-median-from-data-stream/">https://leetcode-cn.com/problems/find-median-from-data-stream/</a></p><h5 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h5><p>简单：<a href="https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/">https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/</a><br>中等：<a href="https://leetcode-cn.com/problems/number-of-islands/">https://leetcode-cn.com/problems/number-of-islands/</a><br>中等：<a href="https://leetcode-cn.com/problems/find-eventual-safe-states/">https://leetcode-cn.com/problems/find-eventual-safe-states/</a><br>困难：<a href="https://leetcode-cn.com/problems/longest-increasing-path-in-a-matrix/">https://leetcode-cn.com/problems/longest-increasing-path-in-a-matrix/</a><br>困难：<a href="https://leetcode-cn.com/problems/making-a-large-island/">https://leetcode-cn.com/problems/making-a-large-island/</a></p><h5 id="BFS"><a href="#BFS" class="headerlink" title="BFS"></a>BFS</h5><p>简单：<a href="https://leetcode-cn.com/problems/n-ary-tree-level-order-traversal/">https://leetcode-cn.com/problems/n-ary-tree-level-order-traversal/</a><br>中等：<a href="https://leetcode-cn.com/problems/minesweeper/">https://leetcode-cn.com/problems/minesweeper/</a><br>中等：<a href="https://leetcode-cn.com/problems/minimum-height-trees/">https://leetcode-cn.com/problems/minimum-height-trees/</a><br>困难：<a href="https://leetcode-cn.com/problems/bus-routes/">https://leetcode-cn.com/problems/bus-routes/</a></p><h4 id="英文网站：-2"><a href="#英文网站：-2" class="headerlink" title="英文网站："></a>英文网站：</h4><h5 id="图-1"><a href="#图-1" class="headerlink" title="图"></a>图</h5><p>简单：<a href="https://leetcode.com/problems/find-the-town-judge/">https://leetcode.com/problems/find-the-town-judge/</a><br>中等：<a href="https://leetcode.com/problems/course-schedule-ii">https://leetcode.com/problems/course-schedule-ii</a><br>困难：<a href="https://leetcode.com/problems/minimize-malware-spread-ii/">https://leetcode.com/problems/minimize-malware-spread-ii/</a></p><h5 id="堆和排序-1"><a href="#堆和排序-1" class="headerlink" title="堆和排序"></a>堆和排序</h5><p>简单：<a href="https://leetcode.com/problems/kth-largest-element-in-a-stream/">https://leetcode.com/problems/kth-largest-element-in-a-stream/</a><br>中等：<a href="https://leetcode.com/problems/find-k-pairs-with-smallest-sums/">https://leetcode.com/problems/find-k-pairs-with-smallest-sums/</a><br>困难：<a href="https://leetcode.com/problems/find-median-from-data-stream/">https://leetcode.com/problems/find-median-from-data-stream/</a></p><h5 id="DFS-1"><a href="#DFS-1" class="headerlink" title="DFS"></a>DFS</h5><p>简单：<a href="https://leetcode.com/problems/maximum-depth-of-binary-tree/">https://leetcode.com/problems/maximum-depth-of-binary-tree/</a><br>中等：<a href="https://leetcode.com/problems/number-of-islands/">https://leetcode.com/problems/number-of-islands/</a><br>中等：<a href="https://leetcode.com/problems/find-eventual-safe-states/">https://leetcode.com/problems/find-eventual-safe-states/</a><br>困难：<a href="https://leetcode.com/problems/longest-increasing-path-in-a-matrix/">https://leetcode.com/problems/longest-increasing-path-in-a-matrix/</a><br>困难：<a href="https://leetcode.com/problems/making-a-large-island/">https://leetcode.com/problems/making-a-large-island/</a></p><h5 id="BFS-1"><a href="#BFS-1" class="headerlink" title="BFS"></a>BFS</h5><p>简单：<a href="https://leetcode.com/problems/n-ary-tree-level-order-traversal/">https://leetcode.com/problems/n-ary-tree-level-order-traversal/</a><br>中等：<a href="https://leetcode.com/problems/minesweeper/">https://leetcode.com/problems/minesweeper/</a><br>中等：<a href="https://leetcode.com/problems/minimum-height-trees/">https://leetcode.com/problems/minimum-height-trees/</a><br>困难：<a href="https://leetcode.com/problems/bus-routes/">https://leetcode.com/problems/bus-routes/</a></p><h1 id="第四周"><a href="#第四周" class="headerlink" title="第四周"></a>第四周</h1><h3 id="本周重点学习知识点-2"><a href="#本周重点学习知识点-2" class="headerlink" title="本周重点学习知识点"></a>本周重点学习知识点</h3><p>Trie树、AC自动机、贪心算法、分治算法、回溯算法、动态规划</p><h3 id="要求-3"><a href="#要求-3" class="headerlink" title="要求"></a>要求</h3><ol><li>每周至少完成给定题目中的两道算法题</li><li>围绕每周重点学习的算法知识点，撰写一篇有观点和思考的技术文章（字数不限）<h3 id="注意事项-3"><a href="#注意事项-3" class="headerlink" title="注意事项"></a>注意事项</h3></li><li>下面列出的题目中，按照知识点进行了简单分类，但并不意味着使用相应的数据结构或算法一定是解决该题目的最优解，这样分类只是为了方便大家有针对性的练习；</li><li>有的题目可能需要结合多个算法或数据结构进行求解。<h3 id="第四周题目"><a href="#第四周题目" class="headerlink" title="第四周题目"></a>第四周题目</h3><h4 id="中文网站：-3"><a href="#中文网站：-3" class="headerlink" title="中文网站："></a>中文网站：</h4><h5 id="Trie树"><a href="#Trie树" class="headerlink" title="Trie树"></a>Trie树</h5>简单：<a href="https://leetcode-cn.com/problems/longest-word-in-dictionary/">https://leetcode-cn.com/problems/longest-word-in-dictionary/</a><br>中等：<a href="https://leetcode-cn.com/problems/add-and-search-word-data-structure-design/">https://leetcode-cn.com/problems/add-and-search-word-data-structure-design/</a><br>困难：<a href="https://leetcode-cn.com/problems/word-search-ii/">https://leetcode-cn.com/problems/word-search-ii/</a></li></ol><h5 id="分治算法"><a href="#分治算法" class="headerlink" title="分治算法"></a>分治算法</h5><p>简单：<a href="https://leetcode-cn.com/problems/majority-element/">https://leetcode-cn.com/problems/majority-element/</a><br>中等：<a href="https://leetcode-cn.com/problems/different-ways-to-add-parentheses/">https://leetcode-cn.com/problems/different-ways-to-add-parentheses/</a><br>困难：<a href="https://leetcode-cn.com/problems/burst-balloons/">https://leetcode-cn.com/problems/burst-balloons/</a></p><h5 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h5><p>简单：<a href="https://leetcode-cn.com/problems/assign-cookies/">https://leetcode-cn.com/problems/assign-cookies/</a><br>中等：<a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/">https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/</a><br>困难：<a href="https://leetcode-cn.com/problems/ipo/">https://leetcode-cn.com/problems/ipo/</a></p><h5 id="回溯算法"><a href="#回溯算法" class="headerlink" title="回溯算法"></a>回溯算法</h5><p>简单：<a href="https://leetcode-cn.com/problems/letter-case-permutation/">https://leetcode-cn.com/problems/letter-case-permutation/</a><br>中等：<a href="https://leetcode-cn.com/problems/add-and-search-word-data-structure-design/">https://leetcode-cn.com/problems/add-and-search-word-data-structure-design/</a><br>困难：<a href="https://leetcode-cn.com/problems/n-queens/">https://leetcode-cn.com/problems/n-queens/</a></p><h5 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h5><p>简单：<a href="https://leetcode-cn.com/problems/min-cost-climbing-stairs/">https://leetcode-cn.com/problems/min-cost-climbing-stairs/</a><br>中等：<a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/">https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/</a><br>困难：<a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iv/">https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iv/</a><br>困难：<a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iii/">https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iii/</a><br>困难：<a href="https://leetcode-cn.com/problems/edit-distance/">https://leetcode-cn.com/problems/edit-distance/</a></p><h4 id="英文网站：-3"><a href="#英文网站：-3" class="headerlink" title="英文网站："></a>英文网站：</h4><h5 id="Trie树-1"><a href="#Trie树-1" class="headerlink" title="Trie树"></a>Trie树</h5><p>简单：<a href="https://leetcode.com/problems/longest-word-in-dictionary/">https://leetcode.com/problems/longest-word-in-dictionary/</a><br>中等：<a href="https://leetcode.com/problems/add-and-search-word-data-structure-design/">https://leetcode.com/problems/add-and-search-word-data-structure-design/</a><br>困难：<a href="https://leetcode.com/problems/word-search-ii/">https://leetcode.com/problems/word-search-ii/</a></p><h5 id="分治算法-1"><a href="#分治算法-1" class="headerlink" title="分治算法"></a>分治算法</h5><p>简单：<a href="https://leetcode.com/problems/majority-element/">https://leetcode.com/problems/majority-element/</a><br>中等：<a href="https://leetcode.com/problems/different-ways-to-add-parentheses/">https://leetcode.com/problems/different-ways-to-add-parentheses/</a><br>困难：<a href="https://leetcode.com/problems/burst-balloons/">https://leetcode.com/problems/burst-balloons/</a></p><h5 id="贪心算法-1"><a href="#贪心算法-1" class="headerlink" title="贪心算法"></a>贪心算法</h5><p>简单：<a href="https://leetcode.com/problems/assign-cookies/">https://leetcode.com/problems/assign-cookies/</a><br>中等：<a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/">https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/</a><br>困难：<a href="https://leetcode.com/problems/ipo/">https://leetcode.com/problems/ipo/</a></p><h5 id="回溯算法-1"><a href="#回溯算法-1" class="headerlink" title="回溯算法"></a>回溯算法</h5><p>简单：<a href="https://leetcode.com/problems/letter-case-permutation/">https://leetcode.com/problems/letter-case-permutation/</a><br>中等：<a href="https://leetcode.com/problems/add-and-search-word-data-structure-design/">https://leetcode.com/problems/add-and-search-word-data-structure-design/</a><br>困难：<a href="https://leetcode.com/problems/n-queens/">https://leetcode.com/problems/n-queens/</a></p><h5 id="动态规划-1"><a href="#动态规划-1" class="headerlink" title="动态规划"></a>动态规划</h5><p>简单：<a href="https://leetcode.com/problems/min-cost-climbing-stairs/">https://leetcode.com/problems/min-cost-climbing-stairs/</a><br>中等：<a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/">https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/</a><br>困难：<a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/">https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/</a><br>困难：<a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/">https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/</a><br>困难：<a href="https://leetcode.com/problems/edit-distance/">https://leetcode.com/problems/edit-distance/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第一周&quot;&gt;&lt;a href=&quot;#第一周&quot; class=&quot;headerlink&quot; title=&quot;第一周&quot;&gt;&lt;/a&gt;第一周&lt;/h1&gt;&lt;h3 id=&quot;要求&quot;&gt;&lt;a href=&quot;#要求&quot; class=&quot;headerlink&quot; title=&quot;要求&quot;&gt;&lt;/a&gt;要求&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;每周至少完成给定题目中的两道算法题&lt;/li&gt;
&lt;li&gt;围绕每周重点学习的算法知识点，撰写一篇有观点和思考的技术文章（字数不限）&lt;h3 id=&quot;注意事项&quot;&gt;&lt;a href=&quot;#注意事项&quot; class=&quot;headerlink&quot; title=&quot;注意事项&quot;&gt;&lt;/a&gt;注意事项&lt;/h3&gt;&lt;/li&gt;
&lt;li&gt;下面列出的题目中，按照知识点进行了简单分类，但并不意味着使用相应的数据结构或算法一定是解决该题目的最优解，这样分类只是为了方便大家有针对性的练习；&lt;/li&gt;
&lt;li&gt;有的题目可能需要结合多个算法或数据结构进行求解。&lt;h3 id=&quot;第一周题目&quot;&gt;&lt;a href=&quot;#第一周题目&quot; class=&quot;headerlink&quot; title=&quot;第一周题目&quot;&gt;&lt;/a&gt;第一周题目&lt;/h3&gt;
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://blogs.zhaozf.site/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>利用github pages搭建hexo静态博客过程！</title>
    <link href="https://blogs.zhaozf.site/6944216c/"/>
    <id>https://blogs.zhaozf.site/6944216c/</id>
    <published>2019-05-22T04:35:22.000Z</published>
    <updated>2020-05-01T16:02:49.319Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/blogImg/linian.jpg"></p><h1 id="一、注册github账号"><a href="#一、注册github账号" class="headerlink" title="一、注册github账号"></a>一、注册github账号</h1><ol><li>搜索Github官网进入，如果你已经有账号密码，那么点击右上角的sign in直接登录。</li><li>如果没有点击sign up进行注册，填写昵称（用户名）、注册邮箱和密码。</li><li>注册成功之后在Github首页右上角头像左侧加号点选择 New repositor(新存储库)进行创建一个代码仓库。<br>注意：仓库的名字一定是 yourname.github.io 其他默认即可。</li></ol><a id="more"></a><ol start="4"><li>创建完成之后，点击Settings查看github pages是否启用<br><img src="/assets/blogImg/20190522125619.png"></li><li>之后就可以通过 <a href="https://yourname.github.io/">https://yourname.github.io</a> 进行访问了。</li></ol><h1 id="二、搭建hexo静态博客系统"><a href="#二、搭建hexo静态博客系统" class="headerlink" title="二、搭建hexo静态博客系统"></a>二、搭建hexo静态博客系统</h1><ol><li>hexo需要node.js的支持，首先<a href="https://nodejs.org/en/">下载</a>node.js的安装包。node.js的安装包下载完成之后，一路下一步就可以了。检测node.js是否正确安装可以进入cmd命令行输入 node –version 查看版本。</li><li><a href="https://git-scm.com/download/">下载git</a> 也是一直下一步就可以了。git的用法参见廖雪峰的<a href="https://www.liaoxuefeng.com/wiki/896043488029600">git教程</a></li><li>在你需要安装Hexo的目录下右键选择 Git Bash<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> <span class="built_in">cd</span> d:/hexo</span><br><span class="line"><span class="variable">$</span> npm install hexo<span class="literal">-cli</span> <span class="literal">-g</span></span><br><span class="line"><span class="variable">$</span> hexo init blog</span><br><span class="line"><span class="variable">$</span> <span class="built_in">cd</span> blog</span><br><span class="line"><span class="variable">$</span> npm install</span><br><span class="line"></span><br></pre></td></tr></table></figure>新建完成后，指定文件夹目录下有：</li></ol><ul><li>node_modules: 依赖包</li><li>public：存放生成的页面</li><li>scaffolds：生成文章的一些模板</li><li>source：用来存放你的文章</li><li>themes：主题</li><li>_config.yml: 博客的配置文件</li></ul><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g # 或者hexo <span class="keyword">generate</span> 是生成静态文件，会在当前目录下生成一个新的叫做public的文件夹</span><br><span class="line">$ hexo s # 或者hexo server，可以在http:<span class="comment">//localhost:4000/ 查看。  hexo server (hexo s) 是启动本地web服务，用于博客的预览</span></span><br></pre></td></tr></table></figure><p>另外还有其他几个常用命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo new <span class="string">&quot;postName&quot;</span> <span class="comment">#新建文章</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo new page <span class="string">&quot;pageName&quot;</span> <span class="comment">#新建页面</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo d -g <span class="comment">#生成部署</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo s -g <span class="comment">#生成预览</span></span></span><br></pre></td></tr></table></figure><p>现在我们打开<a href="http://localhost:4000/">http://localhost:4000/</a> 已经可以看到一篇内置的blog了。</p><h1 id="三、hexo主题"><a href="#三、hexo主题" class="headerlink" title="三、hexo主题"></a>三、hexo主题</h1><ol><li>我这里用的主题是yilia，安装完成的默认主题是landscape.    <figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>hexo clean <span class="comment">#清除之前生成的东西</span></span><br><span class="line"><span class="variable">$ </span>git clone <span class="symbol">https:</span>/<span class="regexp">/github.com/litten</span><span class="regexp">/hexo-theme-yilia.git themes/yilia</span></span><br></pre></td></tr></table></figure></li><li>修改Hexo目录下的_config.yml配置文件中的theme属性，将其设置为yilia。</li><li>更新主题<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> <span class="built_in">cd</span> themes/yilia</span><br><span class="line"><span class="variable">$</span> git pull</span><br><span class="line"><span class="variable">$</span> hexo g <span class="comment"># 生成</span></span><br><span class="line"><span class="variable">$</span> hexo s <span class="comment"># 启动本地web服务器</span></span><br></pre></td></tr></table></figure>打开<a href="http://localhost:4000/">http://localhost:4000/</a> ，你会看到我们一个新的主题。<blockquote><p>yilia 主题配置参考<a href="https://github.com/litten/hexo-theme-yilia">官方文档</a><br><strong><em>Hexo主题配置(根目录_config.yml文件)</em></strong></p></blockquote></li></ol><p>更多主题参看<a href="https://hexo.io/themes/">hexo主题官网</a></p><h1 id="四、hexo插件"><a href="#四、hexo插件" class="headerlink" title="四、hexo插件"></a>四、hexo插件</h1><ol><li>建立RSS订阅需要安装<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm <span class="keyword">install</span> hexo-generator-feed <span class="comment">--save</span></span><br></pre></td></tr></table></figure></li><li>1 在博客工程文件根目录下_config.yml文件中添加如下内容<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="attr">plugins:</span></span><br><span class="line">    <span class="string">hexo-generator-feed</span></span><br><span class="line"><span class="comment">#Feed Atom</span></span><br><span class="line"><span class="attr">feed:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">atom</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">atom.xml</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">20</span></span><br></pre></td></tr></table></figure></li><li>2 打开主题配置文件_config.yml,搜索rss，添加配置<figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rss: /<span class="built_in">atom</span>.xml</span><br></pre></td></tr></table></figure><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>hexo g</span><br><span class="line"><span class="variable">$ </span>hexo s</span><br></pre></td></tr></table></figure></li><li>3 之后浏览器预览就可以了。</li><li>建立站点地图需要安装<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm <span class="keyword">install</span> hexo-generator-sitemap <span class="comment">--save</span></span><br></pre></td></tr></table></figure>更多插件参考<a href="https://hexo.io/plugins/">插件官网</a>.</li></ol><blockquote><p>想要给网站添加图片？请把图片放入根目录 source\ 下建立一个文件夹，当你执行hexo g的时候此文件夹自动生成到public中。</p></blockquote><h1 id="五、部署hexo"><a href="#五、部署hexo" class="headerlink" title="五、部署hexo"></a>五、部署hexo</h1><ol><li>使用命令hexo deploy进行部署。它可以部署很多平台，具体请参考<a href="https://hexo.io/docs/deployment.html">官方文档</a> 。我这里以部署到git为例：</li><li>安装 hexo-deployer-git.<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm <span class="keyword">install</span> hexo-deployer-git <span class="comment">--save</span></span><br></pre></td></tr></table></figure></li><li>编辑 _config.yml 文件:<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">deploy</span>:</span><br><span class="line">  <span class="attribute">type</span>: git</span><br><span class="line">  <span class="attribute">repo</span>: git<span class="variable">@github</span>.<span class="attribute">com</span>:zhaozhifu0/zhaozhifu0.github.io.git  #这里改成你自己的</span><br><span class="line">  <span class="attribute">branch</span>: master  </span><br></pre></td></tr></table></figure></li><li>执行hexo deploy命令进行上传部署。<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>hexo deploy <span class="comment">#或者hexo d(hexo deploy的简写) 再或者hexo d -g (生成部署)</span></span><br></pre></td></tr></table></figure></li><li>最后访问<a href="https://yourname.github.io/">https://yourname.github.io</a> 就可以查看博客的内容了。还可以通过hexo new “postName” 命令创建新文章。</li><li>部署到coding上：</li></ol><p>(1)在coding上创建一个项目，进入项目里“代码”页面，点击“一键开启静态 Pages”，然后上传项目代码。<br>(2)在上传之前打开 Hexo 博客主配置文件 _config.yml，找到 deploy 属性，作如下配置：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">deploy</span>:</span><br><span class="line">  <span class="attribute">type</span>: git</span><br><span class="line">  <span class="attribute">repo</span>: </span><br><span class="line">      <span class="attribute">github</span>: git<span class="variable">@github</span>.<span class="attribute">com</span>:zhaozhifu0/zhaozhifu0.github.io.git</span><br><span class="line">      <span class="attribute">coding</span>: git<span class="variable">@git</span>.dev.tencent.<span class="attribute">com</span>:zhaozhifu/zhaozhifu.git</span><br><span class="line">  <span class="attribute">branch</span>: master</span><br></pre></td></tr></table></figure><p>(3)上传之后就可以通过<user_name>.coding.me 访问你的网站。<br>(4)绑定自定义域名:</p><blockquote><p>Coding Pages 支持绑定自定义域名，域名理论上不用备案，但是根据国家规定建议进行ICP备案。允许以下自定义域名格式：<br>顶级域名 example.com<br>www 二级域名 <a href="http://www.example.com/">www.example.com</a><br>二级域名 blog.example.com</p></blockquote><p>(5)进入域名服务商提供的域名管理面板，选中欲绑定的域名，进入解析设置，点击”添加解析”。<br>(6)添加 CNAME 记录，在项目设置中绑定域名下面有行小字 ： 绑定前请在域名 DNS 设置中添加一条 CNAME 记录指向 xxxx.coding.me。将@和www记录都解析到这个即可。<br>(7)在”Pages 服务”设置页中绑定自定义域名，如果配置 DNS 解析时域名前缀为 ，绑定自定义域名需要填写 www 前缀。<br>(8)如果绑定后访问域名看到404相关提示，说明是域名配置是存在问题的，请自行检查DNS配置是否正确。</p><h1 id="六、配置域名"><a href="#六、配置域名" class="headerlink" title="六、配置域名"></a>六、配置域名</h1><ol><li>购买域名</li><li>域名注册提供商那里配置DNS解析， 参考<a href="https://help.github.com/en/articles/setting-up-an-apex-domain">官方文档</a></li><li>到github page配置站点域名，参考 ：<a href="https://help.github.com/en/articles/securing-your-github-pages-site-with-https">Securing your GitHub Pages site with HTTPS</a></li><li>最后可以用你的域名访问了。</li></ol><h1 id="七、跳过配置显示demo"><a href="#七、跳过配置显示demo" class="headerlink" title="七、跳过配置显示demo"></a>七、跳过配置显示demo</h1><ol><li>使用Hexo提供的跳过渲染配置，适用于整个目录的设置。</li><li>打开博客根目录_config.yml，找到其中skip_render项，这个项目用来配置/source/中需要跳过渲染的文件或目录，例如希望跳过/source/photowall/里的所有文件渲染，可以配置为：</li></ol><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">skip_render:</span> photowall<span class="comment">/**</span></span><br></pre></td></tr></table></figure><ol start="3"><li>给单个文件添加不应用模板的标记，适用于个别特殊文件的处理。例如我们的网站如果要使用百度统计，往往需要在根目录放一个html格式的验证文件，这个文件默认也会经过用主题模板渲染，避免渲染的办法就是在文件头部添加如下内容：</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">layout:</span> <span class="literal">false</span>     <span class="comment">#添加layout跳过编译</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">利用github</span> <span class="string">pages搭建hexo静态博客过程！</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2019-05-22 12:35:22</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">博客</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Github</span> <span class="string">Pages</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><h1 id="八、其他"><a href="#八、其他" class="headerlink" title="八、其他"></a>八、其他</h1><h2 id="文章如何显示摘要"><a href="#文章如何显示摘要" class="headerlink" title="文章如何显示摘要"></a>文章如何显示摘要</h2><p>点击主页时，发现所有文章都是全文显示，不利于查找，可控制显示的字数。<br>解决办法：在你 MD 格式文章正文插入 <!-- more -->即可，只会显示它之前的，此后的就不显示，点击文章标题，全文阅读才可看到，同时注释掉以下 themes/yilia/_config.yml，重复</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># excerpt_link: more</span></span><br></pre></td></tr></table></figure><h2 id="文章显示目录"><a href="#文章显示目录" class="headerlink" title="文章显示目录"></a>文章显示目录</h2><p>增加文章目录 TOC(table of content )，方便阅读文章, 在 themes/yilia/_config.ym中进行配置 toc: 2即可，它会将你 Markdown 语法的标题，生成目录，目录查看在右下角。</p><h2 id="增加不蒜子统计"><a href="#增加不蒜子统计" class="headerlink" title="增加不蒜子统计"></a>增加不蒜子统计</h2><p>普通用户只需两步走：一行脚本+一行标签，搞定一切。追求极致的用户可以进行任意DIY。</p><h5 id="一、安装脚本（必选）"><a href="#一、安装脚本（必选）" class="headerlink" title="一、安装脚本（必选）"></a>一、安装脚本（必选）</h5><p>要使用不蒜子必须在页面中引入busuanzi.js，目前最新版如下。</p><figure class="highlight vbscript-html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">&quot;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>不蒜子可以给任何类型的个人站点使用，如果你是用的hexo，打开themes/你的主题/layout/_partial/footer.ejs添加上述脚本即可，当然你也可以添加到 header 中。</p><h5 id="二、安装标签（可选）"><a href="#二、安装标签（可选）" class="headerlink" title="二、安装标签（可选）"></a>二、安装标签（可选）</h5><p>只需要复制相应的html标签到你的网站要显示访问量的位置即可。您可以随意更改不蒜子标签为自己喜欢的显示效果，内容参考第三部分扩展开发。根据你要显示内容的不同，这分几种情况。</p><ul><li>1、显示站点总访问量<br>要显示站点总访问量，复制以下代码添加到你需要显示的位置。有两种算法可选：</li></ul><p>算法a：pv的方式，单个用户连续点击n篇文章，记录n次访问量。</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_container_site_pv&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    本站总访问量</span><span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_value_site_pv&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><span class="xml">次</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>算法b：uv的方式，单个用户连续点击n篇文章，只记录1次访客数。</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_container_site_uv&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">  本站访客数</span><span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_value_site_uv&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><span class="xml">人次</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>如果你是用的hexo，打开themes/你的主题/layout/_partial/footer.ejs添加即可。</p><h2 id="插入网易云音乐"><a href="#插入网易云音乐" class="headerlink" title="插入网易云音乐"></a>插入网易云音乐</h2><p>登入网易云音乐网页版，选择一首歌，点击歌曲详情，点击生成外链播放器,复制外链代码，插入你需要编辑的 MD 格式文章里面，即可.<br><img src="/assets/blogImg/201906261615.png"></p><h2 id="Url链接优化"><a href="#Url链接优化" class="headerlink" title="Url链接优化"></a>Url链接优化</h2><p>我们可以发现hexo默认生成的文章地址路径是 【网站名称／年／月／日／文章名称】。</p><p>这种链接对搜索爬虫是很不友好的，它的url结构超过了三层，太深了。</p><p>下面我推荐安装hexo-abbrlink插件：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-abbrlink <span class="comment">--save</span></span><br></pre></td></tr></table></figure><ul><li>实现思路：<br>对标题+时间进行md5然后再转base64，保存在front-matter中。</li></ul><p>然后配置_config.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># permalink: :title/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">archives/:abbrlink.html</span></span><br><span class="line"><span class="attr">abbrlink:</span></span><br><span class="line">  <span class="attr">alg:</span> <span class="string">crc32</span>  <span class="comment"># 算法：crc16(default) and crc32</span></span><br><span class="line">  <span class="attr">rep:</span> <span class="string">hex</span>    <span class="comment"># 进制：dec(default) and hex</span></span><br></pre></td></tr></table></figure><h2 id="Gitment评论"><a href="#Gitment评论" class="headerlink" title="Gitment评论"></a>Gitment评论</h2><p>gitment其实就是利用你的代码仓库的Issues，来实现评论。每一篇文章对应该代码仓库中的一个Issues,Issues中的评论对应你的博客每篇文章中的评论。</p><ol><li><p>注册 OAuth Application<br>首先要注册一个OAuth Application应用可以点击<a href="https://github.com/settings/applications/new">这里</a>。 输入的内容如下：<br>Application name （随意就好，可以写你博客名称）<br>Homepage URL     （你的博客地址，例如<a href="https://zhaozhifu08.github.io/">https://zhaozhifu08.github.io/</a> 如果有域名可以填写域名<a href="https://zhaozf.site/">https://zhaozf.site</a>  ）<br>Application description (随意就好)<br>Authorization callback URL (也是博客地址，例如<a href="https://zhaozhifu08.github.io/">https://zhaozhifu08.github.io/</a> 如果有域名可以填写域名<a href="https://zhaozf.site/">https://zhaozf.site</a>)<br>输入完成之后，点击注册就OK了。成功之后就会拿到Client ID和Client Secret，然后先进行一下步，记住这两个后面步骤会用到。</p></li><li><p>修改_config.yml文件<br>在themes-&gt;yilia-&gt;_config.yml中修改如下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#5、Gitment</span></span><br><span class="line"><span class="attribute">gitment_owner</span>: zhaozhifu<span class="number">0</span>     #你的 GitHub ID</span><br><span class="line"><span class="attribute">gitment_repo</span>: &#x27;zhaozhifu<span class="number">0</span>.github.io&#x27;          #存储评论的 repo</span><br><span class="line"><span class="attribute">gitment_oauth</span>:</span><br><span class="line">  <span class="attribute">client_id</span>: &#x27;<span class="number">41</span>be<span class="number">2</span>b<span class="number">66</span>b<span class="number">56556</span>bc<span class="number">6</span>c<span class="number">7</span>c&#x27;           #client ID</span><br><span class="line">  <span class="attribute">client_secret</span>: &#x27;<span class="number">3338513189</span>c<span class="number">56</span>c<span class="number">3740</span>d<span class="number">424</span>cd<span class="number">2268</span>be<span class="number">4</span>a<span class="number">4923</span>d<span class="number">99</span>a&#x27;       #client secret</span><br></pre></td></tr></table></figure></li><li><p>查看结果<br>运行命令：hexo s到浏览器查看结果 <a href="https://localhost:4000/">https://localhost:4000</a></p></li><li><p>遇到的坑</p></li></ol><p>4.1 Error: Not Found</p><ul><li>owner或repo配置错误</li><li>owner建议直接写github帐号</li><li>repo填写存放评论的仓库，填写仓库名称就可以了，不需要加<a href="https://github.com/xxx/">https://github.com/xxx/</a></li></ul><p>4.2 Error: Comments Not Initialized</p><ul><li>在该页面的Gitment评论区登陆GitHub账号</li><li>之前OAuth Application callback填写有误</li></ul><p>4.3  Error：validation failed</p><ul><li>id太长</li><li>issue的标签label有长度限制是50个字符</li><li>建议设置为发布博客的日期+时间：<br>修改themes\yilia\layout_partial\post\gitment.ejs 文件</li></ul><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gitment = <span class="keyword">new</span> Gitment(&#123;</span><br><span class="line">  id: <span class="string">&quot;&lt;%=url%&gt;&quot;</span>,                   <span class="comment">//修改为 id: &quot;&lt;%=page.date%&gt;&quot;,</span></span><br><span class="line">  owner: <span class="string">&#x27;&lt;%=theme.gitment_owner%&gt;&#x27;</span>,</span><br><span class="line">  repo: <span class="string">&#x27;&lt;%=theme.gitment_repo%&gt;&#x27;</span>,</span><br><span class="line">  oauth: &#123;</span><br><span class="line">    client_id: <span class="string">&#x27;&lt;%=theme.gitment_oauth.client_id%&gt;&#x27;</span>,</span><br><span class="line">    client_secret: <span class="string">&#x27;&lt;%=theme.gitment_oauth.client_secret%&gt;&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">gitment.render(<span class="string">&#x27;gitment-ctn&#x27;</span>)</span><br></pre></td></tr></table></figure><ol start="5"><li>Gitment 汉化</li></ol><ul><li>修改themes\yilia\layout_partial\post\gitment.ejs 文件<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;link <span class="attribute">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attribute">href</span>=<span class="string">&quot;//imsun.github.io/gitment/style/default.css&quot;</span>&gt;</span><br><span class="line">&lt;script <span class="attribute">src</span>=<span class="string">&quot;//imsun.github.io/gitment/dist/gitment.browser.js&quot;</span>&gt;&lt;/script&gt; </span><br></pre></td></tr></table></figure>将原来的修改为如下：<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;link <span class="attribute">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attribute">href</span>=<span class="string">&quot;https://billts.site/extra_css/gitment.css&quot;</span>&gt;</span><br><span class="line">&lt;script <span class="attribute">src</span>=<span class="string">&quot;https://billts.site/js/gitment.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="实现私密文件加密"><a href="#实现私密文件加密" class="headerlink" title="实现私密文件加密"></a>实现私密文件加密</h2><ul><li><p>安装插件命令<code>npm install --save hexo-blog-encrypt</code>或 <code>yarn add hexo-blog-encrypt</code>(需要) <a href="https://classic.yarnpkg.com/en/">Yarn</a>，然后编辑<code>_config.yml</code>文件，添加如下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Security</span></span><br><span class="line"><span class="comment">## 文章加密 hexo-blog-encrypt</span></span><br><span class="line"><span class="attr">encrypt:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li><p>然后在想加密的文章头部添加上对应字段，如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">hello</span> <span class="string">world</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2016-03-30 21:18:02</span>   </span><br><span class="line"><span class="attr">tags:</span>       </span><br><span class="line"><span class="attr">password:</span> <span class="number">12345</span>   <span class="string">（密码）</span></span><br><span class="line"><span class="attr">abstract:</span> <span class="string">查看文章，请输入文章密码。</span> </span><br><span class="line"><span class="attr">message:</span> <span class="string">这是一篇加密文章，内容可能是个人情感宣泄或者收费技术。如果你确实想看，请微信搜索公众号名称【无聊才读书呀】</span> <span class="string">或微信号：【zhaozfsite】回复关键字【博客密码】，获取文章密码。</span>  </span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure></li><li><p>password: 是该博客加密使用的密码</p></li><li><p>abstract: 是该博客的摘要，会显示在博客的列表页</p></li><li><p>message: 这个是博客查看时，密码输入框上面的描述性文字</p></li></ul><p>详细的内容和配置请参考github<a href="https://github.com/MikeCoder/hexo-blog-encrypt/blob/master/ReadMe.zh.md">hexo-blog-encrypt</a></p><p><a href="http://ds666.fun/2019/01/25/%E6%90%AD%E5%8D%9A%E5%AE%A2%E5%85%A8%E8%BF%87%E7%A8%8B%E5%8F%8A%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E5%92%8C%E7%BE%8E%E5%8C%96/">其他特效参考</a><br><a href="https://xhyeax.github.io/2018/11/30/click-word/">点击出现文字效果</a><br><a href="https://blog.csdn.net/stormdony/article/details/86001618">下雪特效</a></p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><blockquote><p><a href="https://www.zhihu.com/question/21193762">使用hexo，如果换了电脑怎么更新博客？</a><br><a href="https://www.jianshu.com/p/1e402922ee32/">Markdown——入门指南</a><br><a href="https://segmentfault.com/a/1190000004947261">手把手教你使用Hexo + Github Pages搭建个人独立博客</a><br><a href="https://eirunye.github.io/2018/09/02/Hexo%E6%90%AD%E5%BB%BAGitHub%E5%8D%9A%E5%AE%A2%E2%80%94%E6%89%93%E9%80%A0%E7%82%AB%E9%85%B7%E7%9A%84Next%E4%B8%BB%E9%A2%98%E2%80%94%E9%AB%98%E7%BA%A7%E2%80%94%E4%B8%89/#more">Hexo搭建GitHub博客—打造炫酷的NexT主题–高级(三)</a><br><a href="https://www.cnblogs.com/jackyroc/p/7681938.html">我是如何利用Github Pages搭建起我的博客，细数一路的坑</a><br><a href="https://segmentfault.com/a/1190000004947261">手把手教你使用Hexo + Github Pages搭建个人独立博客</a><br><a href="https://www.jianshu.com/p/f054333ac9e6">hexo的next主题个性化教程:打造炫酷网站</a><br><a href="https://www.codercto.com/a/55846.html">自己动手修改完善yilia主题</a><br><a href="https://www.codercto.com/a/57534.html">自己动手修改完善yilia主题（下）</a></p></blockquote><h1 id="其他扩展"><a href="#其他扩展" class="headerlink" title="其他扩展"></a>其他扩展</h1><p><a href="https://juejin.im/post/5ce53de85188252d46797fee">为什么我选择用 Github issues 来写博客</a><br><a href="https://blog.zscself.com/posts/70677220/">修改Yilia左下角SubNav的社交图标</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/blogImg/linian.jpg&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;一、注册github账号&quot;&gt;&lt;a href=&quot;#一、注册github账号&quot; class=&quot;headerlink&quot; title=&quot;一、注册github账号&quot;&gt;&lt;/a&gt;一、注册github账号&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;搜索Github官网进入，如果你已经有账号密码，那么点击右上角的sign in直接登录。&lt;/li&gt;
&lt;li&gt;如果没有点击sign up进行注册，填写昵称（用户名）、注册邮箱和密码。&lt;/li&gt;
&lt;li&gt;注册成功之后在Github首页右上角头像左侧加号点选择 New repositor(新存储库)进行创建一个代码仓库。&lt;br&gt;注意：仓库的名字一定是 yourname.github.io 其他默认即可。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://blogs.zhaozf.site/categories/Hexo/"/>
    
    
      <category term="博客" scheme="https://blogs.zhaozf.site/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="Github Pages" scheme="https://blogs.zhaozf.site/tags/Github-Pages/"/>
    
  </entry>
  
  <entry>
    <title>git学习</title>
    <link href="https://blogs.zhaozf.site/e28ceec1/"/>
    <id>https://blogs.zhaozf.site/e28ceec1/</id>
    <published>2019-05-21T08:46:04.000Z</published>
    <updated>2019-10-25T10:29:41.688Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git-学习"><a href="#Git-学习" class="headerlink" title="Git 学习"></a>Git 学习</h1><p><img src="https://git-scm.com/images/logo@2x.png" alt="git" title="git"></p><p>Git(读音为/gɪt/。)是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。</p><h3 id="一、安装git"><a href="#一、安装git" class="headerlink" title="一、安装git"></a>一、安装git</h3><h5 id="1-在Linux上安装git"><a href="#1-在Linux上安装git" class="headerlink" title="1.在Linux上安装git"></a>1.在Linux上安装git</h5><p>ubuntu上的命令：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-<span class="builtin-name">get</span> install git</span><br></pre></td></tr></table></figure><p>如果是其他版本的Linux可以通过源码安装。</p><p>先从官网下载源码，然后解压，依次输入：./config , make , sudo make install这几个命令。</p><a id="more"></a><h5 id="2-在Mac-OS-上安装git"><a href="#2-在Mac-OS-上安装git" class="headerlink" title="2.在Mac OS 上安装git"></a>2.在Mac OS 上安装git</h5><p>在Mac上安装推荐从APPSTORE安装。</p><h5 id="3-在Windows上安装git"><a href="#3-在Windows上安装git" class="headerlink" title="3.在Windows上安装git"></a>3.在Windows上安装git</h5><ol><li><p> 从git<a href="https://git-scm.com/downloads">官网下载程序</a>安装，按默认一直点下一步就可以。</p></li><li><p> 安装完成后，在开始菜单或者右键里可以找到git/git bash here点击运行出现类似命令行窗口的东西，恭喜你git安装成功了！</p></li><li><p> 然后在命令行里配置你的用户名和email地址。</p></li></ol><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="keyword">config</span> --<span class="keyword">global</span> user<span class="variable">.name</span> <span class="string">&quot;youname&quot;</span></span><br><span class="line">$ git <span class="keyword">config</span> --<span class="keyword">global</span> user<span class="variable">.eamil</span> <span class="string">&quot;youemail&quot;</span> </span><br></pre></td></tr></table></figure><h3 id="二、创建仓库"><a href="#二、创建仓库" class="headerlink" title="二、创建仓库"></a>二、创建仓库</h3><p>仓库就是版本库，英文名repository ，每个文件的修改、删除都在版本库里并且可以被追踪。</p><p>命令：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir Learn   <span class="regexp">//</span>创建文件夹</span><br><span class="line">$ cd Learn      <span class="regexp">//</span>进入文件夹Learn</span><br><span class="line">$ git init      <span class="regexp">//</span>初始化，把这个目录变成git仓库</span><br></pre></td></tr></table></figure><p>这时文件夹里会出现一个.git目录，如果没有看到那就打开隐藏文件。</p><h3 id="三、把文件添加到版本库"><a href="#三、把文件添加到版本库" class="headerlink" title="三、把文件添加到版本库"></a>三、把文件添加到版本库</h3><ol><li>  首先我们建立一个文本文档命名为README.txt，用命令添加到仓库：</li></ol><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add <span class="module-access"><span class="module"><span class="identifier">README</span>.</span></span>txt    <span class="comment">//git add &lt;file&gt;可以多次使用，添加多个文件</span></span><br></pre></td></tr></table></figure><ol start="2"><li>  用命令git commit告诉git，把文件提交到仓库。-m后面的内容是本次提交的说明，可以是任意的内容：</li></ol><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>git comnit -m <span class="string">&quot;新建一个README.txt&quot;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>  可以使用命令git status 查看当前仓库的状态：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git status </span><br><span class="line">On branch master</span><br><span class="line">Changes not staged for <span class="keyword">commit</span>:</span><br><span class="line">  (<span class="keyword">use</span> <span class="string">&quot;git add &lt;file&gt;...&quot;</span> <span class="keyword">to</span> <span class="keyword">update</span> what will be committed)</span><br><span class="line">  (<span class="keyword">use</span> <span class="string">&quot;git checkout -- &lt;file&gt;...&quot;</span> <span class="keyword">to</span> discard changes <span class="keyword">in</span> working <span class="keyword">directory</span>)</span><br><span class="line"></span><br><span class="line">    modified:   README.txt</span><br><span class="line"></span><br><span class="line"><span class="keyword">no</span> changes added <span class="keyword">to</span> <span class="keyword">commit</span> (<span class="keyword">use</span> <span class="string">&quot;git add&quot;</span> <span class="keyword">and</span>/<span class="keyword">or</span> <span class="string">&quot;git commit -a&quot;</span>)</span><br></pre></td></tr></table></figure><ol start="4"><li>  使用命令git diff可以查看文件做了什么修改：</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> git <span class="built_in">diff</span> README.txt</span><br></pre></td></tr></table></figure><p>注：如果git status告诉你有文件被修改过，用git diff可以查看修改内容。</p><ol start="5"><li>  使用命令git log显示从最近到最远的提交日志：</li></ol><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="keyword">log</span>   //如果嫌输出信息太多，看得眼花缭乱的，可以试试加上<span class="comment">--pretty=oneline参数</span></span><br><span class="line">$ git <span class="keyword">log</span>  <span class="comment">--pretty=oneline</span></span><br></pre></td></tr></table></figure><ol start="6"><li>  HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard commit_id    <span class="regexp">//</span>commit_id是版本号</span><br></pre></td></tr></table></figure><ol start="7"><li>  使用git reflog查看命令历史，以便确定要回到未来的哪个版本</li></ol><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">ref</span>log </span><br></pre></td></tr></table></figure><ol start="8"><li>  使用git checkout 命令可以丢弃工作区的修改</li></ol><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">$</span> git checkout -- <span class="keyword">file</span></span><br></pre></td></tr></table></figure><ol start="9"><li>  使用git rm命令用于删除一个文件</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> git <span class="built_in">rm</span> README.txt</span><br></pre></td></tr></table></figure><h3 id="四、把文件添加到远程仓库"><a href="#四、把文件添加到远程仓库" class="headerlink" title="四、把文件添加到远程仓库"></a>四、把文件添加到远程仓库</h3><ol><li> 由于你的本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，所以第一步是创建SSH Key。</li></ol><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">&quot;youremail@example.com&quot;</span>  <span class="comment">//一路回车，使用默认值即可</span></span><br><span class="line"></span><br><span class="line">完成之后可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.<span class="keyword">pub</span>两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.<span class="keyword">pub</span>是公钥，可以放心地告诉任何人。</span><br></pre></td></tr></table></figure><ol start="2"><li>  登录GitHub 打开“Account settings”，“SSH Keys”页面：</li></ol><p>然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容。</p><ol start="3"><li>  要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git</li></ol><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote <span class="keyword">add</span><span class="bash"> origin git@github.com:zhaozhifu-catshak/Learn.git</span></span><br></pre></td></tr></table></figure><ol start="4"><li>  关联后，使用命令git push -u origin master第一次推送master分支的所有内容，此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改</li></ol><ol start="5"><li>  用命令git clone克隆一个远程库到本地</li></ol><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="keyword">clone</span> <span class="title">git</span>@github.com:zhaozhifu-catshak/Learn.git</span><br></pre></td></tr></table></figure><h3 id="五、创建分支"><a href="#五、创建分支" class="headerlink" title="五、创建分支"></a>五、创建分支</h3><ol><li>首先，我们创建read分支，然后切换到read分支：</li></ol><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b <span class="built_in">read</span></span><br><span class="line">Switched <span class="built_in">to</span> <span class="keyword">a</span> <span class="built_in">new</span> branch <span class="string">&#x27;read&#x27;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git branch <span class="built_in">read</span>       //创建<span class="built_in">read</span>分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout <span class="built_in">read</span>     //切换到<span class="built_in">read</span>分支</span></span><br><span class="line">Switched to branch &#x27;read&#x27;</span><br></pre></td></tr></table></figure><ol start="3"><li>使用git branch命令查看当前分支：</li></ol><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">* <span class="keyword">read</span></span><br><span class="line">  <span class="literal">master</span></span><br></pre></td></tr></table></figure><ol start="4"><li>git branch命令会列出所有分支，当前分支前面会标一个*号。</li></ol><p>然后，我们就可以在read分支上正常提交。</p><ol start="5"><li>使用git merge命令用于合并指定分支到当前分支。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="keyword">merge</span> <span class="keyword">read</span></span><br><span class="line">Updating d46f35e..b17d20e</span><br><span class="line"><span class="keyword">Fast</span>-forward</span><br><span class="line"> readme.txt | <span class="number">1</span> +</span><br><span class="line"> <span class="number">1</span> <span class="keyword">file</span> <span class="keyword">changed</span>, <span class="number">1</span> insertion(+)</span><br><span class="line"></span><br><span class="line">注：如果要合并到<span class="keyword">master</span>主分支，要先切换到<span class="keyword">master</span>主分支</span><br></pre></td></tr></table></figure><ol start="6"><li>合并完成后，就可以放心地删除read分支了</li></ol><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="keyword">branch </span>-d read</span><br><span class="line">Deleted <span class="keyword">branch </span>dev (was <span class="keyword">b17d20e).</span></span><br></pre></td></tr></table></figure><ol start="7"><li>删除后，查看branch，就只剩下master分支了：</li></ol><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">$</span> git branch</span><br><span class="line"><span class="comment">* master</span></span><br></pre></td></tr></table></figure><ol start="8"><li><p>用git log –graph命令可以看到分支合并图.</p></li><li><p>合并分支时，加上–no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。</p></li></ol><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="keyword">merge</span> --<span class="keyword">no</span>-ff -<span class="keyword">m</span> <span class="string">&quot;merge with no-ff&quot;</span> <span class="keyword">read</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//-m参数可以把commit描述写进去。</span></span><br></pre></td></tr></table></figure><ol start="10"><li>使用git branch -D file 命令强行删除分支</li><li>推送分支:</li></ol><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">push</span> <span class="built_in">origin</span> <span class="built_in">read</span></span><br></pre></td></tr></table></figure><h3 id="六、创建标签"><a href="#六、创建标签" class="headerlink" title="六、创建标签"></a>六、创建标签</h3><ol><li>首先，切换到需要打标签的分支上，使用命令 git tag打标签。</li></ol><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">* <span class="keyword">read</span></span><br><span class="line">  <span class="literal">master</span></span><br><span class="line">$ git checkout <span class="literal">master</span></span><br><span class="line">Switched to branch &#x27;<span class="literal">master</span>&#x27;</span><br><span class="line">$ git <span class="keyword">tag</span> <span class="title">v1</span>.<span class="number">0</span></span><br><span class="line">//$ git <span class="keyword">tag</span> <span class="title">v0</span>.<span class="number">9</span> commit id</span><br><span class="line">//可以用commit id 给固定版本打标签</span><br></pre></td></tr></table></figure><ol start="2"><li>用命令git tag查看所有标签.</li></ol><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="keyword">tag</span></span><br><span class="line">//v0.<span class="number">9</span></span><br><span class="line">v1.<span class="number">0</span></span><br></pre></td></tr></table></figure><ol start="3"><li>命令git tag -a tagname -m “blablabla…”  可以指定标签信息</li></ol><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="keyword">tag</span> <span class="title">-a</span> v0.<span class="number">1</span> -m <span class="string">&quot;version 0.1 released&quot;</span> <span class="number">1094</span>adb</span><br></pre></td></tr></table></figure><ol start="4"><li>使用参数-d删除 <strong><em>本地</em></strong> 标签</li></ol><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="keyword">tag</span> <span class="title">-d</span> v0.<span class="number">1</span></span><br><span class="line">Deleted <span class="keyword">tag</span> <span class="title">&#x27;v0</span>.<span class="number">1</span>&#x27; (was f15b0dd)</span><br></pre></td></tr></table></figure><ol start="5"><li><p>命令git push origin :refs/tags/tagname 可以删除一个远程标签</p></li><li><p>命令git push origin tagname 可以推送一个本地标签；</p></li><li><p>命令git push origin –tags可以推送全部未推送过的本地标签；</p></li><li><p>让git显示颜色 </p></li></ol><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global <span class="built_in">color</span>.ui <span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li>2019年3月31日下午13：20</li></ul><h3 id="七、LFS（Large-File-Storage）"><a href="#七、LFS（Large-File-Storage）" class="headerlink" title="七、LFS（Large File Storage）"></a>七、LFS（Large File Storage）</h3><ul><li>1.显示 Git LFS 系统环境 .<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git lfs <span class="keyword">en</span><span class="variable">v:</span></span><br></pre></td></tr></table></figure></li><li>Populate working copy with real content from Git LFS files.</li><li>2.使用来自Git LFS文件的真实内容填充工作副本<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> git lfs checkout:</span><br></pre></td></tr></table></figure></li><li><pre><code>Download Git LFS files from a remote.</code></pre></li><li>3.从远程下载Git LFS文件<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>git lfs <span class="symbol">fetch:</span></span><br></pre></td></tr></table></figure></li><li>   Check Git LFS files for consistency.</li><li>4.检查Git LFS文件的一致性<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>git lfs <span class="symbol">fsck:</span></span><br></pre></td></tr></table></figure></li><li>   Install Git LFS configuration.</li><li>5.安装Git LFS并配置<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> git lfs install:</span><br></pre></td></tr></table></figure></li><li>   Set a file as “locked” on the Git LFS server.</li><li>6.在Git LFS服务器上将文件设置为“锁定”。<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="keyword">lfs</span> <span class="keyword">lock</span>:</span><br></pre></td></tr></table></figure></li><li>   List currently “locked” files from the Git LFS server.</li><li>7.列出当前从Git LFS服务器“锁定”的文件<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> git lfs locks:</span><br></pre></td></tr></table></figure></li><li>   Show errors from the Git LFS command.</li><li>8.显示来自Git LFS命令的错误。<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git lfs <span class="built_in">log</span><span class="variable">s:</span></span><br></pre></td></tr></table></figure></li><li>   Show information about Git LFS files in the index and working tree.</li><li>9.在索引和工作树中显示关于Git LFS文件的信息<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git lfs <span class="keyword">ls</span>-<span class="keyword">file</span><span class="variable">s:</span></span><br></pre></td></tr></table></figure></li><li>   Migrate history to or from Git LFS</li><li>10.将历史迁移到或从Git LFS<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>git lfs <span class="symbol">migrate:</span></span><br></pre></td></tr></table></figure></li><li>   Delete old Git LFS files from local storage</li><li>11.从本地存储中删除旧的Git LFS文件<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>git lfs <span class="symbol">prune:</span></span><br></pre></td></tr></table></figure></li><li>   Fetch Git LFS changes from the remote &amp; checkout any required working tree files.</li><li>12.从远程获取Git LFS更改并检出任何所需的工作树文件<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> git lfs pull:</span><br></pre></td></tr></table></figure></li><li>   Push queued large files to the Git LFS endpoint.</li><li>13.将排队的大文件推送到Git LFS端点<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="keyword">lfs</span> <span class="keyword">push</span>:</span><br></pre></td></tr></table></figure></li><li>   Show the status of Git LFS files in the working tree.</li><li>14.显示工作树中Git LFS文件的状态<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git lfs <span class="built_in">status</span>:</span><br></pre></td></tr></table></figure></li><li>   View or add Git LFS paths to Git attributes.</li><li>15.查看或向Git属性添加Git LFS路径<figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git lfs <span class="keyword">track</span>:</span><br></pre></td></tr></table></figure></li><li>   Uninstall Git LFS by removing hooks and smudge/clean filter configuration.</li><li>16.通过删除挂钩和涂抹/清除过滤器配置卸载Git LFS<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git lfs uninstall:</span></span><br></pre></td></tr></table></figure></li><li>   Remove “locked” setting for a file on the Git LFS server.</li><li>17.删除Git LFS服务器上文件的“锁定”设置。<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$</span> git lfs unlock:</span><br></pre></td></tr></table></figure></li><li>   Remove Git LFS paths from Git Attributes.</li><li>18.从Git属性中删除Git LFS路径<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>git lfs <span class="symbol">untrack:</span></span><br></pre></td></tr></table></figure></li><li> 19.更新当前Git存储库的Git hooks.<figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git lfs <span class="meta">update</span>:</span><br></pre></td></tr></table></figure></li><li>20.报告版本号.<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git lfs <span class="built_in">version</span>:</span><br></pre></td></tr></table></figure></li></ul><ul><li>Git LFS是一个与Git存储库相关联的大型文件管理和版本控制系统。Git LFS不将大型文件存储为blobs，而是在存储库中存储特殊的“指针文件”，同时将实际的文件内容存储在Git LFS服务器上。当需要时，会自动下载大文件的内容，例如签出包含大文件的Git分支时。</li><li>Git LFS使用“smudge”过滤器根据指针文件查找大文件的内容，使用“clean”过滤器在大文件的内容发生更改时创建指针文件的新版本。它还使用预推钩子将包含新大文件版本的提交上传到相应的Git服务器时，将大文件内容上传到Git LFS服务器。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Git-学习&quot;&gt;&lt;a href=&quot;#Git-学习&quot; class=&quot;headerlink&quot; title=&quot;Git 学习&quot;&gt;&lt;/a&gt;Git 学习&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://git-scm.com/images/logo@2x.png&quot; alt=&quot;git&quot; title=&quot;git&quot;&gt;&lt;/p&gt;
&lt;p&gt;Git(读音为/gɪt/。)是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。&lt;/p&gt;
&lt;h3 id=&quot;一、安装git&quot;&gt;&lt;a href=&quot;#一、安装git&quot; class=&quot;headerlink&quot; title=&quot;一、安装git&quot;&gt;&lt;/a&gt;一、安装git&lt;/h3&gt;&lt;h5 id=&quot;1-在Linux上安装git&quot;&gt;&lt;a href=&quot;#1-在Linux上安装git&quot; class=&quot;headerlink&quot; title=&quot;1.在Linux上安装git&quot;&gt;&lt;/a&gt;1.在Linux上安装git&lt;/h5&gt;&lt;p&gt;ubuntu上的命令：&lt;/p&gt;
&lt;figure class=&quot;highlight routeros&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sudo apt-&lt;span class=&quot;builtin-name&quot;&gt;get&lt;/span&gt; install git&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;如果是其他版本的Linux可以通过源码安装。&lt;/p&gt;
&lt;p&gt;先从官网下载源码，然后解压，依次输入：./config , make , sudo make install这几个命令。&lt;/p&gt;
    
    </summary>
    
    
      <category term="git" scheme="https://blogs.zhaozf.site/tags/git/"/>
    
      <category term="命令" scheme="https://blogs.zhaozf.site/tags/%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>树莓派安装系统之后的一些配置</title>
    <link href="https://blogs.zhaozf.site/32cba9ec/"/>
    <id>https://blogs.zhaozf.site/32cba9ec/</id>
    <published>2018-12-12T06:21:28.000Z</published>
    <updated>2019-10-25T10:29:41.685Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/blogImg/raspbian.webp"></p><p>树莓派Raspbian系统默认密码为raspberry，ubuntu mate默认密码为ubuntu</p><p>**（1）.**在sd卡上刷完了Ubuntu mate系统然后开机启动在命令行里输入sudo raspi-config然后输入密码进行初始配置。<br>    按上下键选择第五选项Advaned Options项 第一项是扩展sd卡的存储回车选ok就可以，在扩展sd卡的方法还有一个:</p><a id="more"></a><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">pi@raspberrypi ~ $ df -h #查看当前磁盘大小，总大小只有<span class="number">2.9</span>GB</span><br><span class="line"></span><br><span class="line">Filesystem      Size  Used Avail Use<span class="comment">% Mounted on</span></span><br><span class="line"></span><br><span class="line">rootfs          <span class="number">2.9</span>G  <span class="number">2.8</span>G   <span class="number">15</span>M <span class="number">100</span><span class="comment">% /</span></span><br><span class="line"></span><br><span class="line">/dev/root       <span class="number">2.9</span>G  <span class="number">2.8</span>G   <span class="number">15</span>M <span class="number">100</span><span class="comment">% /</span></span><br><span class="line"></span><br><span class="line">devtmpfs        <span class="number">214</span>M     <span class="number">0</span>  <span class="number">214</span>M   <span class="number">0</span><span class="comment">% /dev</span></span><br><span class="line"></span><br><span class="line">tmpfs            <span class="number">44</span>M  <span class="number">244</span>K   <span class="number">44</span>M   <span class="number">1</span><span class="comment">% /run</span></span><br><span class="line"></span><br><span class="line">tmpfs           <span class="number">5.0</span>M     <span class="number">0</span>  <span class="number">5.0</span>M   <span class="number">0</span><span class="comment">% /run/lock</span></span><br><span class="line"></span><br><span class="line">tmpfs            <span class="number">88</span>M     <span class="number">0</span>   <span class="number">88</span>M   <span class="number">0</span><span class="comment">% /run/shm</span></span><br><span class="line"></span><br><span class="line">/dev/mmcblk0p1   <span class="number">56</span>M   <span class="number">19</span>M   <span class="number">37</span>M  <span class="number">34</span><span class="comment">% /boot</span></span><br><span class="line"></span><br><span class="line">tmpfs            <span class="number">88</span>M     <span class="number">0</span>   <span class="number">88</span>M   <span class="number">0</span><span class="comment">% /tmp</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">pi@raspberrypi ~ $ cat /sys/block/mmcblk0/mmcblk0p2/<span class="keyword">start</span>   <span class="comment"># 查看第二分区的起始地址，后面会用到</span></span><br><span class="line"><span class="number">122880</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">pi</span>@raspberrypi ~ $ sudo fdisk /dev/mmcblk0   <span class="comment">#使用fdisk操作磁盘</span></span><br><span class="line"></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="keyword">help</span>): d   <span class="comment">#d，删除分区</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Partition</span> <span class="built_in">number</span> (<span class="number">1</span><span class="number">-4</span>): <span class="number">2</span>   <span class="comment"># 2，删除第二分区</span></span><br><span class="line"></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="keyword">help</span>): n  <span class="comment">#创建一个新分区</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Partition</span> <span class="keyword">type</span>:</span><br><span class="line"></span><br><span class="line">   p   primary (<span class="number">1</span> primary, <span class="number">0</span> <span class="keyword">extended</span>, <span class="number">3</span> free)</span><br><span class="line"></span><br><span class="line">   e   <span class="keyword">extended</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Select</span> (<span class="keyword">default</span> p): p  <span class="comment">#创建主分区</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Partition</span> <span class="built_in">number</span> (<span class="number">1</span><span class="number">-4</span>, <span class="keyword">default</span> <span class="number">2</span>): <span class="number">2</span>  <span class="comment">#分区2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">First</span> sector (<span class="number">2048</span><span class="number">-7744511</span>, <span class="keyword">default</span> <span class="number">2048</span>): <span class="number">122880</span>  <span class="comment">#输入第一次得到的第二分区起始扇区</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Last</span> sector, +sectors <span class="keyword">or</span> +<span class="keyword">size</span>&#123;K,M,G&#125; (<span class="number">122880</span><span class="number">-7744511</span>, <span class="keyword">default</span> <span class="number">7744511</span>):  <span class="comment">#最后一个sector，默认即可Enter</span></span><br><span class="line"><span class="keyword">Using</span> <span class="keyword">default</span> <span class="keyword">value</span> <span class="number">7744511</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Command (m for <span class="keyword">help</span>): w   <span class="comment">#将上面的操作写入分区表</span></span><br><span class="line"></span><br><span class="line">The <span class="keyword">partition</span> <span class="keyword">table</span> has been altered!</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">Calling</span> ioctl() <span class="keyword">to</span> re-<span class="keyword">read</span> <span class="keyword">partition</span> table.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">WARNING</span>: Re-reading the <span class="keyword">partition</span> <span class="keyword">table</span> <span class="keyword">failed</span> <span class="keyword">with</span> <span class="keyword">error</span> <span class="number">16</span>: Device <span class="keyword">or</span> <span class="keyword">resource</span> busy.</span><br><span class="line">The kernel still uses the <span class="keyword">old</span> table. The <span class="keyword">new</span> <span class="keyword">table</span> will be used <span class="keyword">at</span></span><br><span class="line"></span><br><span class="line">the <span class="keyword">next</span> reboot <span class="keyword">or</span> <span class="keyword">after</span> you run partprobe(<span class="number">8</span>) <span class="keyword">or</span> kpartx(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">Syncing disks.</span><br></pre></td></tr></table></figure><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">pi</span><span class="meta">@raspberrypi</span> ~ $ sudo reboot  <span class="comment">#设置完成需要重启，sudo reboot</span></span><br></pre></td></tr></table></figure><p>**（2）.**设置root账户密码：<br>            在命令行里输入sudo passwd<br>            然后敲击回车 输入当前用户的密码。<br>            在回车就会出现Enter new UNIX password:输入新的root密码<br>            输入新的root密码之后还会让你重新输入一遍 Retype new UNIX password:重新输入密码<br>            passwd：passwd updated sucessfully<br>            然后在命令行里输入su root 回车和密码就可以进入root账户了</p><p>**（3）.**开启ssh服务也有两个方法先说简单的<br>    还是在raspi-config第三选项Interfacing Options里，然后开启ssh。<br>    之后在树莓派里查看ip地址 用putty这个软件进行远程连接。<br>**（4）.**安装vim编辑器与git</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># sudo apt-get install vim</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># sudo apt-get install git</span></span><br></pre></td></tr></table></figure><p>**（5）.**安装google拼音</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># sudo apt-get install fcitx fcitx-googlepinyin</span></span><br></pre></td></tr></table></figure><p>**（6）.**更换软件源</p><p>1、把原来的<a href="http://ports.ubuntu.com/%E5%85%A8%E9%83%A8%E6%9B%BF%E6%8D%A2%E4%B8%BAhttp://mirrors.ustc.edu.cn/ubuntu-ports/(%E4%B8%AD%E7%A7%91%E5%A4%A7)">http://ports.ubuntu.com/全部替换为http://mirrors.ustc.edu.cn/ubuntu-ports/(中科大)</a><br>使用命令：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># sudo vim <span class="regexp">/etc/</span>apt/sources.list</span><br></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">deb https:<span class="regexp">//mi</span>rrors.ustc.edu.cn<span class="regexp">/ubuntu/</span> xenial main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb-src https:<span class="regexp">//mi</span>rrors.ustc.edu.cn<span class="regexp">/ubuntu/</span> xenial main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb https:<span class="regexp">//mi</span>rrors.ustc.edu.cn<span class="regexp">/ubuntu/</span> xenial-security main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb-src https:<span class="regexp">//mi</span>rrors.ustc.edu.cn<span class="regexp">/ubuntu/</span> xenial-security main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb https:<span class="regexp">//mi</span>rrors.ustc.edu.cn<span class="regexp">/ubuntu/</span> xenial-updates main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb-src https:<span class="regexp">//mi</span>rrors.ustc.edu.cn<span class="regexp">/ubuntu/</span> xenial-updates main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb https:<span class="regexp">//mi</span>rrors.ustc.edu.cn<span class="regexp">/ubuntu/</span> xenial-backports main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb-src https:<span class="regexp">//mi</span>rrors.ustc.edu.cn<span class="regexp">/ubuntu/</span> xenial-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure><p>2、然后保存退出</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#sudo apt-get update</span></span><br><span class="line"><span class="meta">#sudo apt-get upgrade</span></span><br></pre></td></tr></table></figure><p>进行更新</p><p>**（7）.**通过蓝牙连接音响播放音乐</p><p>打开蓝牙管理器然后查找设备，之后配对 完成之后右键连接到音频槽<br>使用vlc播放音乐，如果音响没有声音，在播放设备里选择音频设备，选择蓝牙音响设备就可以了。<br>2019年7月26日最后修改</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/blogImg/raspbian.webp&quot;&gt;&lt;/p&gt;
&lt;p&gt;树莓派Raspbian系统默认密码为raspberry，ubuntu mate默认密码为ubuntu&lt;/p&gt;
&lt;p&gt;**（1）.**在sd卡上刷完了Ubuntu mate系统然后开机启动在命令行里输入sudo raspi-config然后输入密码进行初始配置。&lt;br&gt;    按上下键选择第五选项Advaned Options项 第一项是扩展sd卡的存储回车选ok就可以，在扩展sd卡的方法还有一个:&lt;/p&gt;
    
    </summary>
    
      <category term="Raspberry Pi" scheme="https://blogs.zhaozf.site/categories/Raspberry-Pi/"/>
    
    
      <category term="树莓派" scheme="https://blogs.zhaozf.site/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
  </entry>
  
  <entry>
    <title>资源收集  --持续更新</title>
    <link href="https://blogs.zhaozf.site/cdd937ce/"/>
    <id>https://blogs.zhaozf.site/cdd937ce/</id>
    <published>2016-05-19T11:15:13.000Z</published>
    <updated>2020-07-28T03:02:30.741Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/blogImg/gaolu.png"></p><p><a href="https://haoel.github.io/">科学上网</a></p><h1 id="微信小程序资源"><a href="#微信小程序资源" class="headerlink" title="微信小程序资源"></a>微信小程序资源</h1><ul><li><a href="https://github.com/nanwangjkl/awesome-wechat-weapp">微信小程序开发资源汇总</a> </li></ul><hr><h1 id="web学习资源"><a href="#web学习资源" class="headerlink" title="web学习资源"></a>web学习资源</h1><ul><li><p><a href="https://fullstackopen.com/zh">https://fullstackopen.com/zh</a></p></li><li><p><a href="https://daotin.github.io/">从零开始学 Web 教程</a></p></li></ul><a id="more"></a><ul><li><p><a href="https://github.com/qianguyihao/Web">团长Web学习笔记</a></p></li><li><p><a href="http://es6.ruanyifeng.com/">ECMAScript 6 入门 作者：阮一峰</a></p></li><li><p><a href="https://www.yuque.com/fe9/basic">前端九部 - 入门者手册2019</a></p></li><li><p>逐行剖析Vue.js源码 分九大模块，逐个击破。 在线阅读地址<a href="https://nlrx-wjc.github.io/Learn-Vue-Source-Code/">https://nlrx-wjc.github.io/Learn-Vue-Source-Code/</a></p></li></ul><p><a href="https://github.com/NLRX-WJC/Learn-Vue-Source-Code">项目地址:https://github.com/NLRX-WJC/Learn-Vue-Source-Code</a></p><hr><h1 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h1><ul><li><p><a href="https://coolshell.cn/">陈皓</a></p></li><li><p><a href="http://www.taohui.pub/">陶辉</a></p></li><li><p><a href="https://github.com/qq449245884/xiaozhi">前端小智</a></p></li><li><p><a href="https://github.com/mqyqingfeng/Blog">冴羽的博客</a></p></li><li><p><a href="https://github.com/yanlele/node-index">颜乐乐</a></p></li><li><p><a href="https://lutaonan.com/">卢涛南</a></p></li><li><p><a href="https://imsun.net/">孙士权</a></p></li><li><p><a href="https://blog.lsqy.space/">lsqy</a></p></li><li><p><a href="http://louiszhai.github.io/">路易斯</a></p></li><li><p><a href="https://geekplux.com/">geekplux</a></p></li><li><p><a href="https://xin-tan.com/">心谭博客</a></p></li><li><p><a href="https://blankj.com/">blankj  Android开发</a></p></li><li><p><a href="https://zhousiwei.gitee.io/">周思伟  后端</a></p></li><li><p><a href="https://www.barretlee.com/">小胡子哥的个人网站</a></p></li><li><p><a href="http://yangyingming.com/">杨英明-python</a></p></li><li><p><a href="http://yanyiwu.com/">吴延毅</a></p></li><li><p><a href="https://xin-tan.com/">心谭dongyuanxin</a> <a href="https://xxoo521.com/">心谭dongyuanxin</a></p></li><li><p><a href="http://hrb.osask.jp/">川合秀实 30天自制操作系统作者</a></p></li></ul><hr><h1 id="简历"><a href="#简历" class="headerlink" title="简历"></a>简历</h1><ul><li><p><a href="http://www.flqin.com/">web前端工程师简历</a></p></li><li><p><a href="http://www.flqin.com/2015/">web前端工程师简历(2015版)</a></p></li><li><p><a href="https://jirengu-inc.github.io/animating-resume/public/">饥人谷出品：一个会动的简历</a></p></li><li><p><a href="https://resume.congm.in/">闵聪的简历</a>   github地址：<a href="https://github.com/mcc108/resume">https://github.com/mcc108/resume</a></p></li><li><p><a href="https://resume.lxxyx.cn/">刘子健的简历</a></p></li><li><p><a href="http://yujiangshui.github.io/about-me/">于江水的简历</a>  github地址：<a href="https://github.com/yujiangshui/about-me">https://github.com/yujiangshui/about-me</a></p></li><li><p><a href="https://zengtianshengz.github.io/blog/resume-vue/">一个用vue生成的‘动态个人简历’</a>  github地址：<a href="https://github.com/ZengTianShengZ/resume-vue">https://github.com/ZengTianShengZ/resume-vue</a></p></li><li><p><a href="https://fangyinghang.com/">方应杭的个人网站</a></p></li><li><p><a href="https://brenner8023.github.io/fe-demo/vue-resume/index.html#/">陈旭钦</a></p></li></ul><hr><h1 id="读书"><a href="#读书" class="headerlink" title="读书"></a>读书</h1><ul><li><p><a href="https://www.jiumodiary.com/">搜书网站鸠摩搜书</a></p></li><li><p><a href="https://github.com/qianguyihao/Books">书籍推荐、读书笔记、文章推荐</a></p></li><li><p><a href="https://lib-pku.github.io/">贵校课程资料民间整理</a>   github地址：<a href="https://github.com/lib-pku/libpku">https://github.com/lib-pku/libpku</a></p></li><li><p><a href="https://brenner8023.github.io/gdut-course/">广东工业大学计算机学院课程攻略</a></p></li><li><p><a href="https://github.com/jwasham/coding-interview-university/blob/master/translations/README-cn.md">一个亚马逊软件开发工程师成长为大型企业的网络开发人员的自学路线</a></p></li></ul><hr><h1 id="演示-demo-动画"><a href="#演示-demo-动画" class="headerlink" title="演示/demo/动画"></a>演示/demo/动画</h1><ul><li><p><a href="https://fangyinghang.com/make-a-pikachu/">画一只皮卡丘</a></p></li><li><p><a href="https://gdufedu.github.io/">demo演示</a></p></li></ul><hr><h1 id="游戏"><a href="#游戏" class="headerlink" title="游戏"></a>游戏</h1><ul><li><a href="https://battle-city.js.org/#/">坦克大战 网页版</a> github地址：<a href="https://github.com/shinima/battle-city">https://github.com/shinima/battle-city</a></li></ul><hr><h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><p><a href="https://docsify.js.org/#/">docsify  一个神奇的文档站点生成器</a></p><p><a href="https://lanhuapp.com/">蓝湖</a></p><p><a href="https://modao.cc/">墨刀</a></p><p><a href="https://tinypng.com/">图片压缩-tinypng</a>ai</p><p><a href="https://zhitu.isux.us/">智图-图片优化网站</a></p><p><a href="https://www.iconfont.cn/">Iconfont-阿里巴巴矢量图标库</a></p><p><a href="https://www.easy-mock.com/">Easy Mock-模拟数据</a></p><p><a href="https://remixicon.com/">REMIX ICON</a></p><p><a href="https://webgradients.com/">高颜值颜色渐变网站－WebGradients</a></p><p><a href="https://www.pdfpai.com/">PDF派-转epub、Word、Excel等</a></p><p><a href="https://www.ilovepdf.com/zh-cn">PDF爱好者的在线工具</a></p><p><a href="https://www.gaitubao.com/yinzhang/">印章生成网站</a></p><h1 id="好文章"><a href="#好文章" class="headerlink" title="好文章"></a>好文章</h1><p><a href="https://molunerfinn.com/make-a-hexo-theme/#%E5%89%8D%E8%A8%80">Hexo主题开发经验杂谈</a>  {有些资源加载需要挂vpn}</p><p>1、一席：<a href="https://yixi.tv/">一席</a></p><p>类似于公开课的视频节目。邀请知名讲者，分享他们丰富的精神世界。</p><p>2、全历史：<a href="https://www.allhistory.com/">全历史</a></p><p>一个很神仙的历史类网站。也可以下载「全历史」App体验。</p><p>3、Topbook：<a href="https://topbook.cc/overview">Topbook – 高效生活视频书</a></p><p>高效视频生活书。偏工具类。</p><p>4、码力全开：<a href="https://www.maliquankai.com/">码力全开 - 独立开发者的聚集地</a></p><p>偏设计类。</p><p>5、利器：<a href="http://liqi.io/">http://liqi.io</a></p><p>采访优秀的创造者，分享他们在工作时所使用的工具，以及使用工具的方式和原则。也可以关注相应的公众号。有一段时间没更新了，可以看看历史文章。</p><p>6.回形针手册：<a href="https://www.ipaperclip.net/">回形针手册</a></p><p>回形针手册是一本涵盖了日常生活所涉及方方面面的百科手册</p><p>7.wikihow <a href="https://zh.wikihow.com/">wikihow</a></p><p>一个能让所有人学做任何事的平台.<br>wikihow 是一个更加精准的百度文库 + 知乎。 不同于百度文库和知乎的是 wikihow 并不会答非所问，只要能够搜索到你的提问就会给出详细的图文指南。</p><p>8、<a href="https://tool.ixarea.com/music/">网易 QQ 音乐格式解锁</a><br>9、不死鸟 <a href="https://hao.su/">https://hao.su/</a></p><p>10、今日热榜-热点新闻聚集<a href="https://tophub.today/">今日热榜</a><br>看新闻的咨询网站</p><p>11、后续-持续追踪热点新闻<a href="https://houxu.app/">后续官网</a></p><p>12、科塔学术<a href="https://site.sciping.com/">科塔学术</a><br>科塔学术收录的资源链接都是与科研学术资源有关的内容，是一个十分良心的学术资源导航！</p><p>适合论文答辩或研究学术的群体收藏。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/assets/blogImg/gaolu.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://haoel.github.io/&quot;&gt;科学上网&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;微信小程序资源&quot;&gt;&lt;a href=&quot;#微信小程序资源&quot; class=&quot;headerlink&quot; title=&quot;微信小程序资源&quot;&gt;&lt;/a&gt;微信小程序资源&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/nanwangjkl/awesome-wechat-weapp&quot;&gt;微信小程序开发资源汇总&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&quot;web学习资源&quot;&gt;&lt;a href=&quot;#web学习资源&quot; class=&quot;headerlink&quot; title=&quot;web学习资源&quot;&gt;&lt;/a&gt;web学习资源&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://fullstackopen.com/zh&quot;&gt;https://fullstackopen.com/zh&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://daotin.github.io/&quot;&gt;从零开始学 Web 教程&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="资源" scheme="https://blogs.zhaozf.site/tags/%E8%B5%84%E6%BA%90/"/>
    
      <category term="杂谈" scheme="https://blogs.zhaozf.site/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
</feed>
